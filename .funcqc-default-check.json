‚úÖ All required dependencies already satisfied: [BASIC, CALL_GRAPH]
   ‚ÑπÔ∏è  pre-delete validation: User responsibility (run: npm run typecheck; npm test)
üõ°Ô∏è  Starting safe deletion analysis...
   Confidence threshold: 0.95
   Max functions per batch: 10
   Dry run: Yes
‚ÑπÔ∏è  Info: Safety checks: 0 anonymous functions, 14 internal functions, 0 type-protected functions
   üéØ Using 4390 high-confidence edges (‚â•0.95)
   üîç Found 389 deletion candidates
{
  "summary": {
    "candidates": 389,
    "deleted": 0,
    "skipped": 0,
    "errors": 0,
    "warnings": 0
  },
  "preDeleteValidation": {
    "typeCheckPassed": true,
    "testsPassed": true,
    "errors": [],
    "warnings": [],
    "timestamp": "2025-09-06T08:18:40.772Z"
  },
  "postDeleteValidation": {
    "typeCheckPassed": true,
    "testsPassed": true,
    "errors": [],
    "warnings": [],
    "timestamp": ""
  },
  "candidates": [
    {
      "functionInfo": {
        "id": "63274fbb-ccfc-598c-a8b6-a623e50ff09c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "420e9eccb0d299b7d8d7b46c91378549f48fd7a6d46624864d4d7d8caf314fb5",
        "contentId": "f5fa9fab93666b5bb888725b55ad49aae18e542eaafbf989996c1ffa53110fa9",
        "name": "printBaselineSummary",
        "displayName": "NoCacheCallGraphAnalyzer.printBaselineSummary",
        "signature": "public NoCacheCallGraphAnalyzer.printBaselineSummary(): void",
        "signatureHash": "573e195f991ed3b7dd19c0b7ce75a167798c58ca5f82c5bedcbd9f2e08715fd1",
        "filePath": "/src/benchmarks/performance-comparison.ts",
        "fileHash": "dfba80e67a0f26c694e92dfd3b15274a",
        "startLine": 117,
        "endLine": 119,
        "startColumn": 2,
        "endColumn": 72,
        "astHash": "95e9a47d0dfdb481",
        "contextPath": [
          "NoCacheCallGraphAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "printBaselineSummary() {\n    this.baselineProfiler.printSummary();\n  }",
        "sourceFileRefId": "1ad9abe6-e8ab-4fcb-9209-5578f32bb8ad",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "low",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b8f4656b-7019-5ded-bf25-9bd651164d1b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2b015190f23ba0ac439f85e0c4363cd1a7401f677e24690c2c40f486a9d6c118",
        "contentId": "63892ce203b3feb1c0adaf755a8535dba9fae6134cb7990ca418d9b1ab6a62ce",
        "name": "disposeProject",
        "displayName": "SharedVirtualProjectManager.disposeProject",
        "signature": "public SharedVirtualProjectManager.disposeProject(snapshotId: string): void",
        "signatureHash": "d0ba6db49e315fdb7b9e7624bf92cfa8b8f8042af5d8f47da442bf6defc81821",
        "filePath": "/src/core/shared-virtual-project-manager.ts",
        "fileHash": "952b21ecd0e1526cc21545aeccaae658",
        "startLine": 125,
        "endLine": 137,
        "startColumn": 2,
        "endColumn": 363,
        "astHash": "bce9176dc5bad6f8",
        "contextPath": [
          "SharedVirtualProjectManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Manually dispose project for specific snapshot\n   */\n  disposeProject(snapshotId: string): void {\n    const cached = this.projectCache.get(snapshotId);\n    if (cached) {\n      try {\n        // Projects don't have dispose method in ts-morph, just remove from cache\n      } catch {\n        // Ignore disposal errors\n      }\n      \n      this.projectCache.delete(snapshotId);\n      // Disposed virtual project\n    }\n  }",
        "sourceFileRefId": "45fa55bd-e72e-4eff-a398-bfa354fd7290",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 18,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.5,
          "halsteadVolume": 59.79,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 88.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "low",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "aded01ec-efcc-5704-8c07-7413931eab4e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8ecf8e14a3f821415fee13ee44d562e07843d2c72916b069a6b53f85e667e455",
        "contentId": "f9250a957d527607e1fc51d7018a569b5edf18088db7fbb7e454a8c55a3fc161",
        "name": "getProject",
        "displayName": "SharedVirtualProjectManager.getProject",
        "signature": "public SharedVirtualProjectManager.getProject(snapshotId: string): Project",
        "signatureHash": "e7a7a656bfed84ec45eac5b23f42e4aebdff591db6d0b8d2420cd1b8a732862f",
        "filePath": "/src/core/shared-virtual-project-manager.ts",
        "fileHash": "952b21ecd0e1526cc21545aeccaae658",
        "startLine": 143,
        "endLine": 149,
        "startColumn": 2,
        "endColumn": 319,
        "astHash": "f6969054fd8f0c74",
        "contextPath": [
          "SharedVirtualProjectManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get project for snapshot (throws if not found)\n   * For analysis side - assumes project is already created by cli-wrapper\n   */\n  getProject(snapshotId: string): Project {\n    const cached = this.projectCache.get(snapshotId);\n    if (cached && this.isProjectValid(cached)) {\n      return cached.project;\n    }\n    throw new Error(`No project found for snapshot ${snapshotId}. Project should be created by cli-wrapper before analysis begins.`);\n  }",
        "sourceFileRefId": "45fa55bd-e72e-4eff-a398-bfa354fd7290",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1.75,
          "halsteadVolume": 87.57,
          "halsteadDifficulty": 2.18,
          "maintainabilityIndex": 91.28
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "low",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "918be3ae-3c11-5db3-b8f3-33827e6702ad",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "38658a64f529d6eb2d50d2ab1180f75f529faaa542da594de032585c43519a97",
        "contentId": "49f5bcf7ac57148d6e8a7bfcbcaed76b52d27a9e2009527c163cbc14a37a5bc3",
        "name": "getCachedProject",
        "displayName": "SharedVirtualProjectManager.getCachedProject",
        "signature": "public SharedVirtualProjectManager.getCachedProject(snapshotId: string): Project | null",
        "signatureHash": "366c3afe4048f0f0794d8910e0bc02d8db2ebf4caa57c48fc65f730f02a0a522",
        "filePath": "/src/core/shared-virtual-project-manager.ts",
        "fileHash": "952b21ecd0e1526cc21545aeccaae658",
        "startLine": 154,
        "endLine": 160,
        "startColumn": 2,
        "endColumn": 215,
        "astHash": "f4d677959f0c2da8",
        "contextPath": [
          "SharedVirtualProjectManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cached project for snapshot if available\n   */\n  getCachedProject(snapshotId: string): Project | null {\n    const cached = this.projectCache.get(snapshotId);\n    if (cached && this.isProjectValid(cached)) {\n      return cached.project;\n    }\n    return null;\n  }",
        "sourceFileRefId": "45fa55bd-e72e-4eff-a398-bfa354fd7290",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 77.71,
          "halsteadDifficulty": 2.1,
          "maintainabilityIndex": 92.17
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "low",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4ebbfeac-0bf9-539c-af99-bc55733a0c47",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "54c28833b1cbf5867da3a6f3efa5cc88548237adb069c5a5ec33f00d0645e28b",
        "contentId": "17b94a13784868554b0d33e263bdb2cb23dce2d8560f6523c1002c270e9c017f",
        "name": "getCacheStats",
        "displayName": "SharedVirtualProjectManager.getCacheStats",
        "signature": "public SharedVirtualProjectManager.getCacheStats(): { cachedProjects: number; totalFiles: number }",
        "signatureHash": "1f5e20652a28cbb03c514d4bcdd3bbbb08aba8b207713de3787f0e9eb85de9ea",
        "filePath": "/src/core/shared-virtual-project-manager.ts",
        "fileHash": "952b21ecd0e1526cc21545aeccaae658",
        "startLine": 165,
        "endLine": 176,
        "startColumn": 2,
        "endColumn": 309,
        "astHash": "86f5732e89aed66c",
        "contextPath": [
          "SharedVirtualProjectManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cache statistics\n   */\n  getCacheStats(): { cachedProjects: number; totalFiles: number } {\n    let totalFiles = 0;\n    \n    for (const cached of this.projectCache.values()) {\n      totalFiles += cached.project.getSourceFiles().length;\n    }\n    \n    return {\n      cachedProjects: this.projectCache.size,\n      totalFiles\n    };\n  }",
        "sourceFileRefId": "45fa55bd-e72e-4eff-a398-bfa354fd7290",
        "parameters": [],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 17,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 116,
          "halsteadDifficulty": 2.19,
          "maintainabilityIndex": 81.06
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "low",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9a339380-6e95-5876-91d7-6f6be1708231",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4d0a4e5a8ca6234849d64e2d814a3604cd095fd39bd2b0fd41aad647aae3ffd1",
        "contentId": "7642ba2af696285b99e7637339b883563ee80fb9c0d3898e6b1ab63d2bc74bae",
        "name": "clearAll",
        "displayName": "SharedVirtualProjectManager.clearAll",
        "signature": "public SharedVirtualProjectManager.clearAll(): void",
        "signatureHash": "d40c89c05ef3818bdab94a1080fce993f394279fc39378547bc14b3f0edf4905",
        "filePath": "/src/core/shared-virtual-project-manager.ts",
        "fileHash": "952b21ecd0e1526cc21545aeccaae658",
        "startLine": 181,
        "endLine": 192,
        "startColumn": 2,
        "endColumn": 331,
        "astHash": "0b502a6bdf81c4ea",
        "contextPath": [
          "SharedVirtualProjectManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear all cached projects\n   */\n  clearAll(): void {\n    for (const [_snapshotId, _cached] of this.projectCache.entries()) {\n      try {\n        // Projects don't have dispose method in ts-morph, just remove from cache\n      } catch {\n        // Ignore disposal errors\n      }\n    }\n    \n    this.projectCache.clear();\n    // Cleared all virtual project cache\n  }",
        "sourceFileRefId": "45fa55bd-e72e-4eff-a398-bfa354fd7290",
        "parameters": [],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 17,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 1.13,
          "maintainabilityIndex": 92.39
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "low",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "643d670a-c558-5989-aa1b-410368afe036",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3c48644b0a2846eaf8741be43fd92c0ecb630940ff04b1f6185f40f6d90ce42a",
        "contentId": "d7be560d76ac50f06333d384d1db1f96919220ecd57f0b2a0f379358fe51cbdd",
        "name": "getOrCreateProject",
        "displayName": "SharedVirtualProjectManager.getOrCreateProject",
        "signature": "public async SharedVirtualProjectManager.getOrCreateProject(snapshotId: string, fileContentMap: Map<string, string>): Promise<{ project: Project; isNewlyCreated: boolean }>",
        "signatureHash": "7346d0fa10a0e503fa21e09e1e3fed7220396701df603ecd6ddbbe2093c2975c",
        "filePath": "/src/core/shared-virtual-project-manager.ts",
        "fileHash": "952b21ecd0e1526cc21545aeccaae658",
        "startLine": 26,
        "endLine": 82,
        "startColumn": 2,
        "endColumn": 1866,
        "astHash": "563f69d699631437",
        "contextPath": [
          "SharedVirtualProjectManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// 30 minutes\n  \n  /**\n   * Get or create virtual project for given snapshot\n   * Returns existing project if available, creates new one otherwise\n   */\n  async getOrCreateProject(\n    snapshotId: string,\n    fileContentMap: Map<string, string>\n  ): Promise<{ project: Project; isNewlyCreated: boolean }> {\n    // Check if project exists in cache\n    const cached = this.projectCache.get(snapshotId);\n    \n    \n    if (cached && this.isProjectValid(cached)) {\n      // ËøΩÂä†„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂèçÊò†„Åó„Å¶„Åã„ÇâËøî„Åô\n      if (fileContentMap.size > cached.fileContentMap.size) {\n        // Updating virtual project with additional files\n        for (const [filePath, content] of fileContentMap) {\n          if (!cached.fileContentMap.has(filePath)) {\n            const existing = cached.project.getSourceFile(filePath);\n            if (existing) {\n              existing.replaceWithText(content);\n            } else {\n              cached.project.createSourceFile(filePath, content, { overwrite: true });\n            }\n          }\n        }\n        cached.fileContentMap = new Map(fileContentMap);\n        // Virtual project updated\n      }\n      // „Ç¢„ÇØ„Çª„Çπ„ÅßTTL„ÇíÂª∂Èï∑\n      cached.createdAt = Date.now();\n      // Reusing existing virtual project\n      return { project: cached.project, isNewlyCreated: false };\n    }\n\n    // „Åì„Åì„Åæ„ÅßÊù•„Åü„ÇâÊñ∞Ë¶è‰ΩúÊàê\n    \n    // Create new virtual project only if no cache exists\n    // Creating virtual project for snapshot analysis\n    \n    const config = VirtualProjectFactory.getRecommendedConfig('call-graph');\n    const { project } = await VirtualProjectFactory.createFromContent(\n      fileContentMap,\n      config\n    );\n    \n    // Cache the project\n    this.projectCache.set(snapshotId, {\n      project,\n      fileContentMap: new Map(fileContentMap), // Create copy to avoid reference issues\n      createdAt: Date.now(),\n      snapshotId\n    });\n    \n    // Virtual project created and cached\n    \n    // Clean up old cache entries\n    this.cleanupExpiredProjects();\n    \n    return { project, isNewlyCreated: true };\n  }",
        "sourceFileRefId": "45fa55bd-e72e-4eff-a398-bfa354fd7290",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "fileContentMap",
            "type": "Map<string, string>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 36,
          "totalLines": 63,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 5,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 4,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 17,
          "codeToCommentRatio": 2.12,
          "halsteadVolume": 720.46,
          "halsteadDifficulty": 6.36,
          "maintainabilityIndex": 36.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "medium",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c6ead10b-a43e-5638-ac5e-01772433e35c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1a6ffed4448e859a3f00a88128680a887f8a762e08ec517171c6ffbdc14370e6",
        "contentId": "352e9ad7f0f0cc0976c14077a210e611cd652b41200c6a121eeea846eb67dfb2",
        "name": "simpleStem",
        "displayName": "simpleStem",
        "signature": "simpleStem(word: string): string",
        "signatureHash": "a8cb841bb8f45c5bd070319b34db31513cd9ff43742a2dac27a1dbd3b7f9a7c9",
        "filePath": "/src/services/local-similarity-service.ts",
        "fileHash": "4408dd85ea4a7654b2a23e51c3b5a98f",
        "startLine": 48,
        "endLine": 73,
        "startColumn": 0,
        "endColumn": 556,
        "astHash": "1c17e264c1aaae00",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Simple stemming implementation for English text\n */\nfunction simpleStem(word: string): string {\n  // Basic Porter stemmer-like rules\n  const stemRules = [\n    [/ies$/, 'y'],\n    [/ied$/, 'y'],\n    [/s$/, ''],\n    [/ing$/, ''],\n    [/ly$/, ''],\n    [/ed$/, ''],\n    [/er$/, ''],\n    [/est$/, ''],\n    [/tion$/, 'te'],\n    [/ness$/, ''],\n    [/ment$/, ''],\n  ] as const;\n\n  const lowerWord = word.toLowerCase();\n\n  for (const [pattern, replacement] of stemRules) {\n    if (pattern.test(lowerWord) && lowerWord.length > 3) {\n      return lowerWord.replace(pattern, replacement);\n    }\n  }\n\n  return lowerWord;\n}",
        "sourceFileRefId": "cf78aff8-46ae-4755-963f-1c96050974e0",
        "parameters": [
          {
            "name": "word",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 22,
          "totalLines": 31,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 5.5,
          "halsteadVolume": 277.44,
          "halsteadDifficulty": 3.17,
          "maintainabilityIndex": 55.63
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "medium",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4a06bc1b-7e34-5f48-95fc-314b0980a63e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c79ac2ca2c409bedb842b2fe64d6cea5c424a23526b3c04b2460c2afba1af7b9",
        "contentId": "f555e83a2c146fbc8ec89d9a26233b2a460324a67901fc1812e395526182c342",
        "name": "processFiles",
        "displayName": "processFiles",
        "signature": "async processFiles(input: WorkerInput): Promise<WorkerOutput>",
        "signatureHash": "6d69e5d7c719dc971d6c55b77ffdbd1ba86fe76e2443ac550f10611e421a25da",
        "filePath": "/src/workers/analysis-worker.ts",
        "fileHash": "97344dfa9df4a8742e81a4ced2a3ea95",
        "startLine": 91,
        "endLine": 119,
        "startColumn": 0,
        "endColumn": 924,
        "astHash": "60e733895ac2c2fe",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async"
        ],
        "nestingLevel": 0,
        "isExported": false,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async function processFiles(input: WorkerInput): Promise<WorkerOutput> {\n  const startTime = Date.now();\n\n  try {\n    const analyzer = new TypeScriptAnalyzer(input.maxSourceFilesInMemory);\n    const qualityCalculator = new QualityCalculator();\n    const allFunctions: FunctionInfo[] = [];\n    let failedFiles = 0;\n\n    for (const filePath of input.filePaths) {\n      const result = await processFile(filePath, analyzer, qualityCalculator);\n      \n      if (result.failed) {\n        failedFiles++;\n      } else {\n        allFunctions.push(...result.functions);\n      }\n    }\n\n    // Clean up analyzer resources\n    await analyzer.cleanup();\n\n    const processingTime = Date.now() - startTime;\n    return createSuccessResponse(allFunctions, input.filePaths.length, failedFiles, processingTime);\n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n    return createErrorResponse(error, processingTime);\n  }\n}",
        "sourceFileRefId": "a287a027-457e-47bb-bfd4-03b39b0f7c63",
        "parameters": [
          {
            "name": "input",
            "type": "WorkerInput",
            "typeSimple": "WorkerInput",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 23,
          "totalLines": 31,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 3,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 23,
          "halsteadVolume": 437.59,
          "halsteadDifficulty": 3.76,
          "maintainabilityIndex": 51.18
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "medium",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "61bd2186-ab0c-5e40-82c8-2023d3baa3a8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c557303fae03ac772f667173fec1c3728653f63307188f86c9f72ef210131324",
        "contentId": "f0211d3b3e2f3032a7ea3438eb47a0af9ff44f13c443165cd6e901b0b627d221",
        "name": "formatFileSize",
        "displayName": "formatFileSize",
        "signature": "formatFileSize(bytes: number): string",
        "signatureHash": "dd1e486bd67bf674131de5ab4a0444ae8d6997da756896eaeb8094c9b4254a33",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 4,
        "endLine": 15,
        "startColumn": 0,
        "endColumn": 310,
        "astHash": "53b1ac34c7d63f7f",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format file size in human-readable format\n */\nexport function formatFileSize(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB'];\n  let unitIndex = 0;\n  let size = bytes;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(unitIndex === 0 ? 0 : 1)} ${units[unitIndex]}`;\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "bytes",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 15,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 185.75,
          "halsteadDifficulty": 9.67,
          "maintainabilityIndex": 77.07
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "239a4b29-2158-5ea7-93fa-10521ccaaaac",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "23c38c0e20c7be941065ae99dff7f5f244d8bc31ae4050c6864b206139d630a3",
        "contentId": "aeb10950551e14f15b9d3831ace772df7c939968385450625bd0dfa5f7dea548",
        "name": "constructor",
        "displayName": "BaseAnalysisStage.constructor",
        "signature": "public BaseAnalysisStage(logger?: Logger, debugEnvVar?: string)",
        "signatureHash": "c93cdb4f9ea4e3169500b1cc510159c1dbbc09ece687f2e60ddc1a8fb542abfa",
        "filePath": "/src/analyzers/shared/base-analysis-stage.ts",
        "fileHash": "bc5897f9fcf03723ddd2b55d007a4ed2",
        "startLine": 10,
        "endLine": 13,
        "startColumn": 2,
        "endColumn": 179,
        "astHash": "9767db4a84d304e7",
        "contextPath": [
          "BaseAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(logger?: Logger, debugEnvVar?: string) {\n    this.logger = logger ?? new Logger(false);\n    this.debug = process.env[debugEnvVar ?? 'DEBUG_ANALYSIS'] === 'true';\n  }",
        "sourceFileRefId": "b602ac54-fb2e-4725-aecf-5329264f8647",
        "parameters": [
          {
            "name": "logger",
            "type": "Logger",
            "typeSimple": "Logger",
            "position": 0,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "debugEnvVar",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 77.71,
          "halsteadDifficulty": 3.75,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "36236f38-9594-501e-9493-201fd791990c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "404a64d3c8523ca0fb4c8f52ec70061fc858d26e857d3a72288b1cb44a05edfa",
        "contentId": "8e2ce34b52d47d6bb0b83eead81e3164a86cfa932a1f08cad1e134d3c6cceb7f",
        "name": "constructor",
        "displayName": "BaseStorageOperations.constructor",
        "signature": "public BaseStorageOperations(context: StorageContext)",
        "signatureHash": "dd39b4c0ef3941b14de298a03de1255aae7f2a59d05e4c802ae7bd4c9e210a7e",
        "filePath": "/src/storage/shared/base-storage-operations.ts",
        "fileHash": "dab1063ef344e597ddd6edb1825c05bc",
        "startLine": 11,
        "endLine": 15,
        "startColumn": 2,
        "endColumn": 132,
        "astHash": "5db832bdae679a70",
        "contextPath": [
          "BaseStorageOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(context: StorageContext) {\n    this.context = context;\n    this.db = context.db;\n    this.logger = context.logger;\n  }",
        "sourceFileRefId": "d74ef395-2ba8-481d-b0bf-d2fa7a92c244",
        "parameters": [
          {
            "name": "context",
            "type": "StorageContext",
            "typeSimple": "StorageContext",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 46.53,
          "halsteadDifficulty": 2.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c9495597-75c1-5907-852f-aee1ad136a91",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4ff1752d5929e07a5cc736a82d208e3989c8ae4449c3c295d3a15f671d99b5db",
        "contentId": "800d02027a4aa0da3645e92c6416d71d94c054f47772bd440e70c761dcd9add6",
        "name": "safeJsonParse",
        "displayName": "safeJsonParse",
        "signature": "safeJsonParse(value: unknown, fallbackValue: T): T",
        "signatureHash": "e1fa5d1dd1323002d95c7244a8d2867789a87e040d250c77b92a824a2b5ef37d",
        "filePath": "/src/utils/json-helpers.ts",
        "fileHash": "d18d56568ae7905062e85773994c777d",
        "startLine": 13,
        "endLine": 32,
        "startColumn": 0,
        "endColumn": 573,
        "astHash": "07233d5d9d72a9e0",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * JSON Helper utilities for safe parsing of database JSONB fields\n */\n\n/**\n * Safely parses a value that might be a JSON string or already an object.\n * Handles the case where PGLite automatically parses JSONB fields.\n * \n * @param value The value to parse (might be string or already parsed object)\n * @param fallbackValue The value to return if parsing fails\n * @returns The parsed object, original object if not a string, or fallback value\n */\nexport function safeJsonParse<T>(value: unknown, fallbackValue: T): T {\n  // 1. If the value is not a string, it's likely already parsed by PGLite\n  if (typeof value !== 'string') {\n    return (value as T) ?? fallbackValue;\n  }\n\n  // 2. If it's an empty string, return the fallback\n  if (value === '') {\n    return fallbackValue;\n  }\n\n  // 3. If it is a string, try to parse it\n  try {\n    return JSON.parse(value) as T;\n  } catch {\n    // 4. Silently return fallback to avoid console spam\n    // The original error was logged too frequently\n    return fallbackValue;\n  }\n}",
        "sourceFileRefId": "3b2c891e-cd89-4673-8b29-371c350b5515",
        "parameters": [
          {
            "name": "value",
            "type": "unknown",
            "typeSimple": "unknown",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "fallbackValue",
            "type": "T",
            "typeSimple": "T",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 32,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 4,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 16,
          "codeToCommentRatio": 0.81,
          "halsteadVolume": 95.18,
          "halsteadDifficulty": 5.56,
          "maintainabilityIndex": 75.73
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "15bad653-4afb-5f7a-b1cc-789881f020c8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f07326e408dd877f78096676e98e34191b339efd50e8fe23b1042f081c010eb6",
        "contentId": "bab1f93263ed75d21586eb7abd072fc4adcf2c4b0084d98c409e3d7ef56b1496",
        "name": "constructor",
        "displayName": "CHAAnalysisStage.constructor",
        "signature": "public CHAAnalysisStage(chaAnalyzer: CHAAnalyzer, logger?: Logger)",
        "signatureHash": "e8b561272d634469f4022c3fcdf8c675723ba43b64e33e3c0cf395f61d1e8749",
        "filePath": "/src/analyzers/staged-analysis/stages/cha-analysis.ts",
        "fileHash": "b562e39ff8a930fa0222614af4559af1",
        "startLine": 17,
        "endLine": 21,
        "startColumn": 2,
        "endColumn": 216,
        "astHash": "c4071d635b7eb08b",
        "contextPath": [
          "CHAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(chaAnalyzer: CHAAnalyzer, logger?: Logger) {\r\n    this.chaAnalyzer = chaAnalyzer;\r\n    this.logger = logger ?? new Logger(false);\r\n    this._debug = process.env['DEBUG_STAGED_ANALYSIS'] === 'true';\r\n  }",
        "sourceFileRefId": "084c83f8-b58c-4b04-9cf1-de4c67158b50",
        "parameters": [
          {
            "name": "chaAnalyzer",
            "type": "CHAAnalyzer",
            "typeSimple": "CHAAnalyzer",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "logger",
            "type": "Logger",
            "typeSimple": "Logger",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 91.38,
          "halsteadDifficulty": 3.89,
          "maintainabilityIndex": 99.05
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0269a79c-bfbd-578b-9931-728c2e0c6937",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ac2fe9bf6009569c30e08f27204d14971977205653ed812db9868643208acd1e",
        "contentId": "cf26c93e098bc7a0b6a67d40ebbbe322ecf9364eab3089164987a3e2a8d291e4",
        "name": "calculateProjectStatistics",
        "displayName": "StatisticalEvaluator.calculateProjectStatistics",
        "signature": "public StatisticalEvaluator.calculateProjectStatistics(functionMetrics: QualityMetrics[]): ProjectStatistics",
        "signatureHash": "d74ccbf3441b5f19f36045c2146e4297b70b48336126bbb6bb1bb89bf0c3d5e9",
        "filePath": "/src/utils/statistical-evaluator.ts",
        "fileHash": "549ef6b986550669bc74d8507dda7866",
        "startLine": 18,
        "endLine": 82,
        "startColumn": 2,
        "endColumn": 2191,
        "astHash": "9d72fd32337a801c",
        "contextPath": [
          "StatisticalEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate comprehensive statistics for all quality metrics across functions\n   */\n  calculateProjectStatistics(functionMetrics: QualityMetrics[]): ProjectStatistics {\n    if (functionMetrics.length === 0) {\n      throw new Error('Cannot calculate statistics for empty function set');\n    }\n\n    const metricKeys = [\n      'linesOfCode',\n      'totalLines',\n      'cyclomaticComplexity',\n      'cognitiveComplexity',\n      'maxNestingLevel',\n      'parameterCount',\n      'returnStatementCount',\n      'branchCount',\n      'loopCount',\n      'tryCatchCount',\n      'asyncAwaitCount',\n      'callbackCount',\n      'commentLines',\n      'codeToCommentRatio',\n      'halsteadVolume',\n      'halsteadDifficulty',\n      'maintainabilityIndex',\n    ] as const;\n\n    const statistics: Record<keyof QualityMetrics, MetricStatistics> = {} as Record<\n      keyof QualityMetrics,\n      MetricStatistics\n    >;\n\n    for (const key of metricKeys) {\n      const values = functionMetrics\n        .map(m => m[key])\n        .filter((v): v is number => v !== undefined && v !== null && !isNaN(v));\n\n      if (values.length > 0) {\n        // Pass unsorted values - sorting will be done once in calculateMetricStatistics\n        statistics[key] = this.calculateMetricStatistics(values);\n      }\n    }\n\n    // Calculate derived metrics\n    const complexities = functionMetrics.map(m => m.cyclomaticComplexity);\n    const sizes = functionMetrics.map(m => m.linesOfCode);\n    \n    const averageComplexity = complexities.length > 0 \n      ? complexities.reduce((sum, c) => sum + c, 0) / complexities.length\n      : 0;\n    const averageSize = sizes.length > 0\n      ? sizes.reduce((sum, s) => sum + s, 0) / sizes.length\n      : 0;\n\n    return {\n      metrics: statistics,\n      totalFunctions: functionMetrics.length,\n      analysisTimestamp: Date.now(),\n      averageComplexity,\n      averageSize,\n      medianComplexity: statistics.cyclomaticComplexity?.median ?? 0,\n      p90Complexity: statistics.cyclomaticComplexity?.p90 ?? 0,\n      complexityDistribution: statistics.cyclomaticComplexity ?? this.createEmptyMetricStatistics(),\n      sizeDistribution: statistics.linesOfCode ?? this.createEmptyMetricStatistics(),\n      riskDistribution: { low: 0, medium: 0, high: 0, critical: 0 },\n    };\n  }",
        "sourceFileRefId": "e938a961-f1c2-4ca7-8975-3189b0847384",
        "parameters": [
          {
            "name": "functionMetrics",
            "type": "QualityMetrics[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 56,
          "totalLines": 69,
          "cyclomaticComplexity": 12,
          "cognitiveComplexity": 12,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 4,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 6,
          "commentLines": 5,
          "codeToCommentRatio": 11.2,
          "halsteadVolume": 1298.11,
          "halsteadDifficulty": 11.84,
          "maintainabilityIndex": 20.38
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "576f245f-bab6-5cdd-be68-71c22dfe7852",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a76fc875c8a180e19adb5ed1f2f0700c1f9dfb715a1058551c1bf1745ed2dd47",
        "contentId": "be3cc09c6f92023dd4246a4ed1e1e046e9855d6ca9b0a2dea8c590a61c3ce1c3",
        "name": "register",
        "displayName": "ClearCoordinator.register",
        "signature": "public ClearCoordinator.register(handler: ClearHandler): void",
        "signatureHash": "3be5ac6220ed07a340ea1e4786fb9f0a7f6fac2c1a08ee2908e4f6c4cf40631b",
        "filePath": "/src/utils/clear-coordinator.ts",
        "fileHash": "5f2bb83eaae3419dad1653dc0eff694e",
        "startLine": 19,
        "endLine": 22,
        "startColumn": 2,
        "endColumn": 120,
        "astHash": "aa9409b4c967d949",
        "contextPath": [
          "ClearCoordinator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Register a clear handler with optional dependencies\n   */\n  register(handler: ClearHandler): void {\n    this.handlers.set(handler.name, handler);\n    this.recalculateOrder();\n  }",
        "sourceFileRefId": "4f071925-8b13-4538-a189-e09a481c659e",
        "parameters": [
          {
            "name": "handler",
            "type": "ClearHandler",
            "typeSimple": "ClearHandler",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 58.81,
          "halsteadDifficulty": 1.22,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e666bdd0-c3bc-5eff-a148-1efb513ad8ef",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b8f31cd54c023ec37ccfb0ca109ad6ca4db1dbd2daf2dbfc542d82925b561d3a",
        "contentId": "921fdb3f9bd212b8a367c07585bac8f34f1211cbac283e0446113098678198ff",
        "name": "formatDuration",
        "displayName": "formatDuration",
        "signature": "formatDuration(milliseconds: number): string",
        "signatureHash": "9b5ff9fe8c2431c73d13cec2dbcb6b7d7f495c1b0bb2f3ff4453f989314333df",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 20,
        "endLine": 37,
        "startColumn": 0,
        "endColumn": 392,
        "astHash": "de17d3cb0590f803",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format duration in human-readable format\n */\nexport function formatDuration(milliseconds: number): string {\n  if (milliseconds < 1000) {\n    return `${milliseconds}ms`;\n  }\n\n  const seconds = milliseconds / 1000;\n  if (seconds < 60) {\n    return `${seconds.toFixed(1)}s`;\n  }\n\n  const minutes = seconds / 60;\n  if (minutes < 60) {\n    return `${minutes.toFixed(1)}m`;\n  }\n\n  const hours = minutes / 60;\n  return `${hours.toFixed(1)}h`;\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "milliseconds",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 23,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 4,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5,
          "halsteadVolume": 168,
          "halsteadDifficulty": 5,
          "maintainabilityIndex": 68.35
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "342768d3-ef7f-5727-88be-6f275cd21387",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a3ca68c8c111be320bbfec463f584424786f857dcba79ed803711e9484601799",
        "contentId": "8d28b9099ed689dcd12298050276a753851d3a2a82e441f85520b569dacd24a9",
        "name": "arePathsEqual",
        "displayName": "arePathsEqual",
        "signature": "arePathsEqual(path1: string, path2: string): boolean",
        "signatureHash": "26f6a8d2c6f1110094ad74ef9b4eba1357427ca19ecaf37fa058c8df742ee32a",
        "filePath": "/src/utils/path-normalizer.ts",
        "fileHash": "975eea5c410cc169bec3e87c9a751799",
        "startLine": 20,
        "endLine": 22,
        "startColumn": 0,
        "endColumn": 128,
        "astHash": "388ca83411c53398",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Compare two file paths for equality with normalization\n * \n * @param path1 - First file path\n * @param path2 - Second file path  \n * @returns True if paths refer to the same file\n */\nexport function arePathsEqual(path1: string, path2: string): boolean {\n  return normalizePath(path1) === normalizePath(path2);\n}",
        "sourceFileRefId": "ced90366-763a-4a2a-b5b2-bf058438193c",
        "parameters": [
          {
            "name": "path1",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "path2",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 0.43,
          "halsteadVolume": 31.02,
          "halsteadDifficulty": 2.25,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7389eb10-2960-50e7-a9f2-05fea81b4e9b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bc4948f91ae68d9c48e836d551c4783b6374c35ebb32a5c66b69939b11d695a5",
        "contentId": "affeb949b773144a3b580d6d6a6b0e499ee76a36c9f54fdd4741c899c1b3d918",
        "name": "ensureDir",
        "displayName": "ensureDir",
        "signature": "async ensureDir(dirPath: string): Promise<void>",
        "signatureHash": "b9601b110c23d7701520b5fa7c7baac4b34e291bbaf7c07fbe9b59735fb84036",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 22,
        "endLine": 37,
        "startColumn": 0,
        "endColumn": 516,
        "astHash": "41e70e03d2bcc16e",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Ensure a directory exists, creating it if necessary\n */\nexport async function ensureDir(dirPath: string): Promise<void> {\n  try {\n    await fs.mkdir(dirPath, { recursive: true });\n  } catch (error) {\n    // Directory might already exist - recursive: true should handle this\n    // Only throw if it's not an EEXIST error or filesystem permission issue\n    if (error && typeof error === 'object' && 'code' in error) {\n      const code = (error as { code: string }).code;\n      if (code !== 'EEXIST') {\n        throw error;\n      }\n    } else {\n      throw error;\n    }\n  }\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "dirPath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 21,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 3,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 2.8,
          "halsteadVolume": 125.1,
          "halsteadDifficulty": 5.5,
          "maintainabilityIndex": 71.71
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "314f14a3-a3cf-5cd6-8e16-3ea502649bed",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "44be99305af84a58a794d2e91a81826234a8b675ca9fc85e7b80d7c4a4771ea9",
        "contentId": "6d8c9ec6acd020ad1d542da170b02a354136313f3e45f758aa136ba164307126",
        "name": "constructor",
        "displayName": "FrameworkCallbackAnalyzer.constructor",
        "signature": "public FrameworkCallbackAnalyzer(frameworkName: string, logger?: Logger)",
        "signatureHash": "c738264cf8635168eeeab16a4e74b080c033471f13431102d12c86e65e2cd370",
        "filePath": "/src/analyzers/callback-registration/framework-analyzer.ts",
        "fileHash": "c96054d31e926094f3823133e8addb2b",
        "startLine": 22,
        "endLine": 27,
        "startColumn": 2,
        "endColumn": 307,
        "astHash": "f60336e83380ee55",
        "contextPath": [
          "FrameworkCallbackAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(frameworkName: string, logger?: Logger) {\n    this.frameworkName = frameworkName;\n    this.logger = logger ?? new Logger(false);\n    this.debug = process.env['DEBUG_CALLBACK_ANALYSIS'] === 'true' || \n                 process.env[`DEBUG_${frameworkName.toUpperCase()}_ANALYSIS`] === 'true';\n  }",
        "sourceFileRefId": "4188e027-93b3-4822-9fd6-c1ab143cf7b4",
        "parameters": [
          {
            "name": "frameworkName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "logger",
            "type": "Logger",
            "typeSimple": "Logger",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 8,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 143.06,
          "halsteadDifficulty": 6.65,
          "maintainabilityIndex": 91.2
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a3d70f76-73c7-593d-aa07-349a2a2cf52f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "adb72e64dd3ff74fa98a017ebe28a2dcd01ffb7313b59c6a19eb35cee7de5151",
        "contentId": "9a4b9632e663f469208a101d35798b2208c9ad37511a166b3833d9c9cc2bbbca",
        "name": "analyzeFileForInternalCalls",
        "displayName": "InternalCallAnalyzer.analyzeFileForInternalCalls",
        "signature": "public async InternalCallAnalyzer.analyzeFileForInternalCalls(filePath: string, functions: FunctionInfo[], snapshotId: string): Promise<InternalCallEdge[]>",
        "signatureHash": "126d86a676f8f504c0e41c1e0b949d0cc5f7385181e267ed032de7a94893508d",
        "filePath": "/src/analyzers/internal-call-analyzer.ts",
        "fileHash": "1561872e102999bc5e7148c017640fff",
        "startLine": 22,
        "endLine": 87,
        "startColumn": 2,
        "endColumn": 2599,
        "astHash": "bfcbcd2ecbccb9c1",
        "contextPath": [
          "InternalCallAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze a file to detect all intra-file function calls\n   * Returns internal call edges for storage in the database\n   */\n  async analyzeFileForInternalCalls(\n    filePath: string,\n    functions: FunctionInfo[],\n    snapshotId: string\n  ): Promise<InternalCallEdge[]> {\n    try {\n      // Use existing source file or add if not already loaded\n      let sourceFile = this.project.getSourceFile(filePath);\n      if (!sourceFile) {\n        sourceFile = this.project.addSourceFileAtPath(filePath);\n      }\n      \n      // Initialize line number cache\n      sourceFile.getFullText();\n      const internalCallEdges: InternalCallEdge[] = [];\n\n      // Create lookup maps using qualified names for accurate resolution\n      const functionsByQualifiedName = new Map<string, FunctionInfo[]>();\n\n      for (const func of functions) {\n        // Create qualified name considering context path\n        const qualifiedName = this.createQualifiedName(func);\n        const simpleName = func.name;\n        \n        // Map both qualified and simple names for flexible lookup\n        [qualifiedName, simpleName].forEach(name => {\n          if (!functionsByQualifiedName.has(name)) {\n            functionsByQualifiedName.set(name, []);\n          }\n          functionsByQualifiedName.get(name)!.push(func);\n        });\n      }\n\n      // Precompute function-like nodes and an index (one pass per file)\n      const fnDecls = sourceFile.getDescendantsOfKind(SyntaxKind.FunctionDeclaration);\n      const methodDecls = sourceFile.getDescendantsOfKind(SyntaxKind.MethodDeclaration);\n      const arrowFns = sourceFile.getDescendantsOfKind(SyntaxKind.ArrowFunction);\n      const fnExprs = sourceFile.getDescendantsOfKind(SyntaxKind.FunctionExpression);\n      const functionNodes = [...fnDecls, ...methodDecls, ...arrowFns, ...fnExprs];\n      const functionIndex = new Map<string, Node>();\n      for (const n of functionNodes) {\n        functionIndex.set(`${n.getStartLineNumber()}:${n.getEndLineNumber()}`, n);\n      }\n\n      // Analyze each function for calls to other functions in the same file\n      for (const callerFunction of functions) {\n        const callEdges = await this.findInternalCallsInFunction(\n          sourceFile,\n          callerFunction,\n          functionsByQualifiedName,\n          snapshotId,\n          filePath,\n          functionNodes,\n          functionIndex\n        );\n        internalCallEdges.push(...callEdges);\n      }\n\n      return internalCallEdges;\n    } catch (error) {\n      this.logger.warn(`Internal call analysis failed for ${filePath}: ${error instanceof Error ? error.message : String(error)}`);\n      return [];\n    } finally {\n      // No cleanup needed - project is shared and managed externally\n    }\n  }",
        "sourceFileRefId": "67b71908-fcaf-4b71-bb03-7828aa0e69d0",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 51,
          "totalLines": 72,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 3,
          "parameterCount": 3,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 3,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 12,
          "codeToCommentRatio": 4.25,
          "halsteadVolume": 1106.95,
          "halsteadDifficulty": 4.85,
          "maintainabilityIndex": 24.68
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "dd3b8279-0e5f-5a6f-ae68-44e721456d62",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "dcbc82edeb6dfc7faee97dbda6efc29b5312a4e2e8e11029737a7dd5c3b5d42b",
        "contentId": "de7cdd18ca23bec5e979c4b8c423e51f8d2e88591a3c322f1e8ced8603166d0f",
        "name": "primeFunctionsAfterBasic",
        "displayName": "primeFunctionsAfterBasic",
        "signature": "async primeFunctionsAfterBasic(env: CommandEnvironment, snapshotId: string, functions: FunctionInfo[], verbose?: boolean): Promise<void>",
        "signatureHash": "a5afe161e47331186bd8e97359955936cf2ae137aecc2206070f93942571bdaa",
        "filePath": "/src/core/env-facade.ts",
        "fileHash": "0787c220436a89c0f7b626fced731121",
        "startLine": 25,
        "endLine": 37,
        "startColumn": 0,
        "endColumn": 482,
        "astHash": "c0ef39407d0e43f2",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Prime env with functions after BASIC analysis to avoid reloading from DB in the same process.\n */\nexport async function primeFunctionsAfterBasic(\n  env: CommandEnvironment,\n  snapshotId: string,\n  functions: FunctionInfo[],\n  verbose?: boolean\n): Promise<void> {\n  const snapshot = await env.storage.getSnapshot(snapshotId);\n  if (!snapshot) return;\n  env.callGraphData = buildCallGraphData(env.callGraphData, { snapshot, functions });\n  if (verbose) {\n    env.commandLogger.info(`‚ö° Primed env with ${functions.length} functions for snapshot ${snapshotId.substring(0, 8)}`);\n  }\n}",
        "sourceFileRefId": "fb832728-4595-4e5b-90c1-58a2768eda95",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 2,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "verbose",
            "type": "boolean",
            "typeSimple": "boolean",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 18,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 4,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4.33,
          "halsteadVolume": 230.32,
          "halsteadDifficulty": 3.18,
          "maintainabilityIndex": 69.56
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "dd62bac1-70e7-5351-9389-c7b7cfc979a8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f672912a768327e1ee6789bba171482bb718ec37ecba0ecb7da1c88bc7b90480",
        "contentId": "2a149bb7acb23ab9d98f2dd1560b538e2eb419f56e3901c3b9dcaeddfacdfab9",
        "name": "createFunctionLookupMap",
        "displayName": "createFunctionLookupMap",
        "signature": "createFunctionLookupMap(functions: FunctionInfo[]): Map<string, string>",
        "signatureHash": "23c8b2ed81799987fb9da175f26230113595862a252dfc225990d5830dce8939",
        "filePath": "/src/utils/function-mapping-utils.ts",
        "fileHash": "aea725e5b0200c766590f3238262928b",
        "startLine": 26,
        "endLine": 39,
        "startColumn": 0,
        "endColumn": 537,
        "astHash": "6b7e43ca3498e9a6",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Create function lookup map from FunctionInfo array\n * Uses composite key to ensure reliable mapping between analyzers\n */\nexport function createFunctionLookupMap(functions: FunctionInfo[]): Map<string, string> {\n  const functionLookupMap = new Map<string, string>();\n  \n  for (const func of functions) {\n    // Use composite key: filePath:startLine:name for reliable mapping\n    const compositeKey = generateFunctionCompositeKey(func.filePath, func.startLine, func.name);\n    functionLookupMap.set(compositeKey, func.id);\n    \n    // Also keep the direct ID mapping as fallback\n    functionLookupMap.set(func.id, func.id);\n  }\n  \n  return functionLookupMap;\n}",
        "sourceFileRefId": "e46ad598-9ca0-4987-bf52-1d214d772d23",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 20,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.5,
          "halsteadVolume": 168,
          "halsteadDifficulty": 2.21,
          "maintainabilityIndex": 80.75
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "58339e46-ab1c-5723-8c29-c142058312e2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bd7e0116d59b0f44677d06913dc22e106baebd2cb69e62effb656a4b0356bc4a",
        "contentId": "83d154e618dcd389b5d5b94ad25c572ba3a242dd120077dce0ca5617f5f2f278",
        "name": "performCHAAnalysis",
        "displayName": "CHAAnalysisStage.performCHAAnalysis",
        "signature": "public async CHAAnalysisStage.performCHAAnalysis(functions: Map<string, FunctionMetadata>, unresolvedMethodCalls: UnresolvedMethodCall[], state: AnalysisState, snapshotId?: string): Promise<{\r\n    resolvedEdges: number;\r\n    chaCandidates: Map<string, MethodInfo[]>;\r\n    unresolvedMethodCallsForRTA: UnresolvedMethodCall[];\r\n  }>",
        "signatureHash": "f4f63107d429221655d5ad2fb2f398f353b5f96722d2c08571700a05da68c5f0",
        "filePath": "/src/analyzers/staged-analysis/stages/cha-analysis.ts",
        "fileHash": "b562e39ff8a930fa0222614af4559af1",
        "startLine": 26,
        "endLine": 83,
        "startColumn": 2,
        "endColumn": 1984,
        "astHash": "7d87ceb6b14ce6fe",
        "contextPath": [
          "CHAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Perform CHA analysis on unresolved method calls\r\n   */\r\n  async performCHAAnalysis(\r\n    functions: Map<string, FunctionMetadata>,\r\n    unresolvedMethodCalls: UnresolvedMethodCall[],\r\n    state: AnalysisState,\r\n    snapshotId?: string\r\n  ): Promise<{\r\n    resolvedEdges: number;\r\n    chaCandidates: Map<string, MethodInfo[]>;\r\n    unresolvedMethodCallsForRTA: UnresolvedMethodCall[];\r\n  }> {\r\n    this.logger.debug(`CHA received ${unresolvedMethodCalls.length} unresolved method calls`);\r\n    \r\n    if (unresolvedMethodCalls.length === 0) {\r\n      this.logger.debug('No unresolved method calls for CHA analysis');\r\n      return {\r\n        resolvedEdges: 0,\r\n        chaCandidates: new Map(),\r\n        unresolvedMethodCallsForRTA: []\r\n      };\r\n    }\r\n\r\n    if (this._debug) {\r\n      for (const call of unresolvedMethodCalls.slice(0, 5)) { // Log first 5 calls\r\n        this.logger.debug(`üêõ Unresolved call: ${call.methodName} on ${call.receiverType || 'unknown'} from ${call.callerFunctionId}`);\r\n      }\r\n    }\r\n\r\n    try {\r\n      // Copy unresolved method calls for RTA analysis before CHA processes them\r\n      const unresolvedMethodCallsForRTA = [...unresolvedMethodCalls];\r\n      \r\n      // Perform CHA analysis\r\n      const chaEdges = await this.chaAnalyzer.performCHAAnalysis(functions, unresolvedMethodCalls, snapshotId);\r\n      \r\n      // Add CHA edges to our collection\r\n      for (const edge of chaEdges) {\r\n        addEdge(edge, state);\r\n      }\r\n      \r\n      // Collect CHA candidates for RTA analysis\r\n      const chaCandidates = this.collectCHACandidatesForRTA();\r\n      \r\n      this.logger.debug(`CHA resolved ${chaEdges.length} method calls`);\r\n      \r\n      return {\r\n        resolvedEdges: chaEdges.length,\r\n        chaCandidates,\r\n        unresolvedMethodCallsForRTA\r\n      };\r\n    } catch (error) {\r\n      this.logger.debug(`CHA analysis failed: ${error}`);\r\n      return {\r\n        resolvedEdges: 0,\r\n        chaCandidates: new Map(),\r\n        unresolvedMethodCallsForRTA: unresolvedMethodCalls\r\n      };\r\n    }\r\n  }",
        "sourceFileRefId": "084c83f8-b58c-4b04-9cf1-de4c67158b50",
        "parameters": [
          {
            "name": "functions",
            "type": "Map<string, FunctionMetadata>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "unresolvedMethodCalls",
            "type": "UnresolvedMethodCall[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "state",
            "type": "AnalysisState",
            "typeSimple": "AnalysisState",
            "position": 2,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 46,
          "totalLines": 63,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 2,
          "parameterCount": 4,
          "returnStatementCount": 3,
          "branchCount": 2,
          "loopCount": 2,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 6.57,
          "halsteadVolume": 653.62,
          "halsteadDifficulty": 4.81,
          "maintainabilityIndex": 31.28
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "557b6222-3a1f-5fc0-aaf2-177e48552252",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "36615fbfae4e1e21da55d9a9800c14708ebe1d5608f52940579210fdf1a3412b",
        "contentId": "b799914ab9ab8a43ed908f69d3f37fa8f451992296cb74d46fc74cb906d4d7d6",
        "name": "hasTestTrackingProperty",
        "displayName": "hasTestTrackingProperty",
        "signature": "hasTestTrackingProperty(obj: unknown, property: string): obj is Record<string, unknown>",
        "signatureHash": "622b9712a2cbfbd76b612f30bf4bd1fb4a8a930c679c4807152b3e77e027f989",
        "filePath": "/src/storage/errors/database-error.ts",
        "fileHash": "9e74700eec245e1179e935062abcdeb7",
        "startLine": 26,
        "endLine": 30,
        "startColumn": 0,
        "endColumn": 200,
        "astHash": "06db8641fc1fc027",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n * Type guard to check if an object has a specific test tracking property\r\n */\r\nexport function hasTestTrackingProperty(obj: unknown, property: string): obj is Record<string, unknown> {\r\n  return obj !== null && \r\n         typeof obj === 'object' && \r\n         property in obj;\r\n}",
        "sourceFileRefId": "151a8edf-f928-470c-87eb-60476c7b82a0",
        "parameters": [
          {
            "name": "obj",
            "type": "unknown",
            "typeSimple": "unknown",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "property",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 47.55,
          "halsteadDifficulty": 4,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "70ff24ec-7c1e-521b-a796-ca3a807053f2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "960269d1d8e3be19c2c68145c2e9fa764ea8543c00a8eb8a7287ce39499273e0",
        "contentId": "f01f5f345c5ce0c691d7bf9f709356b4ec122ffac6ed1d612ed3bbdff4e3a4a8",
        "name": "unregister",
        "displayName": "ClearCoordinator.unregister",
        "signature": "public ClearCoordinator.unregister(name: string): void",
        "signatureHash": "e8cb776b8e952e074a3ff096bc96852182df98b7ff57f1c0f0b9dcdf9e4856fd",
        "filePath": "/src/utils/clear-coordinator.ts",
        "fileHash": "5f2bb83eaae3419dad1653dc0eff694e",
        "startLine": 27,
        "endLine": 30,
        "startColumn": 2,
        "endColumn": 99,
        "astHash": "8b30d9ee0017876b",
        "contextPath": [
          "ClearCoordinator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Unregister a clear handler\n   */\n  unregister(name: string): void {\n    this.handlers.delete(name);\n    this.recalculateOrder();\n  }",
        "sourceFileRefId": "4f071925-8b13-4538-a189-e09a481c659e",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 41.21,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b98c1291-4209-51be-b7b6-514cccc21278",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e8feb8fcaa9ae3cd466511a030b9991eb8afc3a2001cad854fc88931f111e58c",
        "contentId": "44aad44ca6edc3395ea4c821bad6bb7b4f7b21ebfaba45bb86b37bddfe54dc64",
        "name": "canAnalyze",
        "displayName": "CommanderCallbackAnalyzer.canAnalyze",
        "signature": "public CommanderCallbackAnalyzer.canAnalyze(context: AnalysisContext): boolean",
        "signatureHash": "e883d32bdf1b561a7cee0c4cd0af9e0d6e67572dd1c8512944ae7cdd420b2426",
        "filePath": "/src/analyzers/callback-registration/analyzers/commander-analyzer.ts",
        "fileHash": "d9553eece91fea63735f26389d5ff88e",
        "startLine": 29,
        "endLine": 48,
        "startColumn": 2,
        "endColumn": 894,
        "astHash": "686f3328da04bd7e",
        "contextPath": [
          "CommanderCallbackAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if this analyzer can handle the given source file\n   */\n  override canAnalyze(context: AnalysisContext): boolean {\n    const sourceCode = context.sourceFile.getFullText();\n    \n    // Check for Commander.js imports or usage patterns\n    const hasCommanderImport = sourceCode.includes('from \\'commander\\'') || \n                              sourceCode.includes('require(\\'commander\\')') ||\n                              sourceCode.includes('import { Command }') ||\n                              sourceCode.includes('import { program }');\n    \n    const hasCommanderUsage = sourceCode.includes('.action(') ||\n                             sourceCode.includes('.parseAsync(') ||\n                             sourceCode.includes('.parse(') ||\n                             sourceCode.includes('new Command(');\n\n    const canAnalyze = hasCommanderImport || hasCommanderUsage;\n    \n    // Debug logging disabled for cleaner output\n\n    return canAnalyze;\n  }",
        "sourceFileRefId": "dafab30f-a0a5-412d-9cea-01b870d16598",
        "parameters": [
          {
            "name": "context",
            "type": "AnalysisContext",
            "typeSimple": "AnalysisContext",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 25,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 2.6,
          "halsteadVolume": 321.08,
          "halsteadDifficulty": 3.63,
          "maintainabilityIndex": 65.91
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "bbda331b-4977-5e65-9ed7-7f5f6a04d4ba",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4cbef69569b58ed800c4c14a8b092948f03de3ce57fff07ae1b77c1671313b47",
        "contentId": "31dc537f5606bcb0ffb3d4b575c8f880e862e97bc651c831db37d46d60c15f48",
        "name": "evaluateFunctionThresholds",
        "displayName": "ThresholdEvaluator.evaluateFunctionThresholds",
        "signature": "public ThresholdEvaluator.evaluateFunctionThresholds(metrics: QualityMetrics, thresholds: QualityThresholds, projectStatistics: ProjectStatistics): ThresholdViolation[]",
        "signatureHash": "b597c63c7b99c3d1bfc03ca137e3df634745e375e69c8e9306ebf1e4443ad7bc",
        "filePath": "/src/utils/threshold-evaluator.ts",
        "fileHash": "6d7018b3b2a13b67bcc1a023d0912607",
        "startLine": 30,
        "endLine": 47,
        "startColumn": 2,
        "endColumn": 512,
        "astHash": "48affbdac0405963",
        "contextPath": [
          "ThresholdEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Evaluate all configured thresholds for a function\n   */\n  evaluateFunctionThresholds(\n    metrics: QualityMetrics,\n    thresholds: QualityThresholds,\n    projectStatistics: ProjectStatistics\n  ): ThresholdViolation[] {\n    const violations: ThresholdViolation[] = [];\n    const metricMappings = this.createMetricMappings(metrics, thresholds);\n\n    for (const mapping of metricMappings) {\n      const violation = this.evaluateSingleMetric(mapping, projectStatistics);\n\n      if (violation) {\n        violations.push(violation);\n      }\n    }\n\n    return violations;\n  }",
        "sourceFileRefId": "0b4dfca5-28d2-40b1-90d2-3058fabc8ca5",
        "parameters": [
          {
            "name": "metrics",
            "type": "QualityMetrics",
            "typeSimple": "QualityMetrics",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "thresholds",
            "type": "QualityThresholds",
            "typeSimple": "QualityThresholds",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "projectStatistics",
            "type": "ProjectStatistics",
            "typeSimple": "ProjectStatistics",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 23,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5,
          "halsteadVolume": 146.95,
          "halsteadDifficulty": 1.56,
          "maintainabilityIndex": 69.58
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8ebf1c32-5bf9-56ac-8163-b1e3a2192e8b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9b93c2610b504023d8c9cbd235c16186017ffd245d6727af336795f348a1c990",
        "contentId": "fd0834ea95c34bd12a2c1810181bee5de3de45a2a3c2db08ecc6c4107ea0f2e8",
        "name": "getMetrics",
        "displayName": "MetricsOperations.getMetrics",
        "signature": "public async MetricsOperations.getMetrics(functionId: string): Promise<QualityMetrics | null>",
        "signatureHash": "670521dc4897989235ca67f0ee6b9471c15e88a20146ba7c630f14e2dcf5471d",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 30,
        "endLine": 49,
        "startColumn": 2,
        "endColumn": 619,
        "astHash": "82e47d6eea72c466",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get quality metrics for a function\r\n   */\r\n  async getMetrics(functionId: string): Promise<QualityMetrics | null> {\r\n    try {\r\n      const result = await this.db.query(\r\n        'SELECT * FROM quality_metrics WHERE function_id = $1',\r\n        [functionId]\r\n      );\r\n\r\n      if (result.rows.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      return this.mapRowToMetrics(result.rows[0] as MetricsRow);\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get metrics: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 25,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 6,
          "halsteadVolume": 240.37,
          "halsteadDifficulty": 3.8,
          "maintainabilityIndex": 61.17
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e2d7cae4-0805-5db8-97fd-18c739763471",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8da987b25e6cd9511bfbeffa47df1b64f0cc387354b8e4f775413b4b9c139ff9",
        "contentId": "c41ec6d3f9b00d1d96d1cc35a1ceb486abebecb0c232160143e350205ed35ce9",
        "name": "executeQuery",
        "displayName": "PGliteConnection.executeQuery",
        "signature": "public async PGliteConnection.executeQuery(compiledQuery: CompiledQuery): Promise<QueryResult<R>>",
        "signatureHash": "9ac631b670cc5c2071944f23af40dea5d2d6ecf9ee1929fb3ebc55e2b3f5057b",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 31,
        "endLine": 43,
        "startColumn": 2,
        "endColumn": 387,
        "astHash": "e1cf344abc9ccd30",
        "contextPath": [
          "PGliteConnection"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "public async executeQuery<R>(compiledQuery: CompiledQuery): Promise<QueryResult<R>> {\r\n    const results = await this.#config.database.query(\r\n      compiledQuery.sql,\r\n      [...compiledQuery.parameters],\r\n    );\r\n\r\n    return {\r\n      rows: results.rows as R[],\r\n      ...(results.affectedRows\r\n        ? { numAffectedRows: BigInt(results.affectedRows) }\r\n        : {}),\r\n    };\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [
          {
            "name": "compiledQuery",
            "type": "CompiledQuery",
            "typeSimple": "CompiledQuery",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 150.12,
          "halsteadDifficulty": 1.63,
          "maintainabilityIndex": 74.87
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5ddef92a-d602-5091-8d65-f2615015e9cc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4985877aba0e5fa43fcaa35656e2b720ecebccfcce6af15b4280bbb2ff800877",
        "contentId": "adac3d3130ea49ecbd9cc704fbb70aa78c43a97db25a50f138f26a77963e0cae",
        "name": "filterByPath",
        "displayName": "filterByPath",
        "signature": "filterByPath(functions: T[], targetPath: string): T[]",
        "signatureHash": "7f18072749018dd49c9105a9a047520a688fced6080859b0b696999c1203df01",
        "filePath": "/src/utils/path-normalizer.ts",
        "fileHash": "975eea5c410cc169bec3e87c9a751799",
        "startLine": 31,
        "endLine": 34,
        "startColumn": 0,
        "endColumn": 245,
        "astHash": "c42173f6f9a8a2d7",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Filter functions by file path with normalization\n * \n * @param functions - Array of objects with filePath property\n * @param targetPath - Target file path to match\n * @returns Filtered array of functions matching the target path\n */\nexport function filterByPath<T extends { filePath: string }>(functions: T[], targetPath: string): T[] {\n  const normalizedTarget = normalizePath(targetPath);\n  return functions.filter(func => normalizePath(func.filePath) === normalizedTarget);\n}",
        "sourceFileRefId": "ced90366-763a-4a2a-b5b2-bf058438193c",
        "parameters": [
          {
            "name": "functions",
            "type": "T[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "targetPath",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 7,
          "codeToCommentRatio": 0.57,
          "halsteadVolume": 96.21,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3cff0a3b-4ade-535f-b623-582cf780ab04",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "160034b2c0686eaece87c31a06019ca6df36d7fd8a146be0ccfdca1945c2cce4",
        "contentId": "c13d3709bdca05503da79bd8b7f4fbfedd040a39b992f8f4487875ec67c96bc8",
        "name": "constructor",
        "displayName": "QualityScorerV16.constructor",
        "signature": "public QualityScorerV16(customWeights?: Partial<QualityScoreWeights>, customThresholds?: Partial<QualityScorerThresholds>)",
        "signatureHash": "bf790262de88cae905241a79baabeb4cba9fc75f3f35b3a08cb53aecae5d427e",
        "filePath": "/src/utils/quality-scorer-v16.ts",
        "fileHash": "a45030f317877d30ba7f5245e723951d",
        "startLine": 31,
        "endLine": 39,
        "startColumn": 2,
        "endColumn": 395,
        "astHash": "9b1fb0cb43c04ccb",
        "contextPath": [
          "QualityScorerV16"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(\n    customWeights?: Partial<QualityScoreWeights>,\n    customThresholds?: Partial<QualityScorerThresholds>\n  ) {\n    this.namingAnalyzer = new NamingQualityAnalyzer();\n    this.typeSafetyAnalyzer = new TypeSafetyAnalyzer();\n    this.weights = { ...DEFAULT_QUALITY_WEIGHTS, ...customWeights };\n    this.thresholds = { ...DEFAULT_QUALITY_SCORER_THRESHOLDS, ...customThresholds };\n  }",
        "sourceFileRefId": "d6f5752b-8b86-48f6-88b3-2bfbc1ee6eff",
        "parameters": [
          {
            "name": "customWeights",
            "type": "Partial<QualityScoreWeights>",
            "typeSimple": "Partial<QualityScoreWeights>",
            "position": 0,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "customThresholds",
            "type": "Partial<QualityScorerThresholds>",
            "typeSimple": "Partial<QualityScorerThresholds>",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 93.77,
          "halsteadDifficulty": 1.23,
          "maintainabilityIndex": 85.35
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6c0da6a5-709a-570e-8e60-896afd731d14",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0360f06f1e6ecd070e1139bcd36b7bacbc6dde2f11d669983c04ccfa0dcaada3",
        "contentId": "b79324884365ef0923c1c1aa6af8f90abe90433dfa788a7dee9ec31bfc507875",
        "name": "constructor",
        "displayName": "HashCache.constructor",
        "signature": "public HashCache(options: HashCacheOptions = {})",
        "signatureHash": "14aaa018dccdc01df07ed5d13cb35502d9ba6731784b0caa718c2a93c899429c",
        "filePath": "/src/utils/hash-cache.ts",
        "fileHash": "09cb591e00bf504fc928cda190a25fc7",
        "startLine": 31,
        "endLine": 38,
        "startColumn": 2,
        "endColumn": 256,
        "astHash": "b02d705d7f5b0f71",
        "contextPath": [
          "HashCache"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(options: HashCacheOptions = {}) {\n    this.cache = new LRUCache<HashCacheEntry>({\n      maxSize: options.maxEntries || 1000,\n      onEvict: (_key: string, _entry: unknown) => {\n        // No cleanup needed for hash entries\n      }\n    });\n  }",
        "sourceFileRefId": "af98a9b9-999d-4973-b0bf-32d5d754478d",
        "parameters": [
          {
            "name": "options",
            "type": "HashCacheOptions",
            "typeSimple": "HashCacheOptions",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 7,
          "halsteadVolume": 60.92,
          "halsteadDifficulty": 1.64,
          "maintainabilityIndex": 94.23
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5640365c-9493-57a5-a631-3807c6f2c12d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "560e0a97bc4f639016fe39d0c9e03b0bcb1fa99c5a7ac3b8867ff029feb56bfd",
        "contentId": "bed65e03cadc0b3329bdb50258e4e161214bc4469cc3c430582e94c11567c134",
        "name": "calculateFileHash",
        "displayName": "calculateFileHash",
        "signature": "async calculateFileHash(filePath: string): Promise<string>",
        "signatureHash": "3fc6f266d9c8152938d3c5c7d64b0822eccfa0b2de653d9f46f8198dee1e580d",
        "filePath": "/src/utils/hash-utils.ts",
        "fileHash": "cb1dda3b70ebda95027430a7e9ab825d",
        "startLine": 34,
        "endLine": 41,
        "startColumn": 0,
        "endColumn": 324,
        "astHash": "9225e65beeebe883",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Calculate SHA256 hash of a file\n * Used for file integrity validation\n */\nexport async function calculateFileHash(filePath: string): Promise<string> {\n  try {\n    const content = await fs.promises.readFile(filePath, 'utf8');\n    return sha256Hash(content);\n  } catch (error) {\n    throw new Error(`Failed to calculate hash for ${filePath}: ${error instanceof Error ? error.message : error}`);\n  }\n}",
        "sourceFileRefId": "739b4656-8ea9-4a71-8f65-fa531518c3bf",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 14,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2,
          "halsteadVolume": 108,
          "halsteadDifficulty": 2.42,
          "maintainabilityIndex": 86.58
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4fec55d4-91b3-505d-97b0-894b3594de89",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "38f37f54c1ea8fca940e4cd83c1da807dab2784e3936d10554467f12f470b51d",
        "contentId": "68c4f59e947c9019fb5ba0c10831e4aa5514cfb9826dc4651936639af07f59ab",
        "name": "isTestTrackingFunction",
        "displayName": "isTestTrackingFunction",
        "signature": "isTestTrackingFunction(value: unknown): value is (connection: { close(): Promise<void> }) => void",
        "signatureHash": "5706def1c6ba9f8c3dbe695a67b39372e3a0c3fe9c0d303faa737b9cba594965",
        "filePath": "/src/storage/errors/database-error.ts",
        "fileHash": "9e74700eec245e1179e935062abcdeb7",
        "startLine": 35,
        "endLine": 37,
        "startColumn": 0,
        "endColumn": 157,
        "astHash": "0ebf5f9dec49f434",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n * Type guard to check if a value is a test tracking function\r\n */\r\nexport function isTestTrackingFunction(value: unknown): value is (connection: { close(): Promise<void> }) => void {\r\n  return typeof value === 'function';\r\n}",
        "sourceFileRefId": "151a8edf-f928-470c-87eb-60476c7b82a0",
        "parameters": [
          {
            "name": "value",
            "type": "unknown",
            "typeSimple": "unknown",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 25.27,
          "halsteadDifficulty": 0.67,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a311f032-e866-54bd-a51e-0e26baf05401",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4dc401e20e4e61865fb412b2972d93079dd589a8214190f933e0f4890971930c",
        "contentId": "f125f1e661dfaad13f2bcb279fea64e09447bdcaef5ef834957f5bafd9de9c3b",
        "name": "clearAll",
        "displayName": "ClearCoordinator.clearAll",
        "signature": "public async ClearCoordinator.clearAll(): Promise<void>",
        "signatureHash": "052db3e0de07564bd88ac5d99361107470a979547212875df6b0a6fc349877d5",
        "filePath": "/src/utils/clear-coordinator.ts",
        "fileHash": "5f2bb83eaae3419dad1653dc0eff694e",
        "startLine": 35,
        "endLine": 42,
        "startColumn": 2,
        "endColumn": 196,
        "astHash": "1efa5029eedcd8a8",
        "contextPath": [
          "ClearCoordinator"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear all registered modules in dependency order\n   */\n  async clearAll(): Promise<void> {\n    for (const name of this.clearOrder) {\n      const handler = this.handlers.get(name);\n      if (handler) {\n        await handler.handler();\n      }\n    }\n  }",
        "sourceFileRefId": "4f071925-8b13-4538-a189-e09a481c659e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 65.73,
          "halsteadDifficulty": 1.44,
          "maintainabilityIndex": 90.31
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4a950c9c-d4d6-5439-b146-7c08212d4a39",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "805762d2c80b966c0560d995013a39616610874729d86a4a5718e0f88b120c42",
        "contentId": "b007e6780f3176c2caddcef3c52dc18e7212f52370b7dc182b0c22e16479cfc0",
        "name": "runRealisticPerformanceTest",
        "displayName": "runRealisticPerformanceTest",
        "signature": "async runRealisticPerformanceTest(): Promise<void>",
        "signatureHash": "a955c5969a6072b36a1c56fda435a09b02ba660b204b5f7e17ede29b64e684eb",
        "filePath": "/src/benchmarks/realistic-performance-test.ts",
        "fileHash": "4b8ea2dc5c4cf9bfe1f6ca95d719ff56",
        "startLine": 37,
        "endLine": 238,
        "startColumn": 0,
        "endColumn": 8634,
        "astHash": "890d4420e4d71a75",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async function runRealisticPerformanceTest(): Promise<void> {\n  console.log('üöÄ Realistic CallGraphAnalyzer Performance Test');\n  console.log('============================================\\n');\n\n  // Setup storage and get real project data\n  const configManager = new ConfigManager();\n  const config = await configManager.load();\n  const storage = new PGLiteStorageAdapter(config.storage?.path || '.funcqc/funcqc.db');\n\n  let testData;\n  try {\n    testData = await getLatestSnapshotData(storage);\n  } catch (error) {\n    console.log(`‚ùå Error loading test data: ${error}`);\n    console.log('Please run `funcqc scan` first to create test data.');\n    return;\n  }\n\n  const { snapshot, functions, sourceFiles } = testData;\n  console.log(`üìä Test Dataset:`);\n  console.log(`   Snapshot ID: ${snapshot.id.substring(0, 8)}...`);\n  console.log(`   Functions: ${functions.length}`);\n  console.log(`   Source Files: ${sourceFiles.length}`);\n  console.log(`   Snapshot Date: ${new Date(snapshot.createdAt).toLocaleString()}\\n`);\n\n  // Test 1: Original implementation (measure existing call graph)\n  console.log('üìä Test 1: Loading existing call graph data...');\n  const test1Start = performance.now();\n  const memBefore1 = process.memoryUsage().heapUsed / 1024 / 1024;\n\n  const existingCallEdges = await storage.getCallEdgesBySnapshot(snapshot.id);\n  const existingInternalEdges = await storage.getInternalCallEdgesBySnapshot(snapshot.id);\n  \n  const test1Time = performance.now() - test1Start;\n  const memAfter1 = process.memoryUsage().heapUsed / 1024 / 1024;\n\n  const test1Results: TestResults = {\n    description: 'Existing Call Graph Data (DB Load)',\n    executionTime: test1Time,\n    callEdgesFound: existingCallEdges.length + existingInternalEdges.length,\n    functionsAnalyzed: functions.length,\n    memoryUsed: memAfter1 - memBefore1\n  };\n\n  console.log(`‚úÖ Test 1 completed in ${test1Time.toFixed(2)}ms`);\n  console.log(`   Call Edges: ${existingCallEdges.length} (external) + ${existingInternalEdges.length} (internal) = ${test1Results.callEdgesFound} total\\n`);\n\n  // Test 2: Re-analyze with optimized CallGraphAnalyzer\n  console.log('üöÄ Test 2: Re-analyzing with optimized CallGraphAnalyzer...');\n  const test2Start = performance.now();\n  const memBefore2 = process.memoryUsage().heapUsed / 1024 / 1024;\n\n  const analyzer = new FunctionAnalyzer(config);\n  \n  // Create file content map from stored source files\n  const fileContentMap = new Map<string, string>();\n  sourceFiles.forEach(file => {\n    fileContentMap.set(file.filePath, file.fileContent);\n  });\n\n  // Analyze call graph with performance measurement enabled\n  const originalDebugPerf = process.env['FUNCQC_DEBUG_PERFORMANCE'];\n  process.env['FUNCQC_DEBUG_PERFORMANCE'] = 'true';\n  \n  const analysisResult = await analyzer.analyzeCallGraphFromContent(\n    fileContentMap,\n    functions,\n    'temp', // Use temp snapshot ID\n    storage\n  );\n  \n  // Restore original value\n  if (originalDebugPerf !== undefined) {\n    process.env['FUNCQC_DEBUG_PERFORMANCE'] = originalDebugPerf;\n  } else {\n    delete process.env['FUNCQC_DEBUG_PERFORMANCE'];\n  }\n\n  const test2Time = performance.now() - test2Start;\n  const memAfter2 = process.memoryUsage().heapUsed / 1024 / 1024;\n\n  const test2Results: TestResults = {\n    description: 'Fresh Analysis (Optimized)',\n    executionTime: test2Time,\n    callEdgesFound: analysisResult.callEdges.length + analysisResult.internalCallEdges.length,\n    functionsAnalyzed: functions.length,\n    memoryUsed: memAfter2 - memBefore2\n  };\n\n  console.log(`‚úÖ Test 2 completed in ${test2Time.toFixed(2)}ms`);\n  console.log(`   Call Edges: ${analysisResult.callEdges.length} (external) + ${analysisResult.internalCallEdges.length} (internal) = ${test2Results.callEdgesFound} total\\n`);\n\n  // Test 3: Measure import resolution performance specifically\n  console.log('üîç Test 3: Import resolution stress test...');\n  \n  // Select files with many imports for focused testing\n  const complexFiles = sourceFiles\n    .filter(f => f.fileContent.includes('import') && f.fileContent.split('import').length > 10)\n    .slice(0, 10); // Test first 10 complex files\n\n  console.log(`   Testing ${complexFiles.length} files with heavy import usage`);\n  \n  const test3Start = performance.now();\n  const memBefore3 = process.memoryUsage().heapUsed / 1024 / 1024;\n\n  let test3CallEdges = 0;\n  for (const sourceFile of complexFiles) {\n    const fileFunctions = functions.filter(f => f.filePath === sourceFile.filePath);\n    \n    if (fileFunctions.length > 0) {\n      // Create a subset analysis for this specific file\n      const fileContentMapSubset = new Map();\n      fileContentMapSubset.set(sourceFile.filePath, sourceFile.fileContent);\n      \n      const fileResult = await analyzer.analyzeCallGraphFromContent(\n        fileContentMapSubset,\n        fileFunctions,\n        'temp-file-test',\n        storage\n      );\n      \n      test3CallEdges += fileResult.callEdges.length + fileResult.internalCallEdges.length;\n    }\n  }\n\n  const test3Time = performance.now() - test3Start;\n  const memAfter3 = process.memoryUsage().heapUsed / 1024 / 1024;\n\n  const test3Results: TestResults = {\n    description: 'Import-Heavy Files Analysis',\n    executionTime: test3Time,\n    callEdgesFound: test3CallEdges,\n    functionsAnalyzed: complexFiles.reduce((sum, f) => sum + functions.filter(fn => fn.filePath === f.filePath).length, 0),\n    memoryUsed: memAfter3 - memBefore3\n  };\n\n  console.log(`‚úÖ Test 3 completed in ${test3Time.toFixed(2)}ms`);\n  console.log(`   Call Edges: ${test3CallEdges} from ${test3Results.functionsAnalyzed} functions\\n`);\n\n  // Performance comparison results\n  console.log('üìà PERFORMANCE TEST RESULTS');\n  console.log('===========================\\n');\n\n  const tests = [test1Results, test2Results, test3Results];\n  \n  tests.forEach((test, index) => {\n    console.log(`üß™ Test ${index + 1}: ${test.description}`);\n    console.log(`   ‚è±Ô∏è  Execution Time: ${test.executionTime.toFixed(2)}ms`);\n    console.log(`   üîó Call Edges Found: ${test.callEdgesFound}`);\n    console.log(`   ‚öôÔ∏è  Functions Analyzed: ${test.functionsAnalyzed}`);\n    console.log(`   üß† Memory Used: ${test.memoryUsed.toFixed(1)}MB`);\n    \n    if (test.functionsAnalyzed > 0) {\n      console.log(`   üìä Performance Ratios:`);\n      console.log(`      ${(test.executionTime / test.functionsAnalyzed).toFixed(2)}ms per function`);\n      console.log(`      ${(test.callEdgesFound / test.functionsAnalyzed).toFixed(2)} edges per function`);\n    }\n    console.log('');\n  });\n\n  // Efficiency Analysis\n  console.log('üéØ EFFICIENCY ANALYSIS');\n  console.log('======================\\n');\n\n  // Compare DB load vs fresh analysis\n  const dbVsAnalysis = test2Results.executionTime / test1Results.executionTime;\n  console.log(`üìä DB Load vs Fresh Analysis:`);\n  console.log(`   DB Load Time: ${test1Results.executionTime.toFixed(2)}ms`);\n  console.log(`   Fresh Analysis Time: ${test2Results.executionTime.toFixed(2)}ms`);\n  console.log(`   Ratio: ${dbVsAnalysis.toFixed(2)}x (${dbVsAnalysis > 1 ? 'slower' : 'faster'})\\n`);\n\n  // Quality of analysis\n  const edgeDetectionImprovement = test1Results.callEdgesFound > 0\n    ? ((test2Results.callEdgesFound - test1Results.callEdgesFound) / test1Results.callEdgesFound * 100)\n    : 0;\n  console.log(`üîç Call Edge Detection:`);\n  console.log(`   Existing (DB): ${test1Results.callEdgesFound} edges`);\n  console.log(`   Fresh Analysis: ${test2Results.callEdgesFound} edges`);\n  console.log(`   Improvement: ${edgeDetectionImprovement > 0 ? '+' : ''}${edgeDetectionImprovement.toFixed(1)}%\\n`);\n\n  // Per-function analysis efficiency\n  if (test3Results.functionsAnalyzed > 0 && test2Results.functionsAnalyzed > 0) {\n    const focusedEfficiency = test3Results.executionTime / test3Results.functionsAnalyzed;\n    const fullEfficiency = test2Results.executionTime / test2Results.functionsAnalyzed;\n    \n    console.log(`‚ö° Analysis Efficiency:`);\n    console.log(`   Full Project: ${fullEfficiency.toFixed(2)}ms per function`);\n    console.log(`   Focused (Import-Heavy): ${focusedEfficiency.toFixed(2)}ms per function`);\n    console.log(`   Efficiency Ratio: ${(focusedEfficiency / fullEfficiency).toFixed(2)}x\\n`);\n  }\n\n  // Memory efficiency\n  console.log(`üíæ Memory Efficiency:`);\n  console.log(`   DB Load: ${test1Results.memoryUsed.toFixed(1)}MB`);\n  console.log(`   Fresh Analysis: ${test2Results.memoryUsed.toFixed(1)}MB`);\n  console.log(`   Memory Overhead: ${(test2Results.memoryUsed - test1Results.memoryUsed).toFixed(1)}MB\\n`);\n\n  console.log('‚úÖ Realistic performance test completed!');\n  \n  // Cleanup\n  delete process.env['FUNCQC_DEBUG_PERFORMANCE'];\n}",
        "sourceFileRefId": "752b33a1-9cf5-4a7e-a9e8-f40c7a756dcf",
        "parameters": [],
        "metrics": {
          "linesOfCode": 146,
          "totalLines": 204,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 13,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 7,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 6,
          "callbackCount": 6,
          "commentLines": 16,
          "codeToCommentRatio": 9.13,
          "halsteadVolume": 7146.8,
          "halsteadDifficulty": 26.59,
          "maintainabilityIndex": 0
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b4652101-9bee-533e-9bda-bd60db3356ca",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "58814fa8f6c36f2cca9750882dffe78a44ed7d68b74486ae8882e6956ec2fb0d",
        "contentId": "d7a73f1d48206dfd6cea37259deefaded360c6288aebde1cb4ee9b9f70d9cbed",
        "name": "safeJsonParseWithLogging",
        "displayName": "safeJsonParseWithLogging",
        "signature": "safeJsonParseWithLogging(value: unknown, fallbackValue: T, context?: string): T",
        "signatureHash": "ef2aef762d009436f39a894ae2feecc2c4fb3af90203be03a00f1266f32f551a",
        "filePath": "/src/utils/json-helpers.ts",
        "fileHash": "d18d56568ae7905062e85773994c777d",
        "startLine": 38,
        "endLine": 59,
        "startColumn": 0,
        "endColumn": 448,
        "astHash": "e0ccb0bfe2e45335",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Helper to safely parse JSON with custom error handling\n * Use this variant when you need to log specific parsing failures\n */\nexport function safeJsonParseWithLogging<T>(\n  value: unknown,\n  fallbackValue: T,\n  context?: string\n): T {\n  if (typeof value !== 'string') {\n    return (value as T) ?? fallbackValue;\n  }\n\n  if (value === '') {\n    return fallbackValue;\n  }\n\n  try {\n    return JSON.parse(value) as T;\n  } catch {\n    console.warn(\n      `‚ö†Ô∏è  JSON parse failed${context ? ` in ${context}` : ''}: \"${value}\". Using fallback.`\n    );\n    return fallbackValue;\n  }\n}",
        "sourceFileRefId": "3b2c891e-cd89-4673-8b29-371c350b5515",
        "parameters": [
          {
            "name": "value",
            "type": "unknown",
            "typeSimple": "unknown",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "fallbackValue",
            "type": "T",
            "typeSimple": "T",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "context",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 20,
          "totalLines": 28,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 1,
          "parameterCount": 3,
          "returnStatementCount": 4,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 5,
          "halsteadVolume": 145.95,
          "halsteadDifficulty": 5.38,
          "maintainabilityIndex": 62.22
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e5256856-81e8-54aa-b5ea-ca6db0285eef",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d81b9205396d4b33a0c80bfe872d40499887b5d9a46b64126aaecf0033133f38",
        "contentId": "f1d4514fba9cafb1de2bf0a34df5c8071a656a004e2e897168e86a10bd6136dd",
        "name": "constructor",
        "displayName": "ParallelFileProcessor.constructor",
        "signature": "public ParallelFileProcessor(options: ParallelProcessingOptions = {})",
        "signatureHash": "cdc3ff7bf468a7190f5510e8808efd45bce1d13fe6869f7f86ac077d8372e093",
        "filePath": "/src/utils/parallel-processor.ts",
        "fileHash": "c221c2fbc7cee566ec657732288ce4bc",
        "startLine": 38,
        "endLine": 46,
        "startColumn": 2,
        "endColumn": 519,
        "astHash": "2b5fd34175512d6d",
        "contextPath": [
          "ParallelFileProcessor"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(options: ParallelProcessingOptions = {}) {\n    // Use SystemResourceManager for optimal configuration\n    const resourceManager = SystemResourceManager.getInstance();\n    const optimalConfig = resourceManager.getOptimalConfig();\n    \n    // Default to CPU count, but cap at 8 workers to avoid resource exhaustion\n    this.maxWorkers = Math.min(options.maxWorkers || optimalConfig.maxWorkers, 8);\n    this.maxSourceFilesInMemory = options.maxSourceFilesInMemory || optimalConfig.maxSourceFilesInMemory;\n  }",
        "sourceFileRefId": "14abaca8-7a56-4f61-9817-39e50b983a23",
        "parameters": [
          {
            "name": "options",
            "type": "ParallelProcessingOptions",
            "typeSimple": "ParallelProcessingOptions",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 2,
          "codeToCommentRatio": 3,
          "halsteadVolume": 169.92,
          "halsteadDifficulty": 3.2,
          "maintainabilityIndex": 89.91
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e791fdf7-41c8-50f3-b947-c134c029d527",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "61140a0f68a5772d7c4936c8e9299ef57e7b8006e7669ef5df988e79f3206b5e",
        "contentId": "61e4148db9163c81a92bf059c62619ec57853586845ead1c2dd3d45bd81e82ea",
        "name": "calculateFunctionStats",
        "displayName": "calculateFunctionStats",
        "signature": "calculateFunctionStats(functions: FunctionInfo[]): void",
        "signatureHash": "5cbf13d891e2692d4316ece4cc846c4c3637481b946740b9b998a7cfc6553e11",
        "filePath": "/src/utils/function-utils.ts",
        "fileHash": "77f21daaeaef444d6206767ae97d10b1",
        "startLine": 39,
        "endLine": 52,
        "startColumn": 0,
        "endColumn": 526,
        "astHash": "95b642d30bcf75d9",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Calculate basic statistics for a group of functions\n * \n * @param functions Array of functions to analyze\n * @returns Object containing basic statistics\n */\nexport function calculateFunctionStats(functions: FunctionInfo[]) {\n  const fileCount = new Set(functions.map(f => f.filePath)).size;\n  const exportedCount = functions.filter(f => f.isExported).length;\n  const avgLinesOfCode = functions.length > 0 \n    ? Math.round(functions.reduce((sum, f) => sum + (f.endLine - f.startLine + 1), 0) / functions.length)\n    : 0;\n\n  return {\n    totalFunctions: functions.length,\n    uniqueFiles: fileCount,\n    exportedFunctions: exportedCount,\n    averageLinesOfCode: avgLinesOfCode,\n  };\n}",
        "sourceFileRefId": "07eee011-af8f-4e91-bfc5-20fac6a86e7c",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 22,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 6,
          "codeToCommentRatio": 2.17,
          "halsteadVolume": 377.4,
          "halsteadDifficulty": 5.1,
          "maintainabilityIndex": 66.08
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fb0409f9-ffe0-5397-989e-606b2783b8f9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bd53bc9b6f7044fd7fc9fefd34432c3922dfa8cfeb6ec324273284b3490846e9",
        "contentId": "c943220c5708431b4a4804f7de1103a0cc56d8bc6b3188bb5db39a43fb27adcc",
        "name": "saveSnapshot",
        "displayName": "SnapshotOperations.saveSnapshot",
        "signature": "public async SnapshotOperations.saveSnapshot(functions: FunctionInfo[], label?: string, comment?: string, configHash?: string): Promise<string>",
        "signatureHash": "65aa1b524466847aa1b896f99ab583e9a859b1246f9b822d545c397b31366b52",
        "filePath": "/src/storage/modules/snapshot-operations.ts",
        "fileHash": "988422ca9eee1d33485b7363bb4f84f2",
        "startLine": 40,
        "endLine": 67,
        "startColumn": 2,
        "endColumn": 787,
        "astHash": "4839ce5825ec928f",
        "contextPath": [
          "SnapshotOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Save a new snapshot with functions\r\n   */\r\n  async saveSnapshot(\r\n    functions: FunctionInfo[],\r\n    label?: string,\r\n    comment?: string,\r\n    configHash?: string\r\n  ): Promise<string> {\r\n    const snapshotId = this.generateSnapshotId();\r\n\r\n    try {\r\n      // Create snapshot and save functions will be handled by main adapter\r\n      // This is just the snapshot creation part\r\n      await this.createSnapshotRecord(\r\n        snapshotId,\r\n        functions,\r\n        configHash || 'unknown',\r\n        label,\r\n        comment\r\n      );\r\n\r\n      return snapshotId;\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_WRITE_ERROR,\r\n        `Failed to save snapshot: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "1c754d49-2342-4f22-9029-7c101101cd59",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "label",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "comment",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "configHash",
            "type": "string",
            "typeSimple": "string",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 24,
          "totalLines": 33,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 1,
          "parameterCount": 4,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 4.8,
          "halsteadVolume": 204.33,
          "halsteadDifficulty": 3.24,
          "maintainabilityIndex": 55.66
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c0cbd96d-c16a-5781-b814-3d8a90af7889",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f12533dddf6314aebaad9a4c9c48c6ac256077690c0b09e77ae3cddd70a1d87a",
        "contentId": "96003ec852e848955bb4d00df1f2640539116f9944925fae7a9cde55737768f2",
        "name": "groupByPath",
        "displayName": "groupByPath",
        "signature": "groupByPath(functions: T[]): Map<string, T[]>",
        "signatureHash": "6e402f1a9f6e18b4ad606abc190a3602d69418f8a12339bab77e34a507395514",
        "filePath": "/src/utils/path-normalizer.ts",
        "fileHash": "975eea5c410cc169bec3e87c9a751799",
        "startLine": 42,
        "endLine": 53,
        "startColumn": 0,
        "endColumn": 378,
        "astHash": "69dcc54e8734c57c",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Create a Map grouping functions by normalized file path\n * \n * @param functions - Array of objects with filePath property\n * @returns Map from normalized file path to array of functions\n */\nexport function groupByPath<T extends { filePath: string }>(functions: T[]): Map<string, T[]> {\n  const groups = new Map<string, T[]>();\n  \n  for (const func of functions) {\n    const normalizedPath = normalizePath(func.filePath);\n    const existing = groups.get(normalizedPath) || [];\n    existing.push(func);\n    groups.set(normalizedPath, existing);\n  }\n  \n  return groups;\n}",
        "sourceFileRefId": "ced90366-763a-4a2a-b5b2-bf058438193c",
        "parameters": [
          {
            "name": "functions",
            "type": "T[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 20,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 174.17,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 77.78
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "debbc530-29e4-5c74-ab95-fc8dd06cc5a6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "cab1841cba8584862e817348dabe67100746b797e5f78799cdea22201e006a25",
        "contentId": "35b56d5a95764c4286768b78efb7f316c6ef2e915226ad3eea8745fd4729d2fd",
        "name": "formatPercentage",
        "displayName": "formatPercentage",
        "signature": "formatPercentage(value: number, total: number): string",
        "signatureHash": "8c02d2240e142723a5cf6fd1b5b13191c21f697a455c5374934671276d7969a3",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 42,
        "endLine": 46,
        "startColumn": 0,
        "endColumn": 188,
        "astHash": "69302f931c1bb8e9",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format percentage with appropriate precision\n */\nexport function formatPercentage(value: number, total: number): string {\n  if (total === 0) return '0%';\n  const percentage = (value / total) * 100;\n  return `${percentage.toFixed(1)}%`;\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "total",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 74.23,
          "halsteadDifficulty": 3.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "746e0d90-2f22-5de0-9823-df39ba188703",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6c2bc09c2c4ee7768ac24afe84d4532f9fae22ff6425eaae14d0890e888fb7a7",
        "contentId": "981e39887f643e5a91f8fe347c6bd9f77587296f050c11a5018c01a96ab7e122",
        "name": "constructor",
        "displayName": "CrossTypeAnalyzer.constructor",
        "signature": "public CrossTypeAnalyzer(storage: StorageQueryInterface, options: Partial<CrossTypeAnalysisOptions> = {})",
        "signatureHash": "b8384b69a487934121ad3d14cf058417f49b688043efac3b028640d598bbf122",
        "filePath": "/src/analyzers/type-insights/cross-type-analyzer.ts",
        "fileHash": "3067045166e1508b44dc8b66f8e92b06",
        "startLine": 44,
        "endLine": 56,
        "startColumn": 2,
        "endColumn": 396,
        "astHash": "7fcfb85cc57a036a",
        "contextPath": [
          "CrossTypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(\n    storage: StorageQueryInterface, \n    options: Partial<CrossTypeAnalysisOptions> = {}\n  ) {\n    this.storage = storage;\n    this.options = {\n      minSupport: options.minSupport ?? 3,\n      minConfidence: options.minConfidence ?? 0.8,\n      maxPatternSize: options.maxPatternSize ?? 5,\n      includeRarePatterns: options.includeRarePatterns ?? false,\n      ...options\n    };\n  }",
        "sourceFileRefId": "6fe80e32-f668-4d24-8074-01f327b61e98",
        "parameters": [
          {
            "name": "storage",
            "type": "StorageQueryInterface",
            "typeSimple": "StorageQueryInterface",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "Partial<CrossTypeAnalysisOptions>",
            "typeSimple": "Partial<CrossTypeAnalysisOptions>",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 15,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 140.65,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 72.8
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9a0bf25c-846f-58de-a308-1e7a579ec4b8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7e09e414afc809e13bcea9923eee7bba550a439d44d85f7595147f1b4157a265",
        "contentId": "ce4a3160dccf10b18c897b4fc625733aa047d54ade1138b53f6d4479492db476",
        "name": "streamQuery",
        "displayName": "PGliteConnection.streamQuery",
        "signature": "public async PGliteConnection.streamQuery(_compiledQuery: CompiledQuery, _chunkSize?: number): AsyncIterableIterator<QueryResult<R>>",
        "signatureHash": "3f79a2975ce6e7297e8406cbe94dc172c1143c80228b69cee6d7d833904175b6",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 45,
        "endLine": 51,
        "startColumn": 2,
        "endColumn": 297,
        "astHash": "0519836393378f76",
        "contextPath": [
          "PGliteConnection"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "generator",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": true,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "public async *streamQuery<R>(\r\n    _compiledQuery: CompiledQuery,\r\n    _chunkSize?: number\r\n  ): AsyncIterableIterator<QueryResult<R>> {\r\n    // This method is intentionally not implemented as PGlite doesn't support streaming\r\n    throw new Error(`PGliteDriver doesn't support streaming.`);\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [
          {
            "name": "_compiledQuery",
            "type": "CompiledQuery",
            "typeSimple": "CompiledQuery",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "_chunkSize",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 6,
          "halsteadVolume": 31.7,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9ec85b78-0c22-55a0-81b1-b40493a8084f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "22f40691b79390fd0fda322e70d981f3040c78914fb2a1fdaf19315dcc0f894b",
        "contentId": "a78021f682c798767c90f931625b2f531ae4b475234021856d196f26e6bbfaaf",
        "name": "analyze",
        "displayName": "FrameworkCallbackAnalyzer.analyze",
        "signature": "public async FrameworkCallbackAnalyzer.analyze(context: AnalysisContext): Promise<CallbackAnalysisResult>",
        "signatureHash": "ce6f09640907ec852cd49c52d14e66255fa86f7969ece7b11e82d9e86c4cc432",
        "filePath": "/src/analyzers/callback-registration/framework-analyzer.ts",
        "fileHash": "c96054d31e926094f3823133e8addb2b",
        "startLine": 45,
        "endLine": 81,
        "startColumn": 2,
        "endColumn": 1260,
        "astHash": "8d807c84136a968c",
        "contextPath": [
          "FrameworkCallbackAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze a source file for callback registration patterns\n   */\n  async analyze(context: AnalysisContext): Promise<CallbackAnalysisResult> {\n    const canAnalyze = this.canAnalyze(context);\n    const enabled = context.frameworkConfig.enabled;\n    \n    \n    if (!enabled || !canAnalyze) {\n      return this.createEmptyResult();\n    }\n\n\n    if (this.debug) {\n      this.logger.debug(`[${this.frameworkName}] Starting analysis for ${context.sourceFile.getFilePath()}`);\n    }\n\n    try {\n      const registrations = await this.detectCallbackRegistrations(context);\n      const triggers = await this.detectCallbackTriggers(context, registrations);\n      const virtualEdges = await this.generateVirtualEdges(context, triggers);\n\n      const result: CallbackAnalysisResult = {\n        registrations,\n        triggers,\n        virtualEdges,\n        registrationCount: registrations.length,\n        virtualEdgeCount: virtualEdges.length\n      };\n\n      if (this.debug) {\n        this.logger.debug(`[${this.frameworkName}] Found ${registrations.length} registrations, ${virtualEdges.length} virtual edges`);\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.warn(`[${this.frameworkName}] Analysis failed: ${error instanceof Error ? error.message : String(error)}`);\n      return this.createEmptyResult();\n    }\n  }",
        "sourceFileRefId": "4188e027-93b3-4822-9fd6-c1ab143cf7b4",
        "parameters": [
          {
            "name": "context",
            "type": "AnalysisContext",
            "typeSimple": "AnalysisContext",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 29,
          "totalLines": 42,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 3,
          "branchCount": 4,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 3,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 9.67,
          "halsteadVolume": 625.51,
          "halsteadDifficulty": 5.07,
          "maintainabilityIndex": 42.39
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8a0ab3cc-bde3-5d05-909a-0b8337acd567",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8a91c69641ef82ef2df2de4416261672c77d66faf2bd9ab3df7a3488b27046dc",
        "contentId": "7d22d220bb703030ff24b66db2bd918e6ecf949932bbdfb2a209fa0544668ac9",
        "name": "getFunctionIdByDeclaration",
        "displayName": "FunctionRegistry.getFunctionIdByDeclaration",
        "signature": "public FunctionRegistry.getFunctionIdByDeclaration(decl: Node): string | undefined",
        "signatureHash": "1765b947d3d4d14818a754aeddc7b3b4d1224aeac21155926315a4f36aa8fab5",
        "filePath": "/src/analyzers/function-registry.ts",
        "fileHash": "342a1924c6421d65430e9ea4f71936b1",
        "startLine": 45,
        "endLine": 47,
        "startColumn": 2,
        "endColumn": 105,
        "astHash": "2b664effb46056f9",
        "contextPath": [
          "FunctionRegistry"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get function ID by declaration node (for symbol resolution)\n   */\n  getFunctionIdByDeclaration(decl: Node): string | undefined {\n    return this.declToIdMap.get(decl);\n  }",
        "sourceFileRefId": "35714751-b780-4a4a-a49c-dd9f9d12e454",
        "parameters": [
          {
            "name": "decl",
            "type": "Node",
            "typeSimple": "Node",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 30,
          "halsteadDifficulty": 1.17,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "39c6619a-149d-56c5-ae94-a6c1236b83c7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "06f2206b947dcb4c819c1c1b70f0471296baaeda4f3e59904698c8047e45a965",
        "contentId": "3d0cc407af0e6e6d1573a121e934038e2eb07ddd391d597c97998dafa1bfa7e5",
        "name": "generateCompositeKeyFromAnalysis",
        "displayName": "generateCompositeKeyFromAnalysis",
        "signature": "generateCompositeKeyFromAnalysis(filePath: string, startLine: number, functionName: string): string",
        "signatureHash": "5ca8eeb701bc1fbfacb5850bfd0a71c30ffeeea2456b2f2d28e7910324f2efed",
        "filePath": "/src/utils/function-mapping-utils.ts",
        "fileHash": "aea725e5b0200c766590f3238262928b",
        "startLine": 45,
        "endLine": 51,
        "startColumn": 0,
        "endColumn": 201,
        "astHash": "c018b74917703668",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Generate composite key from function analysis data\n * Used to match OnePassASTVisitor results with FunctionInfo\n */\nexport function generateCompositeKeyFromAnalysis(\n  filePath: string,\n  startLine: number,\n  functionName: string\n): string {\n  return generateFunctionCompositeKey(filePath, startLine, functionName);\n}",
        "sourceFileRefId": "e46ad598-9ca0-4987-bf52-1d214d772d23",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "startLine",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functionName",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1.75,
          "halsteadVolume": 25.85,
          "halsteadDifficulty": 0.9,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e54e0236-ff62-59fd-b1df-90d98e9386ea",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2b64cbc47d6eca230ae561f54b4584344012c74e1ab604fd8cd0a9e5542f680e",
        "contentId": "f821ea4bfd3513b161c4117df3519804b0701ca1031715b9913f5ec3f14d1cee",
        "name": "clear",
        "displayName": "SymbolCache.clear",
        "signature": "public SymbolCache.clear(): void",
        "signatureHash": "a1ddb33eeaa53af1a89fcfad676b258fd86bca6014c878496dd3f92f23386534",
        "filePath": "/src/utils/symbol-cache.ts",
        "fileHash": "e086fef742b0105b943596f198f356e3",
        "startLine": 45,
        "endLine": 50,
        "startColumn": 2,
        "endColumn": 185,
        "astHash": "db73ad1cc429e709",
        "contextPath": [
          "SymbolCache"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear the cache\n   */\n  clear(): void {\n    // WeakMap doesn't have clear(), create new instance\n    this.cache = new WeakMap<Node, TsMorphSymbol | null>();\n    this.hitCount = 0;\n    this.missCount = 0;\n  }",
        "sourceFileRefId": "f48c2b26-dffc-4c3d-b372-acd83a73d92e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1.25,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 1.13,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "77f1e1b7-c74a-56ad-b79e-49491fa16237",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "516f9d61d70d63726798ffa5e3e5a8b608aceafcc06652f2d5055e23c63d9964",
        "contentId": "37171fbb2b4c196012c837590dbfdd6fc76665a59d222e4952bdc5413d1ebfa5",
        "name": "performRTAAnalysis",
        "displayName": "RTAAnalyzer.performRTAAnalysis",
        "signature": "public async RTAAnalyzer.performRTAAnalysis(functions: Map<string, FunctionMetadata>, chaCandidates: Map<string, MethodInfo[]>, unresolvedMethodCalls: UnresolvedMethodCall[], prebuiltClassToInterfacesMap?: Map<string, string[]>, snapshotId?: string): Promise<IdealCallEdge[]>",
        "signatureHash": "8346d9a50a43d1cda9d56330b4eb35942b1af70989cf551e3da2c26d5d82afb1",
        "filePath": "/src/analyzers/rta-analyzer.ts",
        "fileHash": "b93feff0fcb7d962f09e8c8d9e0874b6",
        "startLine": 47,
        "endLine": 67,
        "startColumn": 2,
        "endColumn": 758,
        "astHash": "55588b4efe964c78",
        "contextPath": [
          "RTAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Perform RTA analysis to refine CHA candidates\r\n   */\r\n  async performRTAAnalysis(\r\n    functions: Map<string, FunctionMetadata>,\r\n    chaCandidates: Map<string, MethodInfo[]>,\r\n    unresolvedMethodCalls: UnresolvedMethodCall[],\r\n    prebuiltClassToInterfacesMap?: Map<string, string[]>,\r\n    snapshotId?: string\r\n  ): Promise<IdealCallEdge[]> {\r\n    // Store snapshot ID for edge generation\r\n    this.snapshotId = snapshotId;\r\n    \r\n    // Use prebuilt class-to-interfaces mapping if available\r\n    if (prebuiltClassToInterfacesMap) {\r\n      this.classInterfacesMap = new Map(prebuiltClassToInterfacesMap);\r\n    }\r\n    \r\n    await this.buildInstantiatedTypesRegistry();\r\n    \r\n    const rtaEdges = this.filterCHACandidatesWithRTA(functions, chaCandidates, unresolvedMethodCalls);\r\n    \r\n    return rtaEdges;\r\n  }",
        "sourceFileRefId": "b09a456a-9552-45d6-bdb7-19213c929997",
        "parameters": [
          {
            "name": "functions",
            "type": "Map<string, FunctionMetadata>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "chaCandidates",
            "type": "Map<string, MethodInfo[]>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "unresolvedMethodCalls",
            "type": "UnresolvedMethodCall[]",
            "typeSimple": "array",
            "position": 2,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "prebuiltClassToInterfacesMap",
            "type": "Map<string, string[]>",
            "typeSimple": "string",
            "position": 3,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 4,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 26,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 5,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 3,
          "halsteadVolume": 162.52,
          "halsteadDifficulty": 2.42,
          "maintainabilityIndex": 69.06
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fbbd64fb-9106-5017-a6f3-a226d91db6fa",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2e8aeb44886b4b2c7f3a2fa0d860ada9569a708412758783b351243c843bf042",
        "contentId": "099a481512a04171c880d05d172aff0ebc39794abd4816417dea2c98b970e35f",
        "name": "dispose",
        "displayName": "ASTSimilarityDetector.dispose",
        "signature": "public ASTSimilarityDetector.dispose(): void",
        "signatureHash": "ef190c2c3dbebb7db87a8349f8d3901796b0922fc78c846bcc990d9f9f6280fe",
        "filePath": "/src/similarity/ast-similarity-detector.ts",
        "fileHash": "919971068dd6dbcad4891c3d0a19dbfd",
        "startLine": 49,
        "endLine": 52,
        "startColumn": 2,
        "endColumn": 172,
        "astHash": "64d0c1c7d0dfc871",
        "contextPath": [
          "ASTSimilarityDetector"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "dispose(): void {\n    // Note: Don't remove SourceFiles here - they may be shared with other analyzers\n    // Project disposal will be handled by the parent component\n  }",
        "sourceFileRefId": "eaf10d0d-d084-49d2-9980-447cecb0d670",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 2,
          "codeToCommentRatio": 1,
          "halsteadVolume": 0,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e346e074-5f1f-5a9e-b14b-a0c101be0baa",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c98e41857a9f6220f6109c6d1a8ba6cd4d94bc0343a489698ace4a2cc646cbce",
        "contentId": "41da4e4ac889f434909a55977ebe09ae88960517b54569c883ee8ac5caeb19d8",
        "name": "findFiles",
        "displayName": "findFiles",
        "signature": "async findFiles(dir: string, options: {\n    extensions?: string[];\n    exclude?: string[];\n    maxDepth?: number;\n  } = {}): Promise<string[]>",
        "signatureHash": "711bb80db1fa2eff4e0a35c951a4661a6e65c53651d9a012219f52144f6fc02e",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 49,
        "endLine": 67,
        "startColumn": 0,
        "endColumn": 392,
        "astHash": "bb33a07669982bcf",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "export async function findFiles(\n  dir: string,\n  options: {\n    extensions?: string[];\n    exclude?: string[];\n    maxDepth?: number;\n  } = {}\n): Promise<string[]> {\n  const { extensions, exclude = [], maxDepth = 10 } = options;\n  const context: WalkContext = {\n    maxDepth,\n    extensions,\n    exclude,\n    files: [],\n  };\n\n  await walkDirectory(dir, 0, context);\n  return context.files;\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "dir",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "{\n    extensions?: string[];\n    exclude?: string[];\n    maxDepth?: number;\n  }",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 21,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 105.49,
          "halsteadDifficulty": 1.92,
          "maintainabilityIndex": 68.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7fc72f17-f4c0-5470-9c71-4dd24724150a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7c8698b8696b66e816c121543dc3e7b82fe3df86d39633f3acd8886708c0221e",
        "contentId": "b8df57a1e4d0f8f4ebf0f27e08388a46745a4374dd9cd7be09e752befdcf1745",
        "name": "constructor",
        "displayName": "TypeDependencyAnalyzer.constructor",
        "signature": "public TypeDependencyAnalyzer(private project: Project)",
        "signatureHash": "f1632d43d91ce2f261f6cdb08aa7bc8f1b997b319053ff88f5f0cfe6f67b806c",
        "filePath": "/src/analyzers/type-dependency-analyzer.ts",
        "fileHash": "e9557ede2981b324a2c27dec6ed36039",
        "startLine": 49,
        "endLine": 49,
        "startColumn": 2,
        "endColumn": 42,
        "astHash": "ad655694e160d0fb",
        "contextPath": [
          "TypeDependencyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(private project: Project) {}",
        "sourceFileRefId": "4c50873c-9d83-4ace-a247-7f10f41fe5c4",
        "parameters": [
          {
            "name": "project",
            "type": "Project",
            "typeSimple": "Project",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 1,
          "totalLines": 3,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "573bf629-c8db-5bac-a68f-73b102c072b1",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "274aa2e4e5dac970e893144e8df58dcfd76650b2931159e0089d0dc4ef2baa69",
        "contentId": "f90ac15bfb1a0854d773b8e48f1d26ec0368fc5f4f189b94547098612e04185b",
        "name": "buildFunctionLookupMap",
        "displayName": "ImportExactAnalysisStage.buildFunctionLookupMap",
        "signature": "public ImportExactAnalysisStage.buildFunctionLookupMap(functions: Map<string, FunctionMetadata>): void",
        "signatureHash": "c818ba140d4db061a49429da965a560b219630e45a29a7e8960ed837536a9e4a",
        "filePath": "/src/analyzers/staged-analysis/stages/import-exact-analysis.ts",
        "fileHash": "463a7461cbc7c388473a664e84376cbb",
        "startLine": 50,
        "endLine": 65,
        "startColumn": 2,
        "endColumn": 799,
        "astHash": "e1aab29025c886f4",
        "contextPath": [
          "ImportExactAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Build function lookup map for efficient resolution\r\n   */\r\n  buildFunctionLookupMap(functions: Map<string, FunctionMetadata>): void {\r\n    this.functionLookupMap.clear();\r\n    \r\n    // Sort by startLine ascending so nested functions (with larger startLine) overwrite outer ones\r\n    const sorted = [...functions.entries()].sort(([,a], [,b]) => a.startLine - b.startLine);\r\n    \r\n    for (const [id, func] of sorted) {\r\n      // Map all lines within the function range to the function ID\r\n      for (let line = func.startLine; line <= func.endLine; line++) {\r\n        const key = `${toUnifiedProjectPath(func.filePath)}:${line}`;\n        this.functionLookupMap.set(key, id); // Later functions overwrite for nested containment\r\n      }\r\n    }\r\n    \r\n    this.logger.debug(`Built per-line function lookup map with ${this.functionLookupMap.size} entries`);\r\n  }",
        "sourceFileRefId": "c472ee8f-0741-470d-aa08-d7bb17263d30",
        "parameters": [
          {
            "name": "functions",
            "type": "Map<string, FunctionMetadata>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 21,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 5,
          "codeToCommentRatio": 2.2,
          "halsteadVolume": 348.06,
          "halsteadDifficulty": 4.02,
          "maintainabilityIndex": 70.36
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b5bcb4a4-b598-59e4-8817-f68d957dac0f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c5c3e22fb3c5df91c43183391b7f440165f8f5cea4c9ca8f35682f8a7a525af4",
        "contentId": "70c46e67aa70e25d5ab60224d74ba43ffa0de952569a1a759b5128bb48142251",
        "name": "truncateString",
        "displayName": "truncateString",
        "signature": "truncateString(str: string, maxLength: number): string",
        "signatureHash": "08c5da7c667e2d082849f64c4f7ea90d4e6143b49425044e03e808b93acb2843",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 51,
        "endLine": 54,
        "startColumn": 0,
        "endColumn": 167,
        "astHash": "159e50fc60ca6e49",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Truncate string to specified length with ellipsis\n */\nexport function truncateString(str: string, maxLength: number): string {\n  if (str.length <= maxLength) return str;\n  return str.substring(0, maxLength - 3) + '...';\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "str",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "maxLength",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 76.15,
          "halsteadDifficulty": 3.89,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a4adf278-5e9c-5b13-ab18-cc42e04a9fc6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "99b5e1016173d276c10870182b5345348872d1e570b78256ab5c3ccc24ef2aa5",
        "contentId": "dc89cad5bf6c347acb4c128cba80aad91cc9bea51e6d758b79efab77b051ec40",
        "name": "detectCallbackRegistrations",
        "displayName": "CommanderCallbackAnalyzer.detectCallbackRegistrations",
        "signature": "protected async CommanderCallbackAnalyzer.detectCallbackRegistrations(context: AnalysisContext): Promise<CallbackRegistration[]>",
        "signatureHash": "ce551155351a35be6799a0a43cead21ff42c94369b94b90cd34aaa028aacaf3d",
        "filePath": "/src/analyzers/callback-registration/analyzers/commander-analyzer.ts",
        "fileHash": "d9553eece91fea63735f26389d5ff88e",
        "startLine": 53,
        "endLine": 69,
        "startColumn": 2,
        "endColumn": 685,
        "astHash": "20e94a20c99230ef",
        "contextPath": [
          "CommanderCallbackAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Detect callback registration patterns (.action(), .hook(), etc.)\n   */\n  protected async detectCallbackRegistrations(context: AnalysisContext): Promise<CallbackRegistration[]> {\n    const registrations: CallbackRegistration[] = [];\n    const sourceFile = context.sourceFile;\n    const registrationMethods = context.frameworkConfig.registrationMethods;\n\n    // Find all call expressions in the file\n    const callExpressions = sourceFile.getDescendantsOfKind(SyntaxKind.CallExpression);\n    \n    for (const callExpression of callExpressions) {\n      const registration = this.analyzeCallExpression(callExpression, context, registrationMethods);\n      if (registration) {\n        registrations.push(registration);\n      }\n    }\n\n    return registrations;\n  }",
        "sourceFileRefId": "dafab30f-a0a5-412d-9cea-01b870d16598",
        "parameters": [
          {
            "name": "context",
            "type": "AnalysisContext",
            "typeSimple": "AnalysisContext",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 22,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 3.25,
          "halsteadVolume": 196.21,
          "halsteadDifficulty": 1.7,
          "maintainabilityIndex": 70.76
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "8fc38f17-29b5-5939-8a32-9ec01125f38d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "37916a50d36d58c4dddd934b5375fdfb17601ce23fd31205b4bbf3aed6315919",
        "contentId": "9a41e33a2ac54a56760c5b32143db9395b273181b182d69631b35298cda03ded",
        "name": "success",
        "displayName": "Logger.success",
        "signature": "public Logger.success(message: string, details?: LogDetails): void",
        "signatureHash": "5fa0d7309d8056d55b67dec189d52739d3e6c0eff833894b7901598099a29806",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 53,
        "endLine": 59,
        "startColumn": 2,
        "endColumn": 242,
        "astHash": "94740aeac3fbbf59",
        "contextPath": [
          "Logger"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "success(message: string, details?: LogDetails): void {\n    if (this.quiet) return;\n    console.log(chalk.green('‚úÖ Success:'), message);\n    if (this.verbose && details) {\n      console.log(chalk.gray(this.formatDetails(details)));\n    }\n  }",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "details",
            "type": "LogDetails",
            "typeSimple": "LogDetails",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 9,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 159.91,
          "halsteadDifficulty": 2.12,
          "maintainabilityIndex": 86.53
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a2c6165b-2ced-5f22-9d79-48927872cece",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2723df64c07878bdbebbafadcc815160a0e00a488aa2a2e99e96a15dc2efef60",
        "contentId": "c4a51ca62fd80a0d4c483192778f5391d0f9fda85d19afc0acd67ef1e5825981",
        "name": "setTypeDefinitions",
        "displayName": "TypeDependencyAnalyzer.setTypeDefinitions",
        "signature": "public TypeDependencyAnalyzer.setTypeDefinitions(typeDefinitions: TypeDefinition[]): void",
        "signatureHash": "96e2bfb2c6b54fd5619d0d84d4f527fc7014cc38da54b408af883a9189a876ce",
        "filePath": "/src/analyzers/type-dependency-analyzer.ts",
        "fileHash": "e9557ede2981b324a2c27dec6ed36039",
        "startLine": 54,
        "endLine": 61,
        "startColumn": 2,
        "endColumn": 300,
        "astHash": "f6e4a0546d973dca",
        "contextPath": [
          "TypeDependencyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Set the type definitions context for dependency analysis\n   */\n  setTypeDefinitions(typeDefinitions: TypeDefinition[]): void {\n    this.typeDefinitions.clear();\n    this.typeDefinitionsById.clear();\n    typeDefinitions.forEach(typeDef => {\n      this.typeDefinitions.set(typeDef.name, typeDef);\n      this.typeDefinitionsById.set(typeDef.id, typeDef);\n    });\n  }",
        "sourceFileRefId": "4c50873c-9d83-4ace-a247-7f10f41fe5c4",
        "parameters": [
          {
            "name": "typeDefinitions",
            "type": "TypeDefinition[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 167.59,
          "halsteadDifficulty": 1.67,
          "maintainabilityIndex": 83.75
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1fcb27a9-083e-5e4a-a5ad-6c56be526ae8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "74967d8d5a1b452b96df0df4bff05bd7009d0bd086e317873e81aca043dd915a",
        "contentId": "1e40ae2454721cab4968945a6fef0fc42eb19cc0d3d3acc44975c74af62aeb06",
        "name": "getMetricsBatch",
        "displayName": "MetricsOperations.getMetricsBatch",
        "signature": "public async MetricsOperations.getMetricsBatch(functionIds: string[]): Promise<Map<string, QualityMetrics>>",
        "signatureHash": "0566e0ad298a7382a832690a729a23e2d62268bd0fa3a3fbfc35bacd92d92711",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 54,
        "endLine": 82,
        "startColumn": 2,
        "endColumn": 930,
        "astHash": "749b939ba5678600",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get metrics for multiple functions\r\n   */\r\n  async getMetricsBatch(functionIds: string[]): Promise<Map<string, QualityMetrics>> {\r\n    if (functionIds.length === 0) {\r\n      return new Map();\r\n    }\r\n\r\n    try {\r\n      // Use ANY for efficient batch query\r\n      const result = await this.db.query(\r\n        'SELECT * FROM quality_metrics WHERE function_id = ANY($1)',\r\n        [functionIds]\r\n      );\r\n\r\n      const metricsMap = new Map<string, QualityMetrics>();\r\n      for (const row of result.rows) {\r\n        const metrics = this.mapRowToMetrics(row as MetricsRow);\r\n        if (metrics) {\r\n          metricsMap.set((row as MetricsRow).function_id, metrics);\r\n        }\r\n      }\r\n\r\n      return metricsMap;\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get metrics batch: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "functionIds",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 25,
          "totalLines": 34,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 3,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 4,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 6.25,
          "halsteadVolume": 335.77,
          "halsteadDifficulty": 3.33,
          "maintainabilityIndex": 50.52
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0227ea0d-19d9-5062-b1d0-cc6b7fbd9830",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "606ea895f29077802bfd7904bd79485ceaa6c6aa2eb1e429792c28f0bf56e2e6",
        "contentId": "18be7a5e0d91ea0c8b929a04f4acd5c9ac676afa24c260508850cbe415436b1e",
        "name": "analyzeTypeCoverage",
        "displayName": "CoverageAnalyzer.analyzeTypeCoverage",
        "signature": "public async CoverageAnalyzer.analyzeTypeCoverage(typeId: string, snapshotId: string, options: CoverageAnalysisOptions = {}): Promise<TypeCoverageAnalysis | null>",
        "signatureHash": "beef0944d34d707a2a0b179c031934f1525c668d839dd4b7d4ead76270ea0548",
        "filePath": "/src/analyzers/type-insights/coverage-analyzer.ts",
        "fileHash": "3f904041bdb6cb35ea26720758870439",
        "startLine": 55,
        "endLine": 192,
        "startColumn": 2,
        "endColumn": 4307,
        "astHash": "d442a9305543be0e",
        "contextPath": [
          "CoverageAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze property coverage for a specific type\n   */\n  async analyzeTypeCoverage(\n    typeId: string,\n    snapshotId: string,\n    options: CoverageAnalysisOptions = {}\n  ): Promise<TypeCoverageAnalysis | null> {\n    const {\n      hotThreshold = 5,\n      writeHubThreshold = 3,\n      includePrivateProperties = false\n    } = options;\n\n    // Get type definition\n    const typeResult = await this.storage.query(\n      `SELECT * FROM type_definitions WHERE id = $1 AND snapshot_id = $2`,\n      [typeId, snapshotId]\n    );\n\n    if (typeResult.rows.length === 0) {\n      return null;\n    }\n\n    const type = typeResult.rows[0] as TypeDefinitionRow;\n\n    // Get all properties for this type\n    let propertyQuery = `\n      SELECT name FROM type_members \n      WHERE type_id = $1 AND snapshot_id = $2 \n      AND member_kind IN ('property', 'getter', 'setter')\n    `;\n    const propertyParams = [typeId, snapshotId];\n\n    if (!includePrivateProperties) {\n      propertyQuery += ` AND (access_modifier IS NULL OR access_modifier != 'private')`;\n    }\n\n    const propertiesResult = await this.storage.query(propertyQuery, propertyParams);\n    const allProperties = new Set(propertiesResult.rows.map((row) => (row as PropertyNameRow).name));\n\n    // Get property usage statistics\n    const usageResult = await this.storage.query(`\n      SELECT \n        accessed_property,\n        access_type,\n        function_id,\n        COUNT(*) as usage_count\n      FROM parameter_property_usage \n      WHERE parameter_type_id = $1 AND snapshot_id = $2\n      GROUP BY accessed_property, access_type, function_id\n      ORDER BY accessed_property, access_type\n    `, [typeId, snapshotId]);\n\n    // Process usage data\n    const propertyUsageMap = new Map<string, PropertyUsageStats>();\n    const usedProperties = new Set<string>();\n\n    for (const row of usageResult.rows) {\n      const { accessed_property, access_type, function_id, usage_count } = row as PropertyUsageRow;\n      if (!accessed_property) continue;\n      const count = typeof usage_count === 'number'\n        ? usage_count\n        : Number(usage_count);\n\n      usedProperties.add(accessed_property);\n\n      if (!propertyUsageMap.has(accessed_property)) {\n        propertyUsageMap.set(accessed_property, {\n          property: accessed_property,\n          totalCalls: 0,\n          readerCount: 0,\n          writerCount: 0,\n          modifierCount: 0,\n          passCount: 0,\n          callerFunctions: new Set(),\n          writerFunctions: new Set(),\n          isWriteHub: false\n        });\n      }\n\n      const stats = propertyUsageMap.get(accessed_property)!;\n      stats.totalCalls += count;\n      stats.callerFunctions.add(function_id);\n\n      switch (access_type) {\n        case 'read':\n          stats.readerCount += count;\n          break;\n        case 'write':\n          stats.writerCount += count;\n          stats.writerFunctions.add(function_id);\n          break;\n        case 'modify':\n          stats.modifierCount += count;\n          stats.writerFunctions.add(function_id);\n          break;\n        case 'pass':\n          stats.passCount += count;\n          break;\n      }\n    }\n\n    // Identify patterns\n    const usageStats = Array.from(propertyUsageMap.values());\n    const hotProperties = usageStats\n      .filter(stats => stats.totalCalls >= hotThreshold)\n      .sort((a, b) => b.totalCalls - a.totalCalls);\n\n    const coldProperties = Array.from(allProperties)\n      .filter(prop => !usedProperties.has(prop as string));\n\n    const writeHubs = usageStats\n      .filter(stats => stats.writerFunctions.size >= writeHubThreshold)\n      .map(stats => ({ ...stats, isWriteHub: true }))\n      .sort((a, b) => b.writerFunctions.size - a.writerFunctions.size);\n\n    const readOnlyCandidates = usageStats\n      .filter(stats => stats.writerCount === 0 && stats.readerCount > 0)\n      .sort((a, b) => b.readerCount - a.readerCount);\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(\n      coldProperties as string[],\n      writeHubs,\n      readOnlyCandidates,\n      hotProperties\n    );\n\n    return {\n      typeId,\n      typeName: type.name,\n      totalProperties: allProperties.size,\n      usedProperties: usedProperties.size,\n      hotProperties,\n      coldProperties: coldProperties as string[],\n      writeHubs,\n      readOnlyCandidates,\n      recommendations\n    };\n  }",
        "sourceFileRefId": "a6e42406-f754-4faf-a55a-445a06291c7a",
        "parameters": [
          {
            "name": "typeId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "CoverageAnalysisOptions",
            "typeSimple": "CoverageAnalysisOptions",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 113,
          "totalLines": 143,
          "cyclomaticComplexity": 12,
          "cognitiveComplexity": 12,
          "maxNestingLevel": 2,
          "parameterCount": 3,
          "returnStatementCount": 2,
          "branchCount": 6,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 3,
          "callbackCount": 9,
          "commentLines": 9,
          "codeToCommentRatio": 12.56,
          "halsteadVolume": 2407.38,
          "halsteadDifficulty": 12.6,
          "maintainabilityIndex": 0
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d1143833-cac9-5f1d-ad2f-c92b06ab3344",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bf9d852358df34cfad85e60d3c94cf58d7812d816a453d833164846cda8da4fc",
        "contentId": "56368bf096e76b200e35bf00289b8aa1a126efc2c81ae585a9a803466aebbf52",
        "name": "setSimilarityThreshold",
        "displayName": "PropertyClusteringAnalyzer.setSimilarityThreshold",
        "signature": "public PropertyClusteringAnalyzer.setSimilarityThreshold(threshold: number): void",
        "signatureHash": "bf20de2b82fd7e7e91a14ace3fc63736731231089bb441de6c8f8669c9f496a1",
        "filePath": "/src/analyzers/type-insights/property-clustering.ts",
        "fileHash": "f7996eb9f71334e448377adca30eebcf",
        "startLine": 57,
        "endLine": 61,
        "startColumn": 2,
        "endColumn": 193,
        "astHash": "08ef81c116b217a4",
        "contextPath": [
          "PropertyClusteringAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Set similarity threshold for clustering\n   */\n  setSimilarityThreshold(threshold: number): void {\n    // 0„Äú1„Å´„ÇØ„É©„É≥„Éó\n    if (!Number.isFinite(threshold)) threshold = 0.7;\n    this.similarityThreshold = Math.max(0, Math.min(1, threshold));\n  }",
        "sourceFileRefId": "54e91b79-8e45-4877-b3f8-956036f629df",
        "parameters": [
          {
            "name": "threshold",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1,
          "halsteadVolume": 116.76,
          "halsteadDifficulty": 2.57,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c1ddf8d1-cef0-50da-9edb-b26c2015f567",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4ae05ddaa42f3e8e1d1320ee3b48c996bcc8c354941e9acd7656d90942389b84",
        "contentId": "b469e67de7295d4d4281f7d4615fc2835b502b060f6bcbe11fd8ee6546992eda",
        "name": "constructor",
        "displayName": "CacheAware.constructor",
        "signature": "public CacheAware(functionCache?: FunctionCacheProvider, genericCacheFactory?: <T>(name: string) => CacheProvider<T>)",
        "signatureHash": "cc534cf935e5ce8545938060d1e5f6763f611528a16c7d9291d3c5e8649b7ee9",
        "filePath": "/src/utils/cache-injection.ts",
        "fileHash": "5e9ffcc49eea529001f8e2daf7a02531",
        "startLine": 58,
        "endLine": 64,
        "startColumn": 2,
        "endColumn": 336,
        "astHash": "0e5845f349cd99f1",
        "contextPath": [
          "CacheAware"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(\n    functionCache?: FunctionCacheProvider,\n    genericCacheFactory?: <T>(name: string) => CacheProvider<T>\n  ) {\n    this.functionCache = functionCache || CacheServiceLocator.getFunctionCache();\n    this.genericCacheFactory = genericCacheFactory || (<T>(name: string) => CacheServiceLocator.getGenericCache<T>(name));\n  }",
        "sourceFileRefId": "04ff45d3-0038-4448-8f6d-3ccc7c50c4e6",
        "parameters": [
          {
            "name": "functionCache",
            "type": "FunctionCacheProvider",
            "typeSimple": "FunctionCacheProvider",
            "position": 0,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "genericCacheFactory",
            "type": "<T>(name: string) => CacheProvider<T>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 9,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 121.11,
          "halsteadDifficulty": 3.82,
          "maintainabilityIndex": 88.85
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0491f6e0-aeb5-54ff-9e07-f2cdcc2de058",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "853ff0dba95a822bc48134a501ec8f4b82a8a6f82dd558e722cad42654a3cce3",
        "contentId": "2ca40dd5c917e869c13b080bf6eeb1620e362cf867d5b3a62d636abf8653d69c",
        "name": "isValidEdgeId",
        "displayName": "isValidEdgeId",
        "signature": "isValidEdgeId(edgeId: string): boolean",
        "signatureHash": "afddd5686da0fd25c8917da7f12c73a450ca5b319722e387d813396013f1befa",
        "filePath": "/src/utils/edge-id-generator.ts",
        "fileHash": "207b2d7b99be3103ae0f08187690115f",
        "startLine": 58,
        "endLine": 60,
        "startColumn": 0,
        "endColumn": 103,
        "astHash": "b32cc838c1e1b109",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Validate edge ID format\n * \n * @param edgeId - Edge ID to validate\n * @returns True if the ID matches the expected format\n */\nexport function isValidEdgeId(edgeId: string): boolean {\n  return /^edge_[a-f0-9]{20}$/.test(edgeId);\n}",
        "sourceFileRefId": "33a8d5fe-0a46-48f0-ab13-63247109774f",
        "parameters": [
          {
            "name": "edgeId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 0.5,
          "halsteadVolume": 22.46,
          "halsteadDifficulty": 1.2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b9eabbac-f039-5e13-8405-55f1910f920e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0d45f232ec4bc2a6805055703e525a1841d8369d3d15b01c95d9013bde89f06a",
        "contentId": "2b7980019c8246025036120c0a7b62184b3fbfcb6c90dbc44c10264df1aaa254",
        "name": "pluralize",
        "displayName": "pluralize",
        "signature": "pluralize(count: number, singular: string, plural?: string): string",
        "signatureHash": "482247f607a880f9efc36845af12ed3b9f6be1a95fa9f23ef6aaa5c3266005a1",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 59,
        "endLine": 62,
        "startColumn": 0,
        "endColumn": 158,
        "astHash": "0bc1247f8a7754b4",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Pluralize a word based on count\n */\nexport function pluralize(count: number, singular: string, plural?: string): string {\n  if (count === 1) return singular;\n  return plural || singular + 's';\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "count",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "singular",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "plural",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 3,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 41.21,
          "halsteadDifficulty": 2.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d336197b-1dff-5983-9bdf-01dfa4d59562",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f8c16cbdec89663f41bb8ef4cf2e016f4fd48dc7d9f107f3c132e53295309b30",
        "contentId": "73a2d98d2206fa2124a2c3ab7135e5e83685f3388995ce1d73a8d636e17c8a74",
        "name": "formatFunctionStats",
        "displayName": "formatFunctionStats",
        "signature": "formatFunctionStats(stats: ReturnType<typeof calculateFunctionStats>): string",
        "signatureHash": "367572a74aec44e21352796b06bc078e6eb9b488dc919fc45413e94cc1112378",
        "filePath": "/src/utils/function-utils.ts",
        "fileHash": "77f21daaeaef444d6206767ae97d10b1",
        "startLine": 60,
        "endLine": 67,
        "startColumn": 0,
        "endColumn": 290,
        "astHash": "0638cbaa412e26a9",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format function statistics for display\n * \n * @param stats Statistics object from calculateFunctionStats\n * @returns Formatted string suitable for console output\n */\nexport function formatFunctionStats(stats: ReturnType<typeof calculateFunctionStats>): string {\n  return [\n    `Functions: ${stats.totalFunctions}`,\n    `Files: ${stats.uniqueFiles}`,\n    `Exported: ${stats.exportedFunctions}`,\n    `Avg LOC: ${stats.averageLinesOfCode}`,\n  ].join(' | ');\n}",
        "sourceFileRefId": "07eee011-af8f-4e91-bfc5-20fac6a86e7c",
        "parameters": [
          {
            "name": "stats",
            "type": "ReturnType<typeof calculateFunctionStats>",
            "typeSimple": "ReturnType<typeof calculateFunctionStats>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 77.71,
          "halsteadDifficulty": 1.36,
          "maintainabilityIndex": 89.51
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "23355d76-a34b-503a-8c45-cd432b08293e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6811ec8ff67673ec9e9376d0f995242e122b6034456b2c0554ef45511a4e0d5d",
        "contentId": "6140fcfc5efcaf559b0cab1c04decc501c22ecd02f351cc93291973a6585a430",
        "name": "analyzeDependencyRisk",
        "displayName": "DependencyRiskAnalyzer.analyzeDependencyRisk",
        "signature": "public async DependencyRiskAnalyzer.analyzeDependencyRisk(typeId: string, snapshotId: string): Promise<DependencyRiskAnalysis | null>",
        "signatureHash": "70760485b36f253a17182953d7abc6bcbe9163215f5ff02ec05d61f0a66937d7",
        "filePath": "/src/analyzers/type-insights/dependency-risk.ts",
        "fileHash": "63ed40f5838bb60b46eccfeaa4ce2ce6",
        "startLine": 62,
        "endLine": 107,
        "startColumn": 2,
        "endColumn": 1215,
        "astHash": "9288e7543f13d474",
        "contextPath": [
          "DependencyRiskAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze dependency risk for a specific type\n   */\n  async analyzeDependencyRisk(\n    typeId: string,\n    snapshotId: string\n  ): Promise<DependencyRiskAnalysis | null> {\n    // Get type definition\n    const typeResult = await this.storage.query(\n      `SELECT * FROM type_definitions WHERE id = $1 AND snapshot_id = $2`,\n      [typeId, snapshotId]\n    );\n\n    if (typeResult.rows.length === 0) {\n      return null;\n    }\n\n    const type = typeResult.rows[0] as TypeDefinitionRow;\n\n    // Analyze dependencies\n    const dependencyInfo = await this.analyzeDependencies(typeId, snapshotId, type.name);\n\n    // Analyze churn (change frequency)\n    const churn = await this.analyzeChurn(type.name, typeId, snapshotId);\n\n    // Calculate risk factors\n    const riskFactors = this.calculateRiskFactors(dependencyInfo, churn);\n\n    // Estimate impact radius\n    const impactRadius = await this.calculateImpactRadius(typeId, snapshotId);\n\n    // Generate recommendations\n    const recommendations = this.generateRiskRecommendations(\n      dependencyInfo,\n      churn,\n      riskFactors,\n      impactRadius\n    );\n\n    return {\n      typeId,\n      typeName: type.name,\n      dependencyInfo,\n      churn,\n      riskFactors,\n      impactRadius,\n      recommendations\n    };\n  }",
        "sourceFileRefId": "7bbc26e7-2833-43d2-b002-0f271371388b",
        "parameters": [
          {
            "name": "typeId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 32,
          "totalLines": 51,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 4,
          "callbackCount": 0,
          "commentLines": 9,
          "codeToCommentRatio": 3.56,
          "halsteadVolume": 423.93,
          "halsteadDifficulty": 3.81,
          "maintainabilityIndex": 44.16
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6369309e-eb7a-56a0-8672-cbc18f380deb",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "04e3b17e717961018225dc24dae3c687ea95efe6dd07e6bdddd02f62ca78afe0",
        "contentId": "5e6ed6b2427eb326f719ac8f476c93bef811299da358b30f0f51475aca40454b",
        "name": "loadExistingAnalysisResults",
        "displayName": "loadExistingAnalysisResults",
        "signature": "async loadExistingAnalysisResults(env: CommandEnvironment, snapshotId: string): Promise<void>",
        "signatureHash": "ac86bd78930fde2217cd26097890f3b0572e901758ebb09e2c5323bb9ae8b6e3",
        "filePath": "/src/utils/scan-shared-data-helpers.ts",
        "fileHash": "fb3c12746438ae96073d4c84272ca4d0",
        "startLine": 63,
        "endLine": 139,
        "startColumn": 0,
        "endColumn": 2960,
        "astHash": "49e8b989e6c05c09",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Load existing analysis results from database and populate shared data\n */\nexport async function loadExistingAnalysisResults(\n  env: CommandEnvironment,\n  snapshotId: string\n): Promise<void> {\n  await ensureScanSharedData(env, snapshotId);\n  \n  const sharedData = env.scanSharedData!;\n\n  // Load functions if not already loaded\n  if (sharedData.functions.length === 0) {\n    sharedData.functions = await env.storage.findFunctionsInSnapshot(snapshotId);\n    \n    if (sharedData.functions.length > 0) {\n      // Create basic analysis result from loaded functions\n      sharedData.basicResults = {\n        // functions now stored in ScanSharedData.functions\n        functionsAnalyzed: sharedData.functions.length,\n        errors: [],\n        batchStats: {\n          totalBatches: 1,\n          functionsPerBatch: [sharedData.functions.length],\n          processingTimes: [0]\n        }\n      };\n    }\n  }\n\n  // Load call graph results if available\n  try {\n    const callEdges = await env.storage.getCallEdgesBySnapshot(snapshotId);\n    const internalCallEdges = await env.storage.getInternalCallEdgesBySnapshot(snapshotId);\n    \n    if (callEdges.length > 0 || internalCallEdges.length > 0) {\n      // Build dependency map\n      const dependencyMap = new Map<string, {callers: string[], callees: string[], depth: number}>();\n      \n      for (const edge of callEdges) {\n        if (edge.callerFunctionId && edge.calleeFunctionId) {\n          // Add to callee's callers\n          if (!dependencyMap.has(edge.calleeFunctionId)) {\n            dependencyMap.set(edge.calleeFunctionId, {callers: [], callees: [], depth: 0});\n          }\n          dependencyMap.get(edge.calleeFunctionId)!.callers.push(edge.callerFunctionId);\n          \n          // Add to caller's callees\n          if (!dependencyMap.has(edge.callerFunctionId)) {\n            dependencyMap.set(edge.callerFunctionId, {callers: [], callees: [], depth: 0});\n          }\n          dependencyMap.get(edge.callerFunctionId)!.callees.push(edge.calleeFunctionId);\n        }\n      }\n      \n      const highConfidenceEdges = callEdges.filter(e => e.confidenceScore && e.confidenceScore >= 0.95).length;\n      const mediumConfidenceEdges = callEdges.filter(e => e.confidenceScore && e.confidenceScore >= 0.7 && e.confidenceScore < 0.95).length;\n      const lowConfidenceEdges = callEdges.length - highConfidenceEdges - mediumConfidenceEdges;\n\n      sharedData.callGraphResults = {\n        callEdges,\n        internalCallEdges,\n        dependencyMap: Object.fromEntries(dependencyMap),\n        stats: {\n          totalEdges: callEdges.length,\n          highConfidenceEdges,\n          mediumConfidenceEdges,\n          lowConfidenceEdges,\n          analysisTime: 0\n        }\n      };\n    }\n  } catch (error) {\n    // Call graph data not available - this is okay for some scenarios\n    env.commandLogger.debug(`Call graph data not available for snapshot ${snapshotId}: ${error}`);\n  }\n\n  // TODO: Load type system results when implemented\n  // TODO: Load coupling results when implemented\n}",
        "sourceFileRefId": "9ee3e01b-3105-4ef6-9cbf-834aa13b52cf",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 57,
          "totalLines": 82,
          "cyclomaticComplexity": 14,
          "cognitiveComplexity": 14,
          "maxNestingLevel": 5,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 6,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 4,
          "callbackCount": 2,
          "commentLines": 13,
          "codeToCommentRatio": 4.38,
          "halsteadVolume": 1649.45,
          "halsteadDifficulty": 14.81,
          "maintainabilityIndex": 17.71
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "906feea7-8c1d-5af4-919e-512f591661de",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "579acab52356be639b196535f505abcc465b1a700f3aa56584dcf0c6bb2c3760",
        "contentId": "bda8675d5b5e94c4245f81e9893c5c77249211f4817d35ed672668a4118e8f12",
        "name": "init",
        "displayName": "PGliteDriver.init",
        "signature": "public async PGliteDriver.init(): Promise<void>",
        "signatureHash": "7e6138426765968ef2f126bedd2d19c56b02af33c114062c3c1612d134eb99c9",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 64,
        "endLine": 66,
        "startColumn": 2,
        "endColumn": 67,
        "astHash": "5ca36b0cb92dfc67",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async init(): Promise<void> {\r\n    // PGlite„ÅØÊó¢„Å´ÂàùÊúüÂåñÊ∏à„Åø„Å™„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„ÅÑ\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 2,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f5308976-b60d-5360-aa04-2ebf70644d1f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ebd3ddca5514cbc40de9dc2c91ced1b6421a0453f322a4d9f48284b6d04f37e5",
        "contentId": "d5133ae2c8cafc088eaf667f38f526ab3ccff7b60a066898c7543d126ec0a473",
        "name": "analyzeApiOptimization",
        "displayName": "ApiOptimizer.analyzeApiOptimization",
        "signature": "public async ApiOptimizer.analyzeApiOptimization(typeId: string, snapshotId: string): Promise<ApiOptimizationAnalysis | null>",
        "signatureHash": "b7a512df9e251af0ecc1f7c08a6a16266f37c0e39fa2a1307bfa012905f005c7",
        "filePath": "/src/analyzers/type-insights/api-optimizer.ts",
        "fileHash": "32ae16bf79df54f328b96194b744a7b9",
        "startLine": 64,
        "endLine": 123,
        "startColumn": 2,
        "endColumn": 1686,
        "astHash": "e7714e08a928bc6a",
        "contextPath": [
          "ApiOptimizer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze API optimization opportunities\n   */\n  async analyzeApiOptimization(\n    typeId: string,\n    snapshotId: string\n  ): Promise<ApiOptimizationAnalysis | null> {\n    // Get type definition\n    const typeResult = await this.storage.query(\n      `SELECT * FROM type_definitions WHERE id = $1 AND snapshot_id = $2`,\n      [typeId, snapshotId]\n    );\n\n    if (typeResult.rows.length === 0) {\n      return null;\n    }\n\n    const type = typeResult.rows[0] as TypeDefinitionRow;\n\n    // Get all type members\n    const membersResult = await this.storage.query(`\n      SELECT * FROM type_members \n      WHERE type_id = $1 AND snapshot_id = $2\n      ORDER BY member_kind, name\n    `, [typeId, snapshotId]);\n\n    const members = membersResult.rows as TypeMemberRow[];\n\n    // Calculate surface area\n    const surfaceArea = this.calculateSurfaceArea(members);\n\n    // Analyze unused overloads\n    const unusedOverloads = await this.findUnusedOverloads(members, snapshotId);\n\n    // Analyze unused setters\n    const unusedSetters = await this.findUnusedSetters(members, typeId, snapshotId);\n\n    // Find readonly candidates\n    const readonlyCandidates = await this.findReadonlyCandidates(members, typeId, snapshotId);\n\n    // Check for excessive methods (> 20)\n    const excessiveMethods = surfaceArea.methods > 20;\n\n    // Generate recommendations\n    const recommendations = this.generateOptimizationRecommendations(\n      unusedOverloads,\n      unusedSetters,\n      readonlyCandidates,\n      excessiveMethods,\n      surfaceArea\n    );\n\n    return {\n      typeId,\n      typeName: type.name,\n      surfaceArea,\n      unusedOverloads,\n      unusedSetters,\n      readonlyCandidates,\n      excessiveMethods,\n      recommendations\n    };\n  }",
        "sourceFileRefId": "940cf273-9443-4fd1-a10b-e643c3e00982",
        "parameters": [
          {
            "name": "typeId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 41,
          "totalLines": 65,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 5,
          "callbackCount": 0,
          "commentLines": 11,
          "codeToCommentRatio": 3.73,
          "halsteadVolume": 545.94,
          "halsteadDifficulty": 4.81,
          "maintainabilityIndex": 36.47
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ba6b957c-855c-5d1f-a21a-2fbf85f33374",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0fcfd9efd6a4d4acc5df033da6ac8de8d57220f5419c576cfa6ea12c797ba386",
        "contentId": "9aa1c4ad19a43aea3109f02772191b01692561344aa2eba495686e88f7cf729d",
        "name": "createVectorizeConfirmationMessage",
        "displayName": "ConfirmationHandler.createVectorizeConfirmationMessage",
        "signature": "public ConfirmationHandler.createVectorizeConfirmationMessage(operation: string, functionCount?: number, estimatedCost?: number): string",
        "signatureHash": "ba1dc177492982163b7404762cf9305a4a44154221b98be5c3ff9c378a89afb5",
        "filePath": "/src/use-cases/confirmation-handler.ts",
        "fileHash": "a281ace6731b7251e7589ad274a7c0c0",
        "startLine": 65,
        "endLine": 83,
        "startColumn": 2,
        "endColumn": 486,
        "astHash": "801d3aeadf922e35",
        "contextPath": [
          "ConfirmationHandler"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Create confirmation message for vectorize operations\n   */\n  createVectorizeConfirmationMessage(\n    operation: string,\n    functionCount?: number,\n    estimatedCost?: number\n  ): string {\n    let message = `‚ö†Ô∏è  ${operation}`;\n\n    if (functionCount !== undefined) {\n      message += `\\nThis will process ${functionCount} functions`;\n    }\n\n    if (estimatedCost !== undefined && estimatedCost > 0) {\n      message += `\\nEstimated cost: ~$${estimatedCost.toFixed(3)}`;\n    }\n\n    message += '\\nDo you want to continue?';\n\n    return message;\n  }",
        "sourceFileRefId": "da42844b-bb6a-4722-9156-24df408f6e66",
        "parameters": [
          {
            "name": "operation",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functionCount",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "estimatedCost",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 24,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5,
          "halsteadVolume": 126.71,
          "halsteadDifficulty": 6,
          "maintainabilityIndex": 70.46
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "feaa57d3-3863-5e70-b7f7-62002426b7c6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ebd68765e7ff9fec50a8ebf1cd403ea34692a816924b922c3f044e47c1cc0eab",
        "contentId": "00c4bbe97ebd335373664ac1b7fe102d28cf1f52dbf3373179e11550ede59178",
        "name": "registerSchema",
        "displayName": "SchemaVersioning.registerSchema",
        "signature": "public async SchemaVersioning.registerSchema(schemaSet: AvroSchemaSet, description?: string): Promise<SchemaVersion>",
        "signatureHash": "f31e971cd4ac8da4af7029ee6610a6870f1b4ab24a681d82c4204d553c3c9b79",
        "filePath": "/src/storage/backup/avro/schema-versioning.ts",
        "fileHash": "6bfbaee21913fab520b88ffc82c63348",
        "startLine": 65,
        "endLine": 85,
        "startColumn": 2,
        "endColumn": 598,
        "astHash": "e0992f1a0b2fa87b",
        "contextPath": [
          "SchemaVersioning"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Register a new schema version\n   */\n  async registerSchema(schemaSet: AvroSchemaSet, description?: string): Promise<SchemaVersion> {\n    const hash = await this.calculateSchemaSetHash(schemaSet);\n    \n    // Check if this version already exists\n    if (await this.hasVersion(hash)) {\n      return await this.getVersion(hash);\n    }\n\n    const version: SchemaVersion = {\n      hash,\n      version: this.generateVersionNumber(),\n      schemas: schemaSet.schemas,\n      createdAt: new Date().toISOString(),\n      description,\n    };\n\n    await this.saveVersion(version);\n    this.versionCache.set(hash, version);\n\n    return version;\n  }",
        "sourceFileRefId": "f4159773-ea1e-45c9-9e8a-2420caae0ace",
        "parameters": [
          {
            "name": "schemaSet",
            "type": "AvroSchemaSet",
            "typeSimple": "AvroSchemaSet",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "description",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 16,
          "totalLines": 26,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 4,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4,
          "halsteadVolume": 264.4,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 63.9
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7d25a2fb-39d5-595b-a123-1adba2de5f88",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "649ce03cd04acec95c14f6a0f35e0eddf635685194609e423490fb62a77d4105",
        "contentId": "0319eaed2b6db24f81c86508418cb198eb6a02ee571ef70178adb106b08f6e99",
        "name": "setMinClusterSize",
        "displayName": "PropertyClusteringAnalyzer.setMinClusterSize",
        "signature": "public PropertyClusteringAnalyzer.setMinClusterSize(size: number): void",
        "signatureHash": "6c1ca1996b22ac3d7e92acf3db7c03c3603125f8d8a08b7eba59dc4e03410ba8",
        "filePath": "/src/analyzers/type-insights/property-clustering.ts",
        "fileHash": "f7996eb9f71334e448377adca30eebcf",
        "startLine": 66,
        "endLine": 70,
        "startColumn": 2,
        "endColumn": 158,
        "astHash": "6855a341b969400c",
        "contextPath": [
          "PropertyClusteringAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Set minimum cluster size\n   */\n  setMinClusterSize(size: number): void {\n    // 1‰ª•‰∏ä„Çí‰øùË®º\n    if (!Number.isFinite(size)) size = 2;\n    this.minClusterSize = Math.max(1, Math.floor(size));\n  }",
        "sourceFileRefId": "54e91b79-8e45-4877-b3f8-956036f629df",
        "parameters": [
          {
            "name": "size",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1,
          "halsteadVolume": 110.36,
          "halsteadDifficulty": 2.62,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f7473176-448a-5407-b0b4-dce6dacd212b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fd22eaf4f4a53a42a1bfd135fb55b508bf51bb203c9b48d9eeaff6f05db9885d",
        "contentId": "cd2c693e6c45f59862d50727cccad52609d674ab55bd186c0d214f52aee76819",
        "name": "analyzeDependencies",
        "displayName": "TypeDependencyAnalyzer.analyzeDependencies",
        "signature": "public TypeDependencyAnalyzer.analyzeDependencies(filePath: string, snapshotId: string): TypeDependency[]",
        "signatureHash": "753eacacaad2fe830355984ddd38bcfb002b2987c35df8a0b8540270cebd283f",
        "filePath": "/src/analyzers/type-dependency-analyzer.ts",
        "fileHash": "e9557ede2981b324a2c27dec6ed36039",
        "startLine": 66,
        "endLine": 90,
        "startColumn": 2,
        "endColumn": 864,
        "astHash": "d89517be26849901",
        "contextPath": [
          "TypeDependencyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze type dependencies in a source file\n   */\n  analyzeDependencies(filePath: string, snapshotId: string): TypeDependency[] {\n    const sourceFile = this.project.getSourceFile(filePath);\n    if (!sourceFile) {\n      throw new Error(`Source file not found: ${filePath}`);\n    }\n\n    const dependencies: TypeDependency[] = [];\n\n    // Analyze interfaces\n    sourceFile.getInterfaces().forEach(interfaceDecl => {\n      dependencies.push(...this.analyzeInterfaceDependencies(interfaceDecl, snapshotId, filePath));\n    });\n\n    // Analyze type aliases\n    sourceFile.getTypeAliases().forEach(typeAlias => {\n      dependencies.push(...this.analyzeTypeAliasDependencies(typeAlias, snapshotId, filePath));\n    });\n\n    // Analyze classes\n    sourceFile.getClasses().forEach(classDecl => {\n      dependencies.push(...this.analyzeClassDependencies(classDecl, snapshotId, filePath));\n    });\n\n    return dependencies;\n  }",
        "sourceFileRefId": "4c50873c-9d83-4ace-a247-7f10f41fe5c4",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 30,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 6,
          "codeToCommentRatio": 2.83,
          "halsteadVolume": 432.43,
          "halsteadDifficulty": 2.76,
          "maintainabilityIndex": 58.79
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "92291027-8830-5ae5-9b9d-7dd8b46acb5e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "493a5a779cca470e810953559104a25dc2393be4446aee9a0dd90c9a18d6605a",
        "contentId": "d3d31b9b4b6a7851d1dcb1522ae9fe3b71f419812bffb82f04fc29ce51417b40",
        "name": "constructor",
        "displayName": "TypeAnalyzer.constructor",
        "signature": "public TypeAnalyzer(private project: Project)",
        "signatureHash": "6cd18360a0c325fbe1f3fdfc95aa6bf253cc01b7f545052441656039cfaed975",
        "filePath": "/src/analyzers/type-analyzer.ts",
        "fileHash": "5e5c2c7d89ad8630994a47040d7774e9",
        "startLine": 66,
        "endLine": 68,
        "startColumn": 2,
        "endColumn": 96,
        "astHash": "14775e7c81743ead",
        "contextPath": [
          "TypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(private project: Project) {\n    this.astMetrics = new ASTTypeMetrics(project);\n  }",
        "sourceFileRefId": "a23a5da6-c06e-484d-821c-ccaed55bed7e",
        "parameters": [
          {
            "name": "project",
            "type": "Project",
            "typeSimple": "Project",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2acce8ed-432f-557c-8325-768766e9d4e0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0641de1363f3abcbce81f67024886c4fd0d2facfb73c3c7192e3dab0f720daf9",
        "contentId": "1009925c5ba185618df5bfd949a89e2727162ca214c6ea93884d3b2d2512e247",
        "name": "formatFilePath",
        "displayName": "formatFilePath",
        "signature": "formatFilePath(filePath: string, projectRoot?: string): string",
        "signatureHash": "40a7eb56a3c0aaf77fbf4e23f6d3b89016326f6583d86a91c546533fd5298454",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 67,
        "endLine": 72,
        "startColumn": 0,
        "endColumn": 217,
        "astHash": "c41868c02b256726",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format file path for display (relative to project root)\n */\nexport function formatFilePath(filePath: string, projectRoot?: string): string {\n  if (projectRoot && filePath.startsWith(projectRoot)) {\n    return filePath.substring(projectRoot.length + 1);\n  }\n  return filePath;\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "projectRoot",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 81.41,
          "halsteadDifficulty": 3.33,
          "maintainabilityIndex": 95.43
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "83f980e6-7a78-5ac2-bd95-70eaf8d70da1",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b126dd9e7dd2bcb7d80bba12b9b63358316cc962eed25bab536152e881480263",
        "contentId": "a65fe4ff8181321743f06be7b1f44fcb8683bdf3ac0c6453591cba6ac4cf948a",
        "name": "acquireConnection",
        "displayName": "PGliteDriver.acquireConnection",
        "signature": "public async PGliteDriver.acquireConnection(): Promise<DatabaseConnection>",
        "signatureHash": "b9f65ecdcc3f0866e9f755f597d5167e537a19731c8c18603b6df185d681f258",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 68,
        "endLine": 70,
        "startColumn": 2,
        "endColumn": 111,
        "astHash": "6981e587b171facf",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async acquireConnection(): Promise<DatabaseConnection> {\r\n    return new PGliteConnection(this.#config);\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 11.61,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "68e1517e-b2e7-59b9-9a2b-e22ad3545e85",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a61eee816982b676a7abf96c918d87067971d551d97cd24cd1d618cd5437a614",
        "contentId": "e0db8635da9203a439e3d4daf75557a6f56360a2519abaec1319834f6c8e48f1",
        "name": "processInstantiationEvents",
        "displayName": "RTAAnalysisStage.processInstantiationEvents",
        "signature": "public RTAAnalysisStage.processInstantiationEvents(instantiationEvents: InstantiationEvent[]): {\r\n    classInstantiations: Map<string, InstantiationEvent[]>;\r\n    totalEvents: number;\r\n  }",
        "signatureHash": "d8a3b0b114714fb4713434e302af4d2a1218a06755469da6459c3908b85a80b2",
        "filePath": "/src/analyzers/staged-analysis/stages/rta-analysis.ts",
        "fileHash": "1c64024e3f89ea38aa7598ff26057f3d",
        "startLine": 68,
        "endLine": 88,
        "startColumn": 2,
        "endColumn": 713,
        "astHash": "85bbee2a790047b4",
        "contextPath": [
          "RTAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Collect instantiation events from AST nodes for optimization\r\n   * This method processes the instantiation events gathered during earlier stages\r\n   */\r\n  processInstantiationEvents(\r\n    instantiationEvents: InstantiationEvent[]\r\n  ): {\r\n    classInstantiations: Map<string, InstantiationEvent[]>;\r\n    totalEvents: number;\r\n  } {\r\n    const classInstantiations = new Map<string, InstantiationEvent[]>();\r\n    \r\n    for (const event of instantiationEvents) {\r\n      const existing = classInstantiations.get(event.typeName) || [];\r\n      existing.push(event);\r\n      classInstantiations.set(event.typeName, existing);\r\n    }\r\n    \r\n    this.logger.debug(`Processed ${instantiationEvents.length} instantiation events for ${classInstantiations.size} classes`);\r\n    \r\n    return {\r\n      classInstantiations,\r\n      totalEvents: instantiationEvents.length\r\n    };\r\n  }",
        "sourceFileRefId": "90f5114e-03b8-42f9-af36-0c77cb9c0003",
        "parameters": [
          {
            "name": "instantiationEvents",
            "type": "InstantiationEvent[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 27,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4.5,
          "halsteadVolume": 244.27,
          "halsteadDifficulty": 2.93,
          "maintainabilityIndex": 61.51
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3764066c-5a9a-5145-b37c-3a9579488b6b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4f51b153ff758bdad32374b4338bce4a6e3193a9ce329787f6c2cb522b223ffb",
        "contentId": "16dea4641198098e7a8b18d0b7688e3458957b47d9a93e0f3b60f20a7be9b5d7",
        "name": "logStats",
        "displayName": "SymbolCache.logStats",
        "signature": "public SymbolCache.logStats(): void",
        "signatureHash": "6acdaf30246dc92beb57cf82b58f56ecb89a00de09adce0eafb048d777ac4415",
        "filePath": "/src/utils/symbol-cache.ts",
        "fileHash": "e086fef742b0105b943596f198f356e3",
        "startLine": 69,
        "endLine": 74,
        "startColumn": 2,
        "endColumn": 239,
        "astHash": "f827db83b163fd1c",
        "contextPath": [
          "SymbolCache"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Log cache statistics\n   */\n  logStats(): void {\n    const stats = this.getStats();\n    if (stats.hits + stats.misses > 0) {\n      console.log(`   üìä Symbol cache: ${stats.hits} hits, ${stats.misses} misses (${(stats.hitRate * 100).toFixed(1)}% hit rate)`);\n    }\n  }",
        "sourceFileRefId": "f48c2b26-dffc-4c3d-b372-acd83a73d92e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 155.59,
          "halsteadDifficulty": 3.67,
          "maintainabilityIndex": 90.8
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9ae524df-2b1f-5c5a-a85e-ac198b47e875",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2714e899eb785cd53835988691aa973074e1fc6a65bd58e838b4f1fa5459b8f6",
        "contentId": "6e3c76e4a9b700d131cbceecffd6c422475819951542183e84dbaa800bffb76c",
        "name": "getCache",
        "displayName": "CacheAware.getCache",
        "signature": "protected CacheAware.getCache(name: string): CacheProvider<T>",
        "signatureHash": "08a962974ef2aa5fc71136a6e74711d33709aef79825a08522a404ee6ab6d0bd",
        "filePath": "/src/utils/cache-injection.ts",
        "fileHash": "5e9ffcc49eea529001f8e2daf7a02531",
        "startLine": 69,
        "endLine": 71,
        "startColumn": 2,
        "endColumn": 107,
        "astHash": "3cf8e7cb5f5727be",
        "contextPath": [
          "CacheAware"
        ],
        "functionType": "method",
        "modifiers": [
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get a named generic cache instance\n   */\n  protected getCache<T>(name: string): CacheProvider<T> {\n    return this.genericCacheFactory<T>(name);\n  }",
        "sourceFileRefId": "04ff45d3-0038-4448-8f6d-3ccc7c50c4e6",
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 33,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b11c5c37-4271-593a-a4dc-7bb6c209b3b6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c1e7ed9f46d2eaba8b51c372287804ca877d0253a1b1141cbf230a26ebf747c4",
        "contentId": "af705085b310c88fbf60d40ef60f8396917dc952568ca264bd865855dbf4d020",
        "name": "analyze",
        "displayName": "StructuralSubsumptionAnalyzer.analyze",
        "signature": "public async StructuralSubsumptionAnalyzer.analyze(snapshotId?: string): Promise<CrossTypePattern[]>",
        "signatureHash": "e087248f387ba3cf96079625ae5bc1dd79999bf7e182595646355ae990630fa5",
        "filePath": "/src/analyzers/type-insights/structural-subsumption-analyzer.ts",
        "fileHash": "99a4696b3af6215ca8f2519df114e179",
        "startLine": 69,
        "endLine": 84,
        "startColumn": 2,
        "endColumn": 553,
        "astHash": "7c6c5e8aaaa41e8f",
        "contextPath": [
          "StructuralSubsumptionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze structural subsumption relationships between types\n   */\n  async analyze(snapshotId?: string): Promise<CrossTypePattern[]> {\n    try {\n      const types = await this.loadTypeInformation(snapshotId);\n      \n      if (types.length < 2) {\n        return [];\n      }\n\n      const relationships = await this.findSubsumptionRelationships(types);\n      const patterns = this.convertToPatterns(relationships);\n      \n      return this.filterPatterns(patterns);\n    } catch (error) {\n      throw new Error(`Failed to analyze structural subsumption: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "d4d6887a-8149-4ea9-8881-f1d90fa69020",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 21,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4.33,
          "halsteadVolume": 204.33,
          "halsteadDifficulty": 2.95,
          "maintainabilityIndex": 70.22
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "8af5e097-cbca-54df-bf3c-8cda82469d0e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "50a14b6b17610f7bfb65ba43b05b581397517ab813cb55bb2af4772eaa96489e",
        "contentId": "fbeb9a5815b031a1da41626d380d15187daefad7782878c94772a529310142b9",
        "name": "log",
        "displayName": "Logger.log",
        "signature": "public Logger.log(message: string): void",
        "signatureHash": "a1136834c9f5e0de0c560d99b04711041b6d1fc3056a58c013246c27659aec17",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 69,
        "endLine": 72,
        "startColumn": 2,
        "endColumn": 88,
        "astHash": "7f9afe41ca3e6a9d",
        "contextPath": [
          "Logger"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "log(message: string): void {\n    if (this.quiet) return;\n    console.log(message);\n  }",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 28.07,
          "halsteadDifficulty": 1.4,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "801f622c-d863-5323-ab1b-991eee0774f5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "84e1bb568043a3ba5591c6ef32c9dc132f59037c3c19208e2b00a0b05e8a7bea",
        "contentId": "1662d20768245668f74e5462248c684ab2003c7cdc61d9e0df4a869d8e078ac0",
        "name": "constructor",
        "displayName": "TypeMetricsCalculator.constructor",
        "signature": "public TypeMetricsCalculator(thresholds: Partial<TypeThresholds> & { name?: string } = {}, project?: Project)",
        "signatureHash": "673269b5d5f515e358e5c5bd14e1230a9a8f1978117885929aba4dbf7cfd140b",
        "filePath": "/src/analyzers/type-metrics-calculator.ts",
        "fileHash": "e6f170bcabfadbee57137ab72b1d475b",
        "startLine": 71,
        "endLine": 76,
        "startColumn": 2,
        "endColumn": 253,
        "astHash": "6cc87087a413e98b",
        "contextPath": [
          "TypeMetricsCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(thresholds: Partial<TypeThresholds> & { name?: string } = {}, project?: Project) {\n    this.thresholds = { ...this.defaultThresholds, ...thresholds };\n    if (project) {\n      this.ckCalculator = new CKMetricsCalculator(project);\n    }\n  }",
        "sourceFileRefId": "d2b0b789-7d39-40e1-a623-b525ec560c71",
        "parameters": [
          {
            "name": "thresholds",
            "type": "Partial<TypeThresholds> & { name?: string }",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          },
          {
            "name": "project",
            "type": "Project",
            "typeSimple": "Project",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 8,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 62.27,
          "halsteadDifficulty": 1.44,
          "maintainabilityIndex": 97.67
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d14255a4-c7ca-56af-b154-26773a0000e2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1501078bd93f1809604fe18910ad2e4f2f894ba83683c8f526a3caa682bd697d",
        "contentId": "9d925add978a70afa8343d049912a4af993af8c5c6b619a4457c5d9666b18591",
        "name": "beginTransaction",
        "displayName": "PGliteDriver.beginTransaction",
        "signature": "public async PGliteDriver.beginTransaction(connection: DatabaseConnection): Promise<void>",
        "signatureHash": "7b1f082abb11b53a50764f6cff5b5b8ce7d0124eab6faa0590beaa2fba406951",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 72,
        "endLine": 74,
        "startColumn": 2,
        "endColumn": 142,
        "astHash": "f0c8bc9f270c7d56",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async beginTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw('BEGIN'));\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [
          {
            "name": "connection",
            "type": "DatabaseConnection",
            "typeSimple": "DatabaseConnection",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 53.77,
          "halsteadDifficulty": 1.1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0fe3715f-5488-50c0-ab21-adbf259836f8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "37d7d9d532fe59097c422e598d9ff30cc9e386193a24dc0fbd20b78cee5a353c",
        "contentId": "3a3877991441140c47ee1f0a244d0510348b73d306f936615e6403cf5ef8da14",
        "name": "detectCallbackTriggers",
        "displayName": "CommanderCallbackAnalyzer.detectCallbackTriggers",
        "signature": "protected async CommanderCallbackAnalyzer.detectCallbackTriggers(context: AnalysisContext, registrations: CallbackRegistration[]): Promise<CallbackTrigger[]>",
        "signatureHash": "02bb3dbc48a16cb1299d5bedc0319d512e0dea5165c2c1b1f8e958d0b27b58be",
        "filePath": "/src/analyzers/callback-registration/analyzers/commander-analyzer.ts",
        "fileHash": "d9553eece91fea63735f26389d5ff88e",
        "startLine": 74,
        "endLine": 93,
        "startColumn": 2,
        "endColumn": 710,
        "astHash": "52b5aa65255aa616",
        "contextPath": [
          "CommanderCallbackAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Detect callback trigger patterns (.parse(), .parseAsync())\n   */\n  protected async detectCallbackTriggers(\n    context: AnalysisContext, \n    registrations: CallbackRegistration[]\n  ): Promise<CallbackTrigger[]> {\n    const triggers: CallbackTrigger[] = [];\n    const sourceFile = context.sourceFile;\n    const triggerMethods = context.frameworkConfig.triggerMethods;\n\n    // Find all call expressions that might be triggers\n    const callExpressions = sourceFile.getDescendantsOfKind(SyntaxKind.CallExpression);\n    \n    for (const callExpression of callExpressions) {\n      const trigger = this.analyzeTriggerCallExpression(callExpression, context, triggerMethods, registrations);\n      if (trigger) {\n        triggers.push(trigger);\n      }\n    }\n\n    return triggers;\n  }",
        "sourceFileRefId": "dafab30f-a0a5-412d-9cea-01b870d16598",
        "parameters": [
          {
            "name": "context",
            "type": "AnalysisContext",
            "typeSimple": "AnalysisContext",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "registrations",
            "type": "CallbackRegistration[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 16,
          "totalLines": 25,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4,
          "halsteadVolume": 215.49,
          "halsteadDifficulty": 1.68,
          "maintainabilityIndex": 65.2
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "a931c55e-424e-58a8-b262-1be085904f20",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f0031526e8a986b6c18eaa1088345c3d346befeebcceaab78e855e6cb18ccbde",
        "contentId": "63c7284cc3adae9b504580c7c9733b752afc99787ec104fc65f8c699cecb2bcd",
        "name": "analyzePropertyClustering",
        "displayName": "PropertyClusteringAnalyzer.analyzePropertyClustering",
        "signature": "public async PropertyClusteringAnalyzer.analyzePropertyClustering(typeId: string, snapshotId: string): Promise<ClusteringAnalysis | null>",
        "signatureHash": "ed3363d5d70bfd2625d1e991ad1f6d773724a5e8d27389a700143ea7191b64d4",
        "filePath": "/src/analyzers/type-insights/property-clustering.ts",
        "fileHash": "f7996eb9f71334e448377adca30eebcf",
        "startLine": 75,
        "endLine": 131,
        "startColumn": 2,
        "endColumn": 1855,
        "astHash": "f8a11463d4b9467b",
        "contextPath": [
          "PropertyClusteringAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze property clustering for a type\n   */\n  async analyzePropertyClustering(\n    typeId: string,\n    snapshotId: string\n  ): Promise<ClusteringAnalysis | null> {\n    // Get type definition\n    const typeResult = await this.storage.query(\n      `SELECT * FROM type_definitions WHERE id = $1 AND snapshot_id = $2`,\n      [typeId, snapshotId]\n    );\n\n    if (typeResult.rows.length === 0) {\n      return null;\n    }\n\n    const type = typeResult.rows[0] as TypeDefinitionRow;\n\n    // Get property co-occurrence matrix\n    const cooccurrences = await this.buildCooccurrenceMatrix(typeId, snapshotId);\n    \n    if (cooccurrences.length === 0) {\n      return {\n        typeId,\n        typeName: type.name,\n        totalProperties: 0,\n        clusters: [],\n        isolatedProperties: [],\n        clusterabilityScore: 0,\n        recommendations: ['No property usage data available for clustering']\n      };\n    }\n\n    // Perform clustering\n    const clusters = await this.performClustering(cooccurrences, typeId, snapshotId);\n\n    // Find isolated properties\n    const clusteredProperties = new Set<string>();\n    clusters.forEach(cluster => cluster.properties.forEach(prop => clusteredProperties.add(prop)));\n    \n    const allProperties = await this.getAllTypeProperties(typeId, snapshotId);\n    const isolatedProperties = allProperties.filter(prop => !clusteredProperties.has(prop));\n\n    // Calculate clusterability score\n    const clusterabilityScore = this.calculateClusterabilityScore(clusters, isolatedProperties.length, allProperties.length);\n\n    // Generate recommendations\n    const recommendations = this.generateClusteringRecommendations(clusters, isolatedProperties, clusterabilityScore);\n\n    return {\n      typeId,\n      typeName: type.name,\n      totalProperties: allProperties.length,\n      clusters,\n      isolatedProperties,\n      clusterabilityScore,\n      recommendations\n    };\n  }",
        "sourceFileRefId": "54e91b79-8e45-4877-b3f8-956036f629df",
        "parameters": [
          {
            "name": "typeId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 41,
          "totalLines": 62,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 3,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 4,
          "callbackCount": 3,
          "commentLines": 9,
          "codeToCommentRatio": 4.56,
          "halsteadVolume": 794.17,
          "halsteadDifficulty": 5.15,
          "maintainabilityIndex": 33.42
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "eb2aca7a-5060-5f2e-885d-c3444b2ba1d9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e6574c3d7c987fe2989465bfe3de1820903e542689c2fb2d114c48bbf7d20127",
        "contentId": "7310df121991b1c06302dc13dd9eaba8859e74787ca0ca021f887f09570bd0cf",
        "name": "getClearOrder",
        "displayName": "ClearCoordinator.getClearOrder",
        "signature": "public ClearCoordinator.getClearOrder(): string[]",
        "signatureHash": "b5638f52d87702f02c559fb083dc0e004c584a307ccaed8573a8c9065df0ca59",
        "filePath": "/src/utils/clear-coordinator.ts",
        "fileHash": "5f2bb83eaae3419dad1653dc0eff694e",
        "startLine": 75,
        "endLine": 77,
        "startColumn": 2,
        "endColumn": 66,
        "astHash": "2e4dad7b16d08396",
        "contextPath": [
          "ClearCoordinator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get the calculated clear order\n   */\n  getClearOrder(): string[] {\n    return [...this.clearOrder];\n  }",
        "sourceFileRefId": "4f071925-8b13-4538-a189-e09a481c659e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 4.75,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c05f8725-2add-512e-bb1f-c30217dd690f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5fe445f0401339e8473646d3012486e6f5b3bab67d2755297e35cfd249dd96b2",
        "contentId": "b35ce77bdb1c71cfb86e1630f58631b1d49afbe412ebd79a490ad355229784af",
        "name": "commitTransaction",
        "displayName": "PGliteDriver.commitTransaction",
        "signature": "public async PGliteDriver.commitTransaction(connection: DatabaseConnection): Promise<void>",
        "signatureHash": "220374c835a4c6820f583eaaad37bf872f9cf4e4314356814bbd26b11f513b81",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 76,
        "endLine": 78,
        "startColumn": 2,
        "endColumn": 144,
        "astHash": "3172932eaa8d4faf",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async commitTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw('COMMIT'));\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [
          {
            "name": "connection",
            "type": "DatabaseConnection",
            "typeSimple": "DatabaseConnection",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 53.77,
          "halsteadDifficulty": 1.1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8d412fb8-b140-59dd-8006-20b93f166fe1",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a5888df33af24dc48574117b8e612b8b95b23f662c0767f13fa894dd6d8a700f",
        "contentId": "8f5c23672cc63bb10931a8fcbafba7310dec79261b30813fa95a618ff1cbd2ed",
        "name": "formatLineRange",
        "displayName": "formatLineRange",
        "signature": "formatLineRange(startLine: number, endLine: number): string",
        "signatureHash": "969d93b915ad24754d213cce375c75d9c887a9984ab01f9ef839093f060d5471",
        "filePath": "/src/utils/format-utils.ts",
        "fileHash": "3b761136e7426d1bcdcd8ce89f8ff4cc",
        "startLine": 77,
        "endLine": 82,
        "startColumn": 0,
        "endColumn": 179,
        "astHash": "35b293f71ae09b2c",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format line range for display\n */\nexport function formatLineRange(startLine: number, endLine: number): string {\n  if (startLine === endLine) {\n    return `L${startLine}`;\n  }\n  return `L${startLine}-${endLine}`;\n}",
        "sourceFileRefId": "a9d844d9-bc99-40d3-9182-55dcec5857b6",
        "parameters": [
          {
            "name": "startLine",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "endLine",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 18,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2d73d117-9cbb-5790-b086-aac2c115af13",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1f7ffa13d556f0cedabc1e3e4ef3f55755b240b4851871f07564c8e9ff417ff3",
        "contentId": "01ba64c7d38ac1d46b2912f11957a6976d84e1e28561136640997d4ee0feeafe",
        "name": "generateCircularDependencyGraph",
        "displayName": "DotGenerator.generateCircularDependencyGraph",
        "signature": "public DotGenerator.generateCircularDependencyGraph(functions: FunctionInfo[], cycles: string[][], options: Partial<DotGraphOptions> = {}): string",
        "signatureHash": "33a7770b082915bff3b4014c7d95247d0a51057c0e774dab232f88b392ada772",
        "filePath": "/src/visualization/dot-generator.ts",
        "fileHash": "a3a1cbdbbca7d6c04ce9e9995bfb7b84",
        "startLine": 77,
        "endLine": 86,
        "startColumn": 2,
        "endColumn": 336,
        "astHash": "546b664cc48c124a",
        "contextPath": [
          "DotGenerator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate DOT graph from circular dependencies\n   */\n  generateCircularDependencyGraph(\n    functions: FunctionInfo[],\n    cycles: string[][],\n    options: Partial<DotGraphOptions> = {}\n  ): string {\n    const opts = { ...this.defaultOptions, ...options };\n    const graph = this.createCircularDependencyGraph(functions, cycles, opts);\n    \n    return this.renderDotGraph(graph, opts);\n  }",
        "sourceFileRefId": "e6a8b060-c6ae-424c-95c6-5e3e00cda5d0",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "cycles",
            "type": "string[][]",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "Partial<DotGraphOptions>",
            "typeSimple": "Partial<DotGraphOptions>",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 100,
          "halsteadDifficulty": 1.43,
          "maintainabilityIndex": 84.87
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9e33da10-a32d-5dd8-a4eb-4d7f2b3565b4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bb6b689b1a86bb7a8fe7ae2595196c3fe1edf7fb2f4fda4521cfa33c0eb43bf9",
        "contentId": "5c901e6643678765894c3b5bb686bdd9204725854cc77f9305f0d5657d54d5eb",
        "name": "safeLog",
        "displayName": "safeLog",
        "signature": "safeLog(message: string, options: JsonOptions): void",
        "signatureHash": "36f372e666f23fcd574e4aa1ce28b04f14ec30bd245e28a7cced117f8dd72b44",
        "filePath": "/src/utils/format-helpers.ts",
        "fileHash": "5c0deefcfdcd2000f15d5b81b3a5a340",
        "startLine": 78,
        "endLine": 86,
        "startColumn": 0,
        "endColumn": 288,
        "astHash": "72da7bd37b144246",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Safe console output that respects JSON mode\n * Outputs to stderr when in JSON mode to keep stdout clean for piping\n */\nexport function safeLog(message: string, options: JsonOptions): void {\n  if (isJsonOutput(options)) {\n    // In JSON mode, log to stderr to keep stdout clean for jq\n    console.error(message);\n  } else {\n    // Normal console output for human-readable mode\n    console.log(message);\n  }\n}",
        "sourceFileRefId": "cc5d67dd-78db-42fb-8d08-e5018ed1e2c3",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "JsonOptions",
            "typeSimple": "JsonOptions",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.17,
          "halsteadVolume": 71.7,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 93.01
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5acd6f5e-bc7b-5bdf-97f8-6dd4428125e8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6ebb9e470b19533e491dcb184119c7b332c377b7fd83dbbf9fce39b6461c1258",
        "contentId": "db7fac08dde7f3bf19259f796d7a029bc6a131f700b16c960a6b4034f7c8a4f8",
        "name": "processFiles",
        "displayName": "ParallelFileProcessor.processFiles",
        "signature": "public async ParallelFileProcessor.processFiles(filePaths: string[], options: ParallelProcessingOptions = {}): Promise<ParallelProcessingResult>",
        "signatureHash": "f19ef49105ea2c108c7dbc12d392dbb49e41bf01647ca786078f4c8d42e936bc",
        "filePath": "/src/utils/parallel-processor.ts",
        "fileHash": "c221c2fbc7cee566ec657732288ce4bc",
        "startLine": 78,
        "endLine": 135,
        "startColumn": 2,
        "endColumn": 1778,
        "astHash": "8122974388c414c5",
        "contextPath": [
          "ParallelFileProcessor"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Process files in parallel using worker threads\n   */\n  async processFiles(\n    filePaths: string[],\n    options: ParallelProcessingOptions = {}\n  ): Promise<ParallelProcessingResult> {\n    if (filePaths.length === 0) {\n      return {\n        functions: [],\n        stats: {\n          totalFiles: 0,\n          totalFunctions: 0,\n          totalProcessingTime: 0,\n          workersUsed: 0,\n          avgFunctionsPerFile: 0,\n        },\n      };\n    }\n\n    const startTime = Date.now();\n    const filesPerWorker =\n      options.filesPerWorker || this.calculateOptimalFilesPerWorker(filePaths.length);\n    const workerCount = Math.min(Math.ceil(filePaths.length / filesPerWorker), this.maxWorkers);\n\n    // Split files into batches for workers\n    const fileBatches = this.splitFilesForWorkers(filePaths, workerCount);\n\n    // Process batches in parallel\n    const workerPromises = fileBatches.map((batch, index) =>\n      this.processFileBatch(batch, index, options.onProgress)\n    );\n\n    const results = await Promise.all(workerPromises);\n\n    // Aggregate results\n    const allFunctions: FunctionInfo[] = [];\n    let totalProcessingTime = 0;\n\n    for (const result of results) {\n      if (result.success) {\n        allFunctions.push(...result.functions);\n        totalProcessingTime = Math.max(totalProcessingTime, result.stats.processingTime);\n      } else {\n        console.warn(`Worker failed: ${result.error}`);\n      }\n    }\n\n    const totalProcessingTimeMs = Date.now() - startTime;\n\n    return {\n      functions: allFunctions,\n      stats: {\n        totalFiles: filePaths.length,\n        totalFunctions: allFunctions.length,\n        totalProcessingTime: totalProcessingTimeMs,\n        workersUsed: workerCount,\n        avgFunctionsPerFile: filePaths.length > 0 ? allFunctions.length / filePaths.length : 0,\n      },\n    };\n  }",
        "sourceFileRefId": "14abaca8-7a56-4f61-9817-39e50b983a23",
        "parameters": [
          {
            "name": "filePaths",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "ParallelProcessingOptions",
            "typeSimple": "ParallelProcessingOptions",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 47,
          "totalLines": 63,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 6,
          "codeToCommentRatio": 7.83,
          "halsteadVolume": 993.69,
          "halsteadDifficulty": 8.28,
          "maintainabilityIndex": 27.86
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c23a3f99-6d98-542c-bf20-c57bb4e95d31",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8d120b1ffe303819a5f6f0edf4d576b25ca0c199e84bf74c39b83f576d5bfef1",
        "contentId": "e5999e937809bbae232167b8ea4171e1612f88b282a713e8ba940fc1c762d7a3",
        "name": "analyzeFile",
        "displayName": "TypeAnalyzer.analyzeFile",
        "signature": "public TypeAnalyzer.analyzeFile(filePath: string, snapshotId: string): TypeDefinition[]",
        "signatureHash": "0577c869240acf89229e0ce6ede770158e641f0dc781333619afb4dbb1ae8239",
        "filePath": "/src/analyzers/type-analyzer.ts",
        "fileHash": "5e5c2c7d89ad8630994a47040d7774e9",
        "startLine": 78,
        "endLine": 112,
        "startColumn": 2,
        "endColumn": 1212,
        "astHash": "0a49f5da52fd8876",
        "contextPath": [
          "TypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze a TypeScript file to extract type definitions.\n   * \n   * @param filePath - Absolute path to the TypeScript file to analyze\n   * @param snapshotId - Unique identifier for the analysis snapshot\n   * @returns Array of type definitions found in the file\n   * @throws {Error} When the source file cannot be found or loaded\n   */\n  analyzeFile(filePath: string, snapshotId: string): TypeDefinition[] {\n    const sourceFile = this.project.getSourceFile(filePath);\n    if (!sourceFile) {\n      throw new Error(`Source file not found: ${filePath}`);\n    }\n\n    const typeDefinitions: TypeDefinition[] = [];\n\n    // Extract interfaces\n    sourceFile.getInterfaces().forEach(interfaceDecl => {\n      typeDefinitions.push(this.extractInterfaceDefinition(interfaceDecl, snapshotId, filePath));\n    });\n\n    // Extract type aliases\n    sourceFile.getTypeAliases().forEach(typeAlias => {\n      typeDefinitions.push(this.extractTypeAliasDefinition(typeAlias, snapshotId, filePath));\n    });\n\n    // Extract classes\n    sourceFile.getClasses().forEach(classDecl => {\n      typeDefinitions.push(this.extractClassDefinition(classDecl, snapshotId, filePath));\n    });\n\n    // Extract enums\n    sourceFile.getEnums().forEach(enumDecl => {\n      typeDefinitions.push(this.extractEnumDefinition(enumDecl, snapshotId, filePath));\n    });\n\n    // Extract modules/namespaces\n    sourceFile.getModules().forEach(moduleDecl => {\n      typeDefinitions.push(this.extractNamespaceDefinition(moduleDecl, snapshotId, filePath));\n    });\n\n    return typeDefinitions;\n  }",
        "sourceFileRefId": "a23a5da6-c06e-484d-821c-ccaed55bed7e",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 23,
          "totalLines": 45,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 5,
          "commentLines": 13,
          "codeToCommentRatio": 1.77,
          "halsteadVolume": 712.54,
          "halsteadDifficulty": 2.97,
          "maintainabilityIndex": 47.98
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3b8ba3bb-3172-557a-91cb-536c92bbd071",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1a41345f8175fa2686da798df091dc0fe01070f2fe4cbcaaff6f22db7f94f9df",
        "contentId": "c8a1fb80be0013f010b739031481b8f0ffe9dedd344921767ff3234aee4771f1",
        "name": "saveTypeInformationWithTransaction",
        "displayName": "CHATypeSystemIntegration.saveTypeInformationWithTransaction",
        "signature": "public async CHATypeSystemIntegration.saveTypeInformationWithTransaction(typeInfo: TypeExtractionResult): Promise<void>",
        "signatureHash": "a1526f3e10fd919d0c42dbe1a7add890aa4bb05b5ea05dc73a10e9c5da3a85fd",
        "filePath": "/src/analyzers/cha-type-system-integration.ts",
        "fileHash": "090a5ec6de9e2cde2d2fbf5c089a639e",
        "startLine": 79,
        "endLine": 98,
        "startColumn": 2,
        "endColumn": 817,
        "astHash": "ca2e22dfa05a162e",
        "contextPath": [
          "CHATypeSystemIntegration"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Save type information using transactional approach (Ë≤¨ÂãôÂàÜÈõ¢Âæå„ÅÆ‰øùÂ≠òÂ∞ÇÁî®„É°„ÇΩ„ÉÉ„Éâ)\n   */\n  async saveTypeInformationWithTransaction(typeInfo: TypeExtractionResult): Promise<void> {\n    if (!this.storage) {\n      throw new Error('Storage adapter not set');\n    }\n\n    try {\n      if ('saveAllTypeInformation' in this.storage\n          && typeof this.storage.saveAllTypeInformation === 'function') {\n        await this.storage.saveAllTypeInformation(typeInfo);\n      } else {\n        await this.storage.saveTypeDefinitions(typeInfo.typeDefinitions);\n        await this.storage.saveTypeRelationships(typeInfo.typeRelationships);\n        await this.storage.saveTypeMembers(typeInfo.typeMembers);\n        await this.storage.saveMethodOverrides(typeInfo.methodOverrides);\n      }\n    } catch (error) {\n      this.logger.error('‚ùå Failed to save type information to database:', error);\n      throw error;\n    }\n  }",
        "sourceFileRefId": "2cc6dcb9-ebf3-424a-b8a9-1c87d348b668",
        "parameters": [
          {
            "name": "typeInfo",
            "type": "TypeExtractionResult",
            "typeSimple": "TypeExtractionResult",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 19,
          "totalLines": 25,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 5,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 6.33,
          "halsteadVolume": 368.24,
          "halsteadDifficulty": 4.78,
          "maintainabilityIndex": 56.71
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fe5a9dda-4e87-5f0c-8afb-fb28e8bad340",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c0cd5a310300cf599a7e7aa1eb560873f1f58f27d9d824436c00c88c807224c7",
        "contentId": "76672fd7456b003169a338d3273fe048570d4b8be438ae3da656bc3b7decee6c",
        "name": "analyze",
        "displayName": "BehavioralFingerprintAnalyzer.analyze",
        "signature": "public async BehavioralFingerprintAnalyzer.analyze(snapshotId?: string): Promise<CrossTypePattern[]>",
        "signatureHash": "ad6119590dc54da5ff31dff537927da5a625f8eabb65c38d71044af93522ffe2",
        "filePath": "/src/analyzers/type-insights/behavioral-fingerprint-analyzer.ts",
        "fileHash": "64d1c9d1eb0d55962c02c32b0b5b0987",
        "startLine": 80,
        "endLine": 95,
        "startColumn": 2,
        "endColumn": 584,
        "astHash": "834eb8574419b36f",
        "contextPath": [
          "BehavioralFingerprintAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze behavioral patterns and create function clusters\n   */\n  async analyze(snapshotId?: string): Promise<CrossTypePattern[]> {\n    try {\n      const behavioralInfo = await this.loadBehavioralInformation(snapshotId);\n      \n      if (behavioralInfo.length < 2) {\n        return [];\n      }\n\n      const clusters = await this.performBehavioralClustering(behavioralInfo);\n      const patterns = this.convertClustersToPatterns(clusters);\n      \n      return this.filterPatterns(patterns);\n    } catch (error) {\n      throw new Error(`Failed to analyze behavioral fingerprints: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "011c9f5e-0031-4575-a3f0-a8af740aab0e",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 21,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4.33,
          "halsteadVolume": 204.33,
          "halsteadDifficulty": 2.95,
          "maintainabilityIndex": 70.22
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "4b29d66c-36d5-5411-9f65-c7ffc16e7b86",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c7a2eea90d5c96927443e9fb5dce0738100074bb6b6057fe54de5a8d5050df50",
        "contentId": "f66daf6f3d431be2607aa98302d37cc7c5663cc6eccb9c83b34fa1a61a1dba71",
        "name": "rollbackTransaction",
        "displayName": "PGliteDriver.rollbackTransaction",
        "signature": "public async PGliteDriver.rollbackTransaction(connection: DatabaseConnection): Promise<void>",
        "signatureHash": "a364172fe7d62f0f30eb3e799d149f73a097cebd9903b1e7ca18181784429ff1",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 80,
        "endLine": 82,
        "startColumn": 2,
        "endColumn": 148,
        "astHash": "76488bb3aaf84df2",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async rollbackTransaction(connection: DatabaseConnection): Promise<void> {\r\n    await connection.executeQuery(CompiledQuery.raw('ROLLBACK'));\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [
          {
            "name": "connection",
            "type": "DatabaseConnection",
            "typeSimple": "DatabaseConnection",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 53.77,
          "halsteadDifficulty": 1.1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5865d3b3-0b9e-5990-ac8c-5cf315f878ca",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "52a82d6ff5d7fed69be6a53f7f95b789ec513290da0aecaf53554b53007e7ea1",
        "contentId": "fd057949d9052703ea18bc3a3c49d34d038a4d469dd2a128ca5eb1dd5b6347ac",
        "name": "generateRandomTypeId",
        "displayName": "generateRandomTypeId",
        "signature": "generateRandomTypeId(): string",
        "signatureHash": "2827ca37f26abafefbaa7f134703ea3859001eaa5552580af59f41671a5de535",
        "filePath": "/src/utils/type-id-generator.ts",
        "fileHash": "452791c372bf1c7d1a4414a7057e692c",
        "startLine": 81,
        "endLine": 83,
        "startColumn": 0,
        "endColumn": 69,
        "astHash": "31603a36c26a92c0",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Generate random UUID (fallback for non-deterministic cases)\n * @returns Random UUID\n */\nexport function generateRandomTypeId(): string {\n  return uuidv4();\n}",
        "sourceFileRefId": "d477a5f7-1a87-410d-aa55-208328f85399",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 0.75,
          "halsteadVolume": 6.34,
          "halsteadDifficulty": 0.75,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "75c703c7-c5a6-5f17-9406-d349d20683c4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "38afd6af1343c81ff684491ea3b9921ab703445c9307b03582ad3261315a7019",
        "contentId": "17473792816d0963196f1be37d0deee88c8dcc1d1b47163fee7d625b3ea258e4",
        "name": "setTypeDefinitions",
        "displayName": "TypeMetricsCalculator.setTypeDefinitions",
        "signature": "public TypeMetricsCalculator.setTypeDefinitions(typeDefinitions: TypeDefinition[]): void",
        "signatureHash": "91256a74fdb19016d62b56bab2e625e89b7f551727e7c8da1395ab8edd191896",
        "filePath": "/src/analyzers/type-metrics-calculator.ts",
        "fileHash": "e6f170bcabfadbee57137ab72b1d475b",
        "startLine": 81,
        "endLine": 85,
        "startColumn": 2,
        "endColumn": 163,
        "astHash": "d5372485f81b90e5",
        "contextPath": [
          "TypeMetricsCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Set type definitions for CK metrics calculation\n   */\n  setTypeDefinitions(typeDefinitions: TypeDefinition[]): void {\n    if (this.ckCalculator) {\n      this.ckCalculator.setTypeDefinitions(typeDefinitions);\n    }\n  }",
        "sourceFileRefId": "d2b0b789-7d39-40e1-a623-b525ec560c71",
        "parameters": [
          {
            "name": "typeDefinitions",
            "type": "TypeDefinition[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 33.69,
          "halsteadDifficulty": 1.6,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b41aa5b1-5c37-5cc1-bdb7-f139fc5562b7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "284f5add548bdca9c532e949ce8659b87afab8a82fcce3b161e2373eb538d7ce",
        "contentId": "2f629a43a3f551785d61365c6ac8b12d8f4b544ec8be55fabd75ae98098366af",
        "name": "normalizeFilePath",
        "displayName": "UtilityOperations.normalizeFilePath",
        "signature": "public UtilityOperations.normalizeFilePath(filePath: string): string",
        "signatureHash": "3795bded8502bbf147e23c97f0e7cf1cdbdffd2cbc01a70a103d74a938b43c00",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 82,
        "endLine": 84,
        "startColumn": 2,
        "endColumn": 94,
        "astHash": "f6870d90c0700345",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Normalize file path for consistent handling\r\n   */\r\n  normalizeFilePath(filePath: string): string {\r\n    return filePath.replace(/\\\\/g, '/');\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 27,
          "halsteadDifficulty": 1.17,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "597c47f8-ec46-5187-b136-5afcb3c0e197",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8b283e4a6a49f9cbd68f2b4da061a71e353dbb56031dc7bbe9945b52e3a73945",
        "contentId": "c2c7da3d16d56e8f9e1dee32b64155cac5723f80024cd8324e342139a4c94ff4",
        "name": "push",
        "displayName": "StreamingStats.push",
        "signature": "public StreamingStats.push(value: number): this",
        "signatureHash": "1552e63201136f77bad7d0303f2016848cb8ef3037d73db919603c33416f523f",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 83,
        "endLine": 106,
        "startColumn": 2,
        "endColumn": 691,
        "astHash": "571d159ddb31fff2",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Add a new value to the streaming statistics\n   *\n   * @param value The new value to incorporate\n   * @returns This instance for chaining\n   */\n  push(value: number): this {\n    if (!Number.isFinite(value)) {\n      throw new Error('Value must be a finite number');\n    }\n\n    this.count++;\n\n    // Update min/max\n    this.minValue = Math.min(this.minValue, value);\n    this.maxValue = Math.max(this.maxValue, value);\n\n    if (this.config.trackVariance) {\n      // Welford's online algorithm for mean and variance\n      const delta = value - this.mean;\n      this.mean += delta / this.count;\n      const delta2 = value - this.mean;\n      this.m2 += delta * delta2;\n    } else {\n      // Simple mean calculation (faster when variance not needed)\n      this.mean = this.mean + (value - this.mean) / this.count;\n    }\n\n    return this;\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 32,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 9,
          "codeToCommentRatio": 1.89,
          "halsteadVolume": 376.52,
          "halsteadDifficulty": 9.52,
          "maintainabilityIndex": 59.6
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f02193bc-f677-5045-8e7c-29a338fff70e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a5cc1179015a6eb4df2a914aaff9216b5aed34bb0043760f084c968fc869b482",
        "contentId": "962e6df9ab3b4cbaefef61021cffbc839e0fa0a5c54a66d11abe44390fd8adcb",
        "name": "releaseConnection",
        "displayName": "PGliteDriver.releaseConnection",
        "signature": "public async PGliteDriver.releaseConnection(): Promise<void>",
        "signatureHash": "d25d585f90951323ba4bc02ea788b9e5c5b7471097a626a15b7bd20b1f9a3e08",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 84,
        "endLine": 86,
        "startColumn": 2,
        "endColumn": 86,
        "astHash": "3b35322dbc232b76",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async releaseConnection(): Promise<void> {\r\n    // PGlite„ÅØ„Ç≥„Éç„ÇØ„Ç∑„Éß„É≥„Éó„Éº„É´„ÇíÊåÅ„Åü„Å™„ÅÑ„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„ÅÑ\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 2,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "65b6a033-3928-5b0c-9b53-c23c29fad63b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "096210e0f3e8706bae48f92ed45052dd1bad61e4b30c7ba89352f193b88011b8",
        "contentId": "21985db0fb1d02bd439fed35edff1d8039f2b8c4bee65e38a949462a4e319153",
        "name": "clearCache",
        "displayName": "TypePropertyAnalyzer.clearCache",
        "signature": "public TypePropertyAnalyzer.clearCache(): void",
        "signatureHash": "94f20c22872013fffcf1be7fddb9e5d6008ef424eb3b3566c8733ee2adeda526",
        "filePath": "/src/analyzers/type-property-analyzer.ts",
        "fileHash": "605306c38f6d2516e0512963d18b57c6",
        "startLine": 87,
        "endLine": 89,
        "startColumn": 2,
        "endColumn": 54,
        "astHash": "d09c349adfae6c95",
        "contextPath": [
          "TypePropertyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear the cache (useful for memory management)\n   */\n  clearCache(): void {\n    this.typeCache.clear();\n  }",
        "sourceFileRefId": "cd34ba5e-b57e-4627-abc8-4a93738fc3e3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0bd16c05-2681-5fbf-8b5a-3382e8f81ab8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8b3882579b1b13fdd21f9b3b914a2b2f78aa74be05eb04885ffc64e4d65f1445",
        "contentId": "fe4e35b45a386bed8b2ce807810602c8e5b6c480c19dfadbb9f050c8a2bdbb8b",
        "name": "constructor",
        "displayName": "ProgressBar.constructor",
        "signature": "public ProgressBar(private total: number, private label: string = 'Progress', private width: number = 40)",
        "signatureHash": "02b6c79f7b871ebf8808c28ad1a4e28b579dcf509f471450113da098aa160fe4",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 88,
        "endLine": 92,
        "startColumn": 2,
        "endColumn": 119,
        "astHash": "8190029367a5d722",
        "contextPath": [
          "ProgressBar"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(\n    private total: number,\n    private label: string = 'Progress',\n    private width: number = 40\n  ) {}",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "total",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "label",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "'Progress'"
          },
          {
            "name": "width",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "40"
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 11.61,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5a156570-2c86-5e81-ac18-3008f3659ece",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2657b2c2fce7cea9bd43d73e8361c4738459b51c2290f69f51fab458542e869f",
        "contentId": "709a1896c53e29ff8554f40ee41335c2ee80631e36886a56038733955ce907b2",
        "name": "estimateEmbeddingCost",
        "displayName": "ConfirmationHandler.estimateEmbeddingCost",
        "signature": "public ConfirmationHandler.estimateEmbeddingCost(functionCount: number, model: string = 'text-embedding-3-small', avgTokensPerFunction: number = 200): number",
        "signatureHash": "b89002b4060f94cb44a0c98401c474ac366e4722a367481a8af5e633911815bc",
        "filePath": "/src/use-cases/confirmation-handler.ts",
        "fileHash": "a281ace6731b7251e7589ad274a7c0c0",
        "startLine": 88,
        "endLine": 104,
        "startColumn": 2,
        "endColumn": 628,
        "astHash": "57b058ae93c35bd5",
        "contextPath": [
          "ConfirmationHandler"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Estimate cost for embedding operations\n   */\n  estimateEmbeddingCost(\n    functionCount: number,\n    model: string = 'text-embedding-3-small',\n    avgTokensPerFunction: number = 200\n  ): number {\n    // OpenAI pricing (as of 2025Âπ¥7Êúà)\n    const pricing: Record<string, number> = {\n      'text-embedding-ada-002': 0.0001, // per 1K tokens\n      'text-embedding-3-small': 0.00002, // per 1K tokens\n      'text-embedding-3-large': 0.00013, // per 1K tokens\n    };\n\n    const pricePerThousandTokens = pricing[model] || pricing['text-embedding-3-small'];\n    const totalTokens = functionCount * avgTokensPerFunction;\n\n    return (totalTokens / 1000) * pricePerThousandTokens;\n  }",
        "sourceFileRefId": "da42844b-bb6a-4722-9156-24df408f6e66",
        "parameters": [
          {
            "name": "functionCount",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "model",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "'text-embedding-3-small'"
          },
          {
            "name": "avgTokensPerFunction",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "200"
          }
        ],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 22,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 3.5,
          "halsteadVolume": 133.98,
          "halsteadDifficulty": 3.13,
          "maintainabilityIndex": 72.12
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "67ad7499-aebd-5d27-b57c-3b6e4b0c1e57",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6d09e0df7eb9d80b404de2583f1b2dda422526fd109f0c86dc97968d4452a3fd",
        "contentId": "5dcf2cab545847581761f36f0c1aff11408b13ec9d2492e62d1b7653923b42f3",
        "name": "destroy",
        "displayName": "PGliteDriver.destroy",
        "signature": "public async PGliteDriver.destroy(): Promise<void>",
        "signatureHash": "cfb44cb3be1c7b47eeffb48e82c3548c751ff93c8e348222d2ac3fa9ee7accc7",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 88,
        "endLine": 90,
        "startColumn": 2,
        "endColumn": 73,
        "astHash": "7604a6a04dee2ca2",
        "contextPath": [
          "PGliteDriver"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async destroy(): Promise<void> {\r\n    // PGlite„ÅÆÁ†¥Ê£Ñ„ÅØÂ§ñÈÉ®„ÅßÁÆ°ÁêÜ„Åï„Çå„Çã„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„ÅÑ\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 2,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "49fc6461-0f9e-5119-9686-3f04fa2f345a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fe7edf91d21dae83c9954302675360ced68e2f2dac89c542210f0cdb80006d13",
        "contentId": "39e91eb9bbdf9f817385889cbeb6849fa392058f87234d9341402f52fad7ddd4",
        "name": "generateId",
        "displayName": "UtilityOperations.generateId",
        "signature": "public UtilityOperations.generateId(): string",
        "signatureHash": "946fd4d30e27fc8d3c67f887cfb8545ad3052fca35437a29dd6630b29d9a43c4",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 89,
        "endLine": 91,
        "startColumn": 2,
        "endColumn": 55,
        "astHash": "e09980804e55816f",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Generate a unique identifier\r\n   */\r\n  generateId(): string {\r\n    return randomUUID();\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 6.34,
          "halsteadDifficulty": 0.75,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f4578690-4be5-5e87-9f29-de84b2cee4d4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2bfaef95aa583a12e2797cbc455d58e41370d2275c44b903eb03953579e30964",
        "contentId": "9c78cb3cb15203ea046f09e72b690793787d80eb775248d518cb360f4472ea1a",
        "name": "disposeAll",
        "displayName": "GitFactory.disposeAll",
        "signature": "public GitFactory.disposeAll(): void",
        "signatureHash": "4e519bf8499e768e2940bc24376c15bb69b6815209c52239845bbe2f5714851e",
        "filePath": "/src/utils/git/git-factory.ts",
        "fileHash": "a4849dc9530f19deb7dfc4a85d852be2",
        "startLine": 89,
        "endLine": 94,
        "startColumn": 2,
        "endColumn": 140,
        "astHash": "746e004d3ed089c8",
        "contextPath": [
          "GitFactory"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * „Åô„Åπ„Å¶„ÅÆ„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÁ†¥Ê£Ñ\n   */\n  disposeAll(): void {\n    for (const provider of this.providers.values()) {\n      provider.dispose();\n    }\n    this.providers.clear();\n  }",
        "sourceFileRefId": "c4b1cc11-8455-431e-bbbc-32803e554054",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 65.73,
          "halsteadDifficulty": 1.22,
          "maintainabilityIndex": 97.26
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ec2f4f02-f871-5d4e-b8a5-be904e826150",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "13917112980a099619fd7f3a9ccbe1bbdc4c9664f555f7314f9b95ad8887528a",
        "contentId": "ba71f1f93b3ab5c7efe63577e9d4f1303b7953fdd42f0a0a4ccd00a99b5af248",
        "name": "calculateTypeQuality",
        "displayName": "TypeMetricsCalculator.calculateTypeQuality",
        "signature": "public TypeMetricsCalculator.calculateTypeQuality(typeDefinition: TypeDefinition, typeMetrics: TypeMetrics, usageInfo?: TypeUsageInfo, dependencies?: TypeDependency[]): TypeQualityScore",
        "signatureHash": "c70766ff99b724d3ed49e1938b1dfd4c213f0d86ef1fde0fe0020ea796d7ab4d",
        "filePath": "/src/analyzers/type-metrics-calculator.ts",
        "fileHash": "e6f170bcabfadbee57137ab72b1d475b",
        "startLine": 90,
        "endLine": 138,
        "startColumn": 2,
        "endColumn": 1764,
        "astHash": "c29f81fc9edafd78",
        "contextPath": [
          "TypeMetricsCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate quality score for a single type including CK metrics\n   */\n  calculateTypeQuality(\n    typeDefinition: TypeDefinition,\n    typeMetrics: TypeMetrics,\n    usageInfo?: TypeUsageInfo,\n    dependencies?: TypeDependency[]\n  ): TypeQualityScore {\n    const issues: TypeQualityIssue[] = [];\n\n    // Calculate individual scores\n    const complexityScore = this.calculateComplexityScore(typeMetrics, issues);\n    const maintainabilityScore = this.calculateMaintainabilityScore(typeDefinition, typeMetrics, issues);\n    const reusabilityScore = this.calculateReusabilityScore(typeDefinition, usageInfo, issues);\n    const designScore = this.calculateDesignScore(typeDefinition, typeMetrics, dependencies, issues);\n    \n    // Calculate CK metrics score\n    const ckMetrics = this.ckCalculator?.calculateCKMetrics(typeDefinition.name);\n    const ckScore = this.calculateCKScore(ckMetrics, issues);\n\n    // Calculate overall score with updated weights to include CK metrics\n    // Adjusted weights: Complexity 25%, Maintainability 20%, Reusability 15%, Design 20%, CK 20%\n    const overallScore = Math.round(\n      complexityScore * 0.25 +\n      maintainabilityScore * 0.20 +\n      reusabilityScore * 0.15 +\n      designScore * 0.20 +\n      ckScore * 0.20\n    );\n\n    // Calculate risk score (inverted health score for intuitive risk understanding)\n    const riskScore = 100 - overallScore;\n    \n    // Determine risk level based purely on risk score for consistency\n    const riskLevel = this.determineRiskLevel(riskScore);\n\n    return {\n      typeId: typeDefinition.id,\n      typeName: typeDefinition.name,\n      overallScore,\n      riskScore,\n      complexityScore,\n      maintainabilityScore,\n      reusabilityScore,\n      designScore,\n      ckScore,\n      riskLevel,\n      issues,\n      ckMetrics: ckMetrics || undefined\n    };\n  }",
        "sourceFileRefId": "d2b0b789-7d39-40e1-a623-b525ec560c71",
        "parameters": [
          {
            "name": "typeDefinition",
            "type": "TypeDefinition",
            "typeSimple": "TypeDefinition",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "typeMetrics",
            "type": "TypeMetrics",
            "typeSimple": "TypeMetrics",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "usageInfo",
            "type": "TypeUsageInfo",
            "typeSimple": "TypeUsageInfo",
            "position": 2,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "dependencies",
            "type": "TypeDependency[]",
            "typeSimple": "array",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 37,
          "totalLines": 54,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 4,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 9,
          "codeToCommentRatio": 4.11,
          "halsteadVolume": 673.32,
          "halsteadDifficulty": 5.38,
          "maintainabilityIndex": 37.29
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7a0594f7-4626-5bb8-844f-ff28456bc297",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "866917cdcd45f6363c589579ea1f3ef361cad8e9bdbd345deafbfaccdeb8939b",
        "contentId": "b9210fdf1e472d241ee1e60e9ff3ab01e465598522d33987e4157b74853b1ce5",
        "name": "validateTraces",
        "displayName": "RuntimeTraceIntegrationStage.validateTraces",
        "signature": "public RuntimeTraceIntegrationStage.validateTraces(staticEdges: IdealCallEdge[], runtimeTraces: RuntimeTrace[], snapshotId?: string): {\r\n    confirmedEdges: IdealCallEdge[];\r\n    contradictedEdges: IdealCallEdge[];\r\n    newRuntimeEdges: IdealCallEdge[];\r\n  }",
        "signatureHash": "8bf4eb8541be2f01225ce9865f6e79fc9066c24c3b236ab995c9b4f202e0d6b2",
        "filePath": "/src/analyzers/staged-analysis/stages/runtime-trace-integration.ts",
        "fileHash": "c8750b658f4ae79fd5a1e1dd6204d439",
        "startLine": 90,
        "endLine": 173,
        "startColumn": 2,
        "endColumn": 3108,
        "astHash": "adb32e36dac478bc",
        "contextPath": [
          "RuntimeTraceIntegrationStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Validate runtime traces against static analysis\r\n   */\r\n  validateTraces(\r\n    staticEdges: IdealCallEdge[],\r\n    runtimeTraces: RuntimeTrace[],\r\n    snapshotId?: string\r\n  ): {\r\n    confirmedEdges: IdealCallEdge[];\r\n    contradictedEdges: IdealCallEdge[];\r\n    newRuntimeEdges: IdealCallEdge[];\r\n  } {\r\n    const confirmedEdges: IdealCallEdge[] = [];\r\n    const contradictedEdges: IdealCallEdge[] = [];\r\n    const newRuntimeEdges: IdealCallEdge[] = [];\r\n\r\n    // Create lookup maps for efficient comparison\r\n    const staticEdgeMap = new Map<string, IdealCallEdge>();\r\n    for (const edge of staticEdges) {\r\n      const key = `${edge.callerFunctionId}->${edge.calleeFunctionId}`;\r\n      staticEdgeMap.set(key, edge);\r\n    }\r\n\r\n    // Process runtime traces\r\n    for (const trace of runtimeTraces) {\r\n      const edgeKey = `${trace.callerFunctionId}->${trace.calleeFunctionId}`;\r\n      const staticEdge = staticEdgeMap.get(edgeKey);\r\n      \r\n      if (staticEdge) {\r\n        // Runtime confirms static analysis\r\n        confirmedEdges.push({\r\n          ...staticEdge,\r\n          runtimeConfirmed: true,\r\n          confidenceScore: 1.0 // Perfect confidence\r\n        });\r\n      } else {\r\n        // Runtime discovered new edge not found by static analysis\r\n        newRuntimeEdges.push({\r\n          id: generateStableEdgeId(trace.callerFunctionId, trace.calleeFunctionId, snapshotId),\r\n          callerFunctionId: trace.callerFunctionId,\r\n          calleeFunctionId: trace.calleeFunctionId,\r\n          calleeName: trace.calleeName || 'unknown',\r\n          calleeSignature: undefined,\r\n          callerClassName: undefined,\r\n          calleeClassName: undefined,\r\n          callType: 'direct',\r\n          callContext: undefined,\r\n          lineNumber: trace.lineNumber || 0,\r\n          columnNumber: trace.columnNumber || 0,\r\n          isAsync: false,\r\n          isChained: false,\r\n          metadata: { runtimeOnly: true },\r\n          createdAt: new Date().toISOString(),\r\n          candidates: [trace.calleeFunctionId],\r\n          confidenceScore: 1.0,\r\n          resolutionLevel: ResolutionLevel.RUNTIME_CONFIRMED,\r\n          resolutionSource: 'runtime_verified',\r\n          runtimeConfirmed: true,\r\n          analysisMetadata: {\r\n            timestamp: Date.now(),\r\n            analysisVersion: '1.0',\r\n            sourceHash: 'runtime'\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Find static edges that were never executed (potential false positives)\r\n    for (const edge of staticEdges) {\r\n      const edgeKey = `${edge.callerFunctionId}->${edge.calleeFunctionId}`;\r\n      if (!runtimeTraces.some(trace => \r\n        `${trace.callerFunctionId}->${trace.calleeFunctionId}` === edgeKey\r\n      )) {\r\n        // This static edge was never observed at runtime\r\n        // It might be a false positive or just not executed in this run\r\n        contradictedEdges.push(edge);\r\n      }\r\n    }\r\n\r\n    this.logger.debug(`Runtime validation: ${confirmedEdges.length} confirmed, ${contradictedEdges.length} unexecuted, ${newRuntimeEdges.length} new runtime edges`);\r\n\r\n    return {\r\n      confirmedEdges,\r\n      contradictedEdges,\r\n      newRuntimeEdges\r\n    };\r\n  }",
        "sourceFileRefId": "6570a266-b34a-4852-8ceb-450775093416",
        "parameters": [
          {
            "name": "staticEdges",
            "type": "IdealCallEdge[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "runtimeTraces",
            "type": "RuntimeTrace[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 71,
          "totalLines": 89,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9,
          "maxNestingLevel": 2,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 3,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 10,
          "codeToCommentRatio": 7.1,
          "halsteadVolume": 1230.84,
          "halsteadDifficulty": 5.35,
          "maintainabilityIndex": 15.92
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8ebec03b-bd9a-5b18-80b2-1cd646d783d5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "38cb6dc3fe4a54475bbb113bfb44effbcb95bf794ce0a4db6c7aa75e1214ed10",
        "contentId": "659b4542f3188739dc6e83e449e9fc831fc36b4b3fc7c03beea8ef0e1b7b7ed4",
        "name": "close",
        "displayName": "StorageProvider.close",
        "signature": "public async StorageProvider.close(): Promise<void>",
        "signatureHash": "3f7e22faf9c783d6782475b6b82424392a44ca6463f37a3a90cc3d813b0f5d86",
        "filePath": "/src/core/storage-provider.ts",
        "fileHash": "7e9f868c8caa9c253d64cb1dadab0f43",
        "startLine": 90,
        "endLine": 96,
        "startColumn": 2,
        "endColumn": 264,
        "astHash": "c71b9d8afa6b29ee",
        "contextPath": [
          "StorageProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Close storage connection and reset instance\r\n   * Note: This method only nullifies the instance reference.\r\n   * Actual connection closing is handled by the storage instance itself\r\n   * via graceful shutdown mechanisms to prevent circular dependencies.\r\n   */\r\n  async close(): Promise<void> {\r\n    if (this.storageAdapter) {\r\n      // Don't call storageAdapter.close() here to break circular dependency\r\n      // The adapter will be closed through graceful shutdown coordinator\r\n      this.storageAdapter = null;\r\n    }\r\n  }",
        "sourceFileRefId": "6d1f4c74-8b98-416a-9241-8ba2aca8f936",
        "parameters": [],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 8,
          "codeToCommentRatio": 0.63,
          "halsteadVolume": 16.25,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fc3dd821-ac1c-5d52-b31d-9e9b66a5e38a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4dc90dc7a6decc5f62c5b98b73827aa51ed2994f4a90236c2afbd74e72242d53",
        "contentId": "79d526e83147764f1a82442e85dca8c817bc6ee57458ba0334e4433c7f34366c",
        "name": "getEdgesByConfidence",
        "displayName": "ConfidenceCalculator.getEdgesByConfidence",
        "signature": "public ConfidenceCalculator.getEdgesByConfidence(edges: IdealCallEdge[]): {\n    high: IdealCallEdge[];     // >= 0.95\n    medium: IdealCallEdge[];   // 0.7 - 0.95\n    low: IdealCallEdge[];      // < 0.7\n  }",
        "signatureHash": "6a4834858e0017a06448cbce58e11fb756b749bbbf74b81b7e90daf410329048",
        "filePath": "/src/analyzers/confidence-calculator.ts",
        "fileHash": "5193cd208af182ad06c7f7e425b975a4",
        "startLine": 90,
        "endLine": 100,
        "startColumn": 2,
        "endColumn": 440,
        "astHash": "b07550eb025cc3bd",
        "contextPath": [
          "ConfidenceCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get edges by confidence level\n   */\n  getEdgesByConfidence(edges: IdealCallEdge[]): {\n    high: IdealCallEdge[];     // >= 0.95\n    medium: IdealCallEdge[];   // 0.7 - 0.95\n    low: IdealCallEdge[];      // < 0.7\n  } {\n    const high = edges.filter(e => e.confidenceScore >= 0.95);\n    const medium = edges.filter(e => e.confidenceScore >= 0.7 && e.confidenceScore < 0.95);\n    const low = edges.filter(e => e.confidenceScore < 0.7);\n    \n    return { high, medium, low };\n  }",
        "sourceFileRefId": "e159adea-ad45-4c66-9f99-4d357207ccf9",
        "parameters": [
          {
            "name": "edges",
            "type": "IdealCallEdge[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 16,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 220.72,
          "halsteadDifficulty": 8.13,
          "maintainabilityIndex": 76.24
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d0a878c1-88fe-5d8d-925d-234c2fbd1c96",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "87c65ba99e1bee9f65e52a173381fcec0517a2365df5427a416ff4a3c7aafae6",
        "contentId": "5bc518499961cd4111731a4655c29c91fe226f1725643978d1bcdc6c6e87d5c8",
        "name": "getDefaults",
        "displayName": "ArchitectureConfigManager.getDefaults",
        "signature": "public ArchitectureConfigManager.getDefaults(): ArchitectureConfig",
        "signatureHash": "796de8a9e46657025ef284267d5d91ef2807df6d390719d9b4b6b1f4e8f1d003",
        "filePath": "/src/config/architecture-config.ts",
        "fileHash": "d7125880e3c2350cec41bae9ec342d7c",
        "startLine": 91,
        "endLine": 93,
        "startColumn": 2,
        "endColumn": 88,
        "astHash": "a6da2b002d512d47",
        "contextPath": [
          "ArchitectureConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get default configuration\n   */\n  getDefaults(): ArchitectureConfig {\n    return { ...DEFAULT_ARCHITECTURE_CONFIG };\n  }",
        "sourceFileRefId": "da56c761-051a-4bdf-b8cf-c38011c06739",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 4.75,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5e563122-2e50-5b9e-af59-d4da6c35276c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2b36d9dd9bf827edf9c09e288c0b8bfbb9bf9cb2ee3ce38dfc6a476e5aec7bc8",
        "contentId": "c61861443b329528db027fd5dfc2243a7201edafeb05e9078cc6cb324e3e9098",
        "name": "isValidTypeId",
        "displayName": "isValidTypeId",
        "signature": "isValidTypeId(typeId: string): boolean",
        "signatureHash": "eac002da33e79a943581b663e18282c1cc33ee5ba1bfa491e20267d188dfc4da",
        "filePath": "/src/utils/type-id-generator.ts",
        "fileHash": "452791c372bf1c7d1a4414a7057e692c",
        "startLine": 91,
        "endLine": 93,
        "startColumn": 0,
        "endColumn": 146,
        "astHash": "a01dbd7a85d613ca",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Validate type ID format\n * \n * @param typeId - Type ID to validate\n * @returns True if the ID matches the UUID format\n */\nexport function isValidTypeId(typeId: string): boolean {\n  return /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/.test(typeId);\n}",
        "sourceFileRefId": "d477a5f7-1a87-410d-aa55-208328f85399",
        "parameters": [
          {
            "name": "typeId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 0.5,
          "halsteadVolume": 22.46,
          "halsteadDifficulty": 1.2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "afc6edd4-0474-55f8-b659-a5a638db4869",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "eb5adf194ecb05f23b123f8ab44c76c263c767ebec999ee28e38e38a043afad8",
        "contentId": "78ecdd313cd3416970ba2fd6ae426bdaf4012ebe451e3f7ddd7a040b29eda726",
        "name": "generateSCCGraph",
        "displayName": "DotGenerator.generateSCCGraph",
        "signature": "public DotGenerator.generateSCCGraph(functions: FunctionInfo[], components: StronglyConnectedComponent[], options: Partial<DotGraphOptions> = {}): string",
        "signatureHash": "6125e59a103b40bd420f68d24fc2f6599271d2f2917b76b7e6f25fe3daf0292b",
        "filePath": "/src/visualization/dot-generator.ts",
        "fileHash": "a3a1cbdbbca7d6c04ce9e9995bfb7b84",
        "startLine": 91,
        "endLine": 100,
        "startColumn": 2,
        "endColumn": 332,
        "astHash": "be517f039f0607d1",
        "contextPath": [
          "DotGenerator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate DOT graph from strongly connected components\n   */\n  generateSCCGraph(\n    functions: FunctionInfo[],\n    components: StronglyConnectedComponent[],\n    options: Partial<DotGraphOptions> = {}\n  ): string {\n    const opts = { ...this.defaultOptions, ...options };\n    const graph = this.createSCCGraph(functions, components, opts);\n    \n    return this.renderDotGraph(graph, opts);\n  }",
        "sourceFileRefId": "e6a8b060-c6ae-424c-95c6-5e3e00cda5d0",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "components",
            "type": "StronglyConnectedComponent[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "Partial<DotGraphOptions>",
            "typeSimple": "Partial<DotGraphOptions>",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 15,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 106.27,
          "halsteadDifficulty": 1.4,
          "maintainabilityIndex": 84.41
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "aef361eb-7442-5603-a6aa-270503ece338",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5873a032e0e44b48e48541c699f4d5a87a37fd6c8b3f1ea4fe87722e800cc9a3",
        "contentId": "7f9d102084e092e2dec1f0d165041ceb1e1b294810cb79fdae22a00dd476c4da",
        "name": "calculateProjectScore",
        "displayName": "QualityScorerV16.calculateProjectScore",
        "signature": "public QualityScorerV16.calculateProjectScore(functions: FunctionInfo[], evaluations: Map<string, NamingEvaluation> = new Map()): EnhancedProjectQualityScore",
        "signatureHash": "f05f80d519c49fc886701a4da3f746b3d02b7eaab1bebb1ca76d7097ae53936a",
        "filePath": "/src/utils/quality-scorer-v16.ts",
        "fileHash": "a45030f317877d30ba7f5245e723951d",
        "startLine": 92,
        "endLine": 135,
        "startColumn": 2,
        "endColumn": 1518,
        "astHash": "c9eeeaa79bdc1366",
        "contextPath": [
          "QualityScorerV16"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate enhanced project quality score\n   */\n  calculateProjectScore(\n    functions: FunctionInfo[],\n    evaluations: Map<string, NamingEvaluation> = new Map()\n  ): EnhancedProjectQualityScore {\n    if (functions.length === 0) {\n      return this.getEmptyProjectScore();\n    }\n\n    // Calculate individual function scores\n    const functionScores = functions.map(func => ({\n      function: func,\n      metrics: this.calculateFunctionScore(func, functions, evaluations.get(func.id)),\n    }));\n\n    // Calculate component averages\n    const componentScores = this.calculateComponentAverages(functionScores);\n\n    // Calculate overall score\n    const overallScore = Math.round(\n      componentScores.maintainability * this.weights.maintainability +\n        componentScores.complexity * this.weights.complexity +\n        componentScores.size * this.weights.size +\n        componentScores.namingQuality * this.weights.namingQuality +\n        componentScores.typeSafety * this.weights.typeSafety\n    );\n\n    // Calculate statistics\n    const statistics = this.calculateProjectStatistics(functions, functionScores, evaluations);\n\n    // Get top problematic functions\n    const topProblematicFunctions = this.getTopProblematicFunctions(functionScores);\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(functionScores, statistics);\n\n    return {\n      overallGrade: this.scoreToGrade(overallScore),\n      score: overallScore,\n      componentScores,\n      statistics,\n      topProblematicFunctions,\n      recommendations,\n    };\n  }",
        "sourceFileRefId": "d6f5752b-8b86-48f6-88b3-2bfbc1ee6eff",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "evaluations",
            "type": "Map<string, NamingEvaluation>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "new Map()"
          }
        ],
        "metrics": {
          "linesOfCode": 31,
          "totalLines": 49,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 9,
          "codeToCommentRatio": 3.44,
          "halsteadVolume": 744.63,
          "halsteadDifficulty": 4.32,
          "maintainabilityIndex": 40.67
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6da29334-4e44-5e42-8d01-f6afefb400d3",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c55b878d1bf7d47f4c9cf0055cbd61a5e955ba5624162746dd2644619b35e44d",
        "contentId": "acffa9ca7096d36c0b559ebb64219e4d43e567b272102ee6e8f317114e213321",
        "name": "filterCandidatesByInstantiation",
        "displayName": "RTAAnalysisStage.filterCandidatesByInstantiation",
        "signature": "public RTAAnalysisStage.filterCandidatesByInstantiation(chaCandidates: Map<string, MethodInfo[]>, instantiationEvents: InstantiationEvent[]): Map<string, MethodInfo[]>",
        "signatureHash": "00d11b9fd1c7f3202cd34fd37c9f3dc3a040e7e81fb27cabe55a751ecb7658c2",
        "filePath": "/src/analyzers/staged-analysis/stages/rta-analysis.ts",
        "fileHash": "1c64024e3f89ea38aa7598ff26057f3d",
        "startLine": 93,
        "endLine": 116,
        "startColumn": 2,
        "endColumn": 1088,
        "astHash": "00c27bfb778ffc51",
        "contextPath": [
          "RTAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Filter method candidates based on instantiated classes\r\n   */\r\n  filterCandidatesByInstantiation(\r\n    chaCandidates: Map<string, MethodInfo[]>,\r\n    instantiationEvents: InstantiationEvent[]\r\n  ): Map<string, MethodInfo[]> {\r\n    const instantiatedClasses = new Set(instantiationEvents.map(e => e.typeName));\r\n    const filteredCandidates = new Map<string, MethodInfo[]>();\r\n    \r\n    for (const [methodName, candidates] of chaCandidates) {\r\n      const filteredMethodCandidates = candidates.filter(candidate => \r\n        instantiatedClasses.has(candidate.className)\r\n      );\r\n      \r\n      if (filteredMethodCandidates.length > 0) {\r\n        filteredCandidates.set(methodName, filteredMethodCandidates);\r\n      }\r\n    }\r\n    \r\n    const originalCount = Array.from(chaCandidates.values()).reduce((sum, arr) => sum + arr.length, 0);\r\n    const filteredCount = Array.from(filteredCandidates.values()).reduce((sum, arr) => sum + arr.length, 0);\r\n    \r\n    this.logger.debug(`RTA filtering: ${originalCount} -> ${filteredCount} candidates (${((1 - filteredCount/originalCount) * 100).toFixed(1)}% reduction)`);\r\n    \r\n    return filteredCandidates;\r\n  }",
        "sourceFileRefId": "90f5114e-03b8-42f9-af36-0c77cb9c0003",
        "parameters": [
          {
            "name": "chaCandidates",
            "type": "Map<string, MethodInfo[]>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "instantiationEvents",
            "type": "InstantiationEvent[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 19,
          "totalLines": 29,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 4,
          "commentLines": 3,
          "codeToCommentRatio": 6.33,
          "halsteadVolume": 681.62,
          "halsteadDifficulty": 6.32,
          "maintainabilityIndex": 52.55
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2cf21b8f-024c-5206-96e0-ea795d053953",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "00284139d5b48bd1148690d04c2a6ab2c1878073060b47e9fd593c2055aa2d20",
        "contentId": "8eca6e91f33677e331df20fa6bcbf00bba0ac785ae285d265c5f5ba2b6f7ec11",
        "name": "update",
        "displayName": "ProgressBar.update",
        "signature": "public ProgressBar.update(current: number, info?: string): void",
        "signatureHash": "2578fd5b1af003bffbcbb43535749bccba8595536ba0dad092b34d00a5c392c6",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 94,
        "endLine": 110,
        "startColumn": 2,
        "endColumn": 778,
        "astHash": "418f1151e4940842",
        "contextPath": [
          "ProgressBar"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "update(current: number, info?: string): void {\n    const percentage = Math.round((current / this.total) * 100);\n    const filled = Math.round((current / this.total) * this.width);\n    const empty = this.width - filled;\n\n    const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);\n    const elapsed = Date.now() - this.startTime;\n    const rate = current / (elapsed / 1000);\n    const eta = current > 0 ? Math.round((this.total - current) / rate) : 0;\n\n    const infoText = info ? ` | ${info}` : '';\n    const progressText = `${this.label}: [${bar}] ${percentage}% (${current}/${this.total}) ETA: ${eta}s${infoText}`;\n\n    // Clear line and write progress\n    process.stdout.write('\\r' + ' '.repeat(process.stdout.columns || 80) + '\\r');\n    process.stdout.write(progressText);\n  }",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "current",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "info",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 19,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 13,
          "halsteadVolume": 686.95,
          "halsteadDifficulty": 7.8,
          "maintainabilityIndex": 61.13
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b47939cd-4f2d-5c9e-8b7e-1d017982dcb2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d4fee07f50f1de703a7eac6f20e0b8248047d7d2573461e678c0968fedeb7a8c",
        "contentId": "345f8bdaf979dda22a3f4b553e03206ed9d8532b578f6bef9cbae8a036c3f51a",
        "name": "analyze",
        "displayName": "ConverterNetworkAnalyzer.analyze",
        "signature": "public async ConverterNetworkAnalyzer.analyze(snapshotId?: string): Promise<ConverterNetworkReport[]>",
        "signatureHash": "89f34db3c8409c5f158922c317cbf19f0ea0b2a47765998857e2b43b739f2330",
        "filePath": "/src/analyzers/type-insights/converter-network-analyzer.ts",
        "fileHash": "4761757e107aa737efc3f6823f6e6702",
        "startLine": 94,
        "endLine": 141,
        "startColumn": 2,
        "endColumn": 1887,
        "astHash": "6ac4037c9bb22093",
        "contextPath": [
          "ConverterNetworkAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Main analysis method\n   */\n  async analyze(snapshotId?: string): Promise<ConverterNetworkReport[]> {\n    try {\n      // Load converter functions from database\n      const converters = await this.loadConverterFunctions(snapshotId);\n      \n      if (converters.length === 0) {\n        return [];\n      }\n\n      // Build type nodes and network graph\n      const nodes = await this.buildTypeNodes(converters, snapshotId);\n      \n      // Analyze centrality and canonicality\n      this.calculateCentralityScores(nodes);\n      \n      // Find conversion chains\n      const chains = this.findConversionChains(nodes);\n      \n      // Generate report\n      const report: ConverterNetworkReport = {\n        id: 'converter-network',\n        pattern: ['converter-functions'],\n        support: converters.length,\n        confidence: 1.0,\n        lift: 1.0,\n        types: nodes.map(n => n.typeId ?? n.typeName),\n        suggestedAction: this.generateSuggestedActions(nodes, chains),\n        impactScore: this.calculateImpactScore(nodes, chains),\n        nodes: this.converterOptions.canonicalOnly ? \n          nodes.filter(n => n.isCanonical) : nodes,\n        converters,\n        chains: this.converterOptions.showChains ? chains : [],\n        statistics: {\n          totalTypes: nodes.length,\n          totalConverters: converters.length,\n          averageConvertersPerType: nodes.length > 0 ? converters.length / nodes.length : 0,\n          canonicalTypes: nodes.filter(n => n.isCanonical).length,\n          redundantTypes: nodes.filter(n => !n.isCanonical).length,\n          longestChain: chains.length > 0 ? Math.max(...chains.map(c => c.steps.length)) : 0,\n          optimizableChains: chains.filter(c => c.canOptimize).length\n        }\n      };\n\n      return [report];\n    } catch (error) {\n      throw new Error(`Failed to analyze converter networks: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "81ec9eaf-c2a0-45e4-a577-3397ba697070",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 37,
          "totalLines": 53,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 6,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 6,
          "commentLines": 8,
          "codeToCommentRatio": 4.63,
          "halsteadVolume": 1190.8,
          "halsteadDifficulty": 8.44,
          "maintainabilityIndex": 31.4
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "8fba437e-bc52-54bc-abd6-df09585bf5ba",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6f60166d77c99982adc0b8b77ce3cc87ff8f5978ca2444ef2c3d766ceced4a08",
        "contentId": "0d38c5541044a165eb5d69a22ffa0634524a36c65fa6bfba6670cf6621049382",
        "name": "getCacheStats",
        "displayName": "TypePropertyAnalyzer.getCacheStats",
        "signature": "public TypePropertyAnalyzer.getCacheStats(): { size: number; hitRate?: number }",
        "signatureHash": "3d23a6cb8f4e712ca5cd01eb12562df332c0db0a068e1ef53aac3984ecb3fe47",
        "filePath": "/src/analyzers/type-property-analyzer.ts",
        "fileHash": "605306c38f6d2516e0512963d18b57c6",
        "startLine": 94,
        "endLine": 98,
        "startColumn": 2,
        "endColumn": 111,
        "astHash": "7f023ae20ce63fa9",
        "contextPath": [
          "TypePropertyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cache statistics\n   */\n  getCacheStats(): { size: number; hitRate?: number } {\n    return {\n      size: this.typeCache.size\n    };\n  }",
        "sourceFileRefId": "cd34ba5e-b57e-4627-abc8-4a93738fc3e3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 18.58,
          "halsteadDifficulty": 0.75,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cf2ed1d2-38ad-5a15-9cbc-ec578689ede0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "16a38d6bf20602a00848aee1326254706dd6954b4c585047988ff096fd67cb9a",
        "contentId": "64811599aad418f9e1eefcc4a5ceded9ba7bf35de1595e1391e5f99e30c881ce",
        "name": "constructor",
        "displayName": "SnapshotManager.constructor",
        "signature": "public SnapshotManager(private storage: StorageAdapter, private funcqcConfig: FuncqcConfig, config: Partial<AutomaticSnapshotConfig> = {}, logger?: Logger)",
        "signatureHash": "46583cb104b940f1afd9d645e6a822b5ddaa0c68336a27b0304b6409b2b9b6c8",
        "filePath": "/src/utils/snapshot-manager.ts",
        "fileHash": "749d205e4871f54ec6773da723ae887d",
        "startLine": 95,
        "endLine": 105,
        "startColumn": 2,
        "endColumn": 408,
        "astHash": "deaf4add9ea9503e",
        "contextPath": [
          "SnapshotManager"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(\n    private storage: StorageAdapter,\n    private funcqcConfig: FuncqcConfig,\n    config: Partial<AutomaticSnapshotConfig> = {},\n    logger?: Logger\n  ) {\n    this.logger = logger || new Logger(false, false);\n    this.config = { ...DefaultAutomaticSnapshotConfig, ...config };\n    this.projectRoot = funcqcConfig.roots[0] || process.cwd();\n    this.gitProvider = createDefaultGitProvider();\n  }",
        "sourceFileRefId": "26e6d46b-9cf7-44cf-8567-99320c847929",
        "parameters": [
          {
            "name": "storage",
            "type": "StorageAdapter",
            "typeSimple": "StorageAdapter",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "funcqcConfig",
            "type": "FuncqcConfig",
            "typeSimple": "FuncqcConfig",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "config",
            "type": "Partial<AutomaticSnapshotConfig>",
            "typeSimple": "Partial<AutomaticSnapshotConfig>",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          },
          {
            "name": "logger",
            "type": "Logger",
            "typeSimple": "Logger",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 4,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 180.94,
          "halsteadDifficulty": 3.47,
          "maintainabilityIndex": 75.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1c5d91c5-8153-503c-8033-17f1e02a6be5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "397b2eba5d37c0bebe3905a72b44f252578e1bc744e54373cb6b42aa42eade0e",
        "contentId": "46ab9df4d9cff0059c9114c69cadf4176dbb6c23b4df7b33655345fd1a69a688",
        "name": "detectCircularDependencies",
        "displayName": "TypeDependencyAnalyzer.detectCircularDependencies",
        "signature": "public TypeDependencyAnalyzer.detectCircularDependencies(dependencies: TypeDependency[]): CircularDependency[]",
        "signatureHash": "45a6def49b120849a3cde449892b73f71f5ad19567931dee966c0da317dd09b8",
        "filePath": "/src/analyzers/type-dependency-analyzer.ts",
        "fileHash": "e9557ede2981b324a2c27dec6ed36039",
        "startLine": 95,
        "endLine": 124,
        "startColumn": 2,
        "endColumn": 953,
        "astHash": "f8f7c256c89766c9",
        "contextPath": [
          "TypeDependencyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Detect circular dependencies among types using Tarjan's algorithm\n   */\n  detectCircularDependencies(dependencies: TypeDependency[]): CircularDependency[] {\n    // Filter and enhance dependencies with targetTypeId\n    const enhancedDependencies: TypeDependency[] = [];\n    \n    for (const dep of dependencies) {\n      const targetTypeId = dep.targetTypeId || this.getTypeIdFromName(dep.targetTypeName);\n      if (targetTypeId) {\n        enhancedDependencies.push({\n          ...dep,\n          targetTypeId\n        });\n      }\n    }\n\n    // Use Tarjan's algorithm via TypeSCCAnalyzer\n    const sccAnalyzer = new TypeSCCAnalyzer();\n    \n    // Build type name mapping for better display\n    const typeNameMapping = new Map<string, string>();\n    for (const [name, typeDef] of this.typeDefinitions) {\n      typeNameMapping.set(typeDef.id, name);\n    }\n    \n    const sccResult = sccAnalyzer.findStronglyConnectedComponents(\n      enhancedDependencies,\n      typeNameMapping\n    );\n\n    return sccResult.circularDependencies;\n  }",
        "sourceFileRefId": "4c50873c-9d83-4ace-a247-7f10f41fe5c4",
        "parameters": [
          {
            "name": "dependencies",
            "type": "TypeDependency[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 22,
          "totalLines": 35,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 272.05,
          "halsteadDifficulty": 2.42,
          "maintainabilityIndex": 55.55
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ca2cbbcb-3470-5def-84a4-8577ba877265",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a04da3ce393690e1fcd89006346fa510bb91aef61daedb0b8ad92f7a2b9733a6",
        "contentId": "d63efc0daa345bcbf31a26de1c32808e55ee1db628f54c4f323155ee4c2dae35",
        "name": "getStats",
        "displayName": "MemoryCacheProvider.getStats",
        "signature": "public MemoryCacheProvider.getStats(): void",
        "signatureHash": "776c7fd6b3fbc87e4ba881041ccc68352caab205e5bc8b598db4f609d80c76dd",
        "filePath": "/src/utils/cache-interfaces.ts",
        "fileHash": "64d387595ccd541422452b7c4729eab6",
        "startLine": 96,
        "endLine": 104,
        "startColumn": 2,
        "endColumn": 247,
        "astHash": "aae81f2617807a30",
        "contextPath": [
          "MemoryCacheProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "getStats() {\n    const total = this.stats.hits + this.stats.misses;\n    return {\n      totalEntries: this.cache.size,\n      hitRate: total > 0 ? this.stats.hits / total : 0,\n      hits: this.stats.hits,\n      misses: this.stats.misses\n    };\n  }",
        "sourceFileRefId": "2538e1f4-f94a-4249-9a24-61d732c7384f",
        "parameters": [],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 140.87,
          "halsteadDifficulty": 4.4,
          "maintainabilityIndex": 82.07
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6b6afc77-7a84-59d8-81e7-74a8dd8cb84c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f82786527fa593df6fe834d6833f533420188e8b064b7515d79a798bbb6eb620",
        "contentId": "7106501cfd4876479628d42bb1f6eb3cddcd9fe957f75240f752f579e6649f8c",
        "name": "parseJsonSafely",
        "displayName": "UtilityOperations.parseJsonSafely",
        "signature": "public UtilityOperations.parseJsonSafely(value: unknown, fallback: T): T",
        "signatureHash": "e87bbceaa3650adcdabef0db590d950b55b32f823a194fdab329698b2dadb08c",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 96,
        "endLine": 118,
        "startColumn": 2,
        "endColumn": 592,
        "astHash": "844ab3754003891f",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Parse JSON safely with fallback - handles PGLite auto-parsing\r\n   */\r\n  parseJsonSafely<T>(value: unknown, fallback: T): T {\r\n    // If the value is null or undefined, return fallback\r\n    if (value == null) {\r\n      return fallback;\r\n    }\r\n    \r\n    // If the value is not a string, it's likely already parsed by PGLite\r\n    if (typeof value !== 'string') {\r\n      return (value as T) ?? fallback;\r\n    }\r\n\r\n    // If it's an empty string, return the fallback\r\n    if (value === '') {\r\n      return fallback;\r\n    }\r\n\r\n    // If it is a string, try to parse it\r\n    try {\r\n      return JSON.parse(value) as T;\r\n    } catch {\r\n      return fallback;\r\n    }\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "value",
            "type": "unknown",
            "typeSimple": "unknown",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "fallback",
            "type": "T",
            "typeSimple": "T",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 16,
          "totalLines": 28,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 5,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 2.29,
          "halsteadVolume": 109.39,
          "halsteadDifficulty": 7.33,
          "maintainabilityIndex": 69.6
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f53fbeb0-aae6-53d6-b84a-dd33f5f634db",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8d5f5f8774c874b4ab9a523418762b22d286221e7562f4ab9aaea493bd12e926",
        "contentId": "c5cd67fe82d7e284c5d33bbdaea5e8b79836d38ee2c068211bf7d1b18e0ce1db",
        "name": "disposeProvider",
        "displayName": "GitFactory.disposeProvider",
        "signature": "public GitFactory.disposeProvider(config: GitFactoryConfig): void",
        "signatureHash": "597ee15ab6a665576a781e47a57cb65e82bf6f5822c8542667d8bdfc9c5874ea",
        "filePath": "/src/utils/git/git-factory.ts",
        "fileHash": "a4849dc9530f19deb7dfc4a85d852be2",
        "startLine": 99,
        "endLine": 108,
        "startColumn": 2,
        "endColumn": 325,
        "astHash": "3b0c6a771ab82571",
        "contextPath": [
          "GitFactory"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * ÁâπÂÆö„ÅÆ„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÁ†¥Ê£Ñ\n   */\n  disposeProvider(config: GitFactoryConfig): void {\n    const providerType = this.determineProviderType(config);\n    const cacheKey = this.generateCacheKey(providerType, config);\n\n    const provider = this.providers.get(cacheKey);\n    if (provider) {\n      provider.dispose();\n      this.providers.delete(cacheKey);\n    }\n  }",
        "sourceFileRefId": "c4b1cc11-8455-431e-bbbc-32803e554054",
        "parameters": [
          {
            "name": "config",
            "type": "GitFactoryConfig",
            "typeSimple": "GitFactoryConfig",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 157.17,
          "halsteadDifficulty": 1.47,
          "maintainabilityIndex": 81.25
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "44a8d74e-d320-59b3-a666-def67637529f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b9348004c32229677fed52e23ed7f0d45c31393033527e461cdd05ac61a0b715",
        "contentId": "a410f544c0bd28f8b4ee8b30e340c84396e5d42a7e7d4b2a15fce48e04aaa3f9",
        "name": "generateRefactoringPlan",
        "displayName": "HealthAnalysisService.generateRefactoringPlan",
        "signature": "public async HealthAnalysisService.generateRefactoringPlan(functions: FunctionInfo[]): Promise<RefactoringPlan[]>",
        "signatureHash": "5ee2a5eafc7392acf908cc075f12801aa9f7d7e96d7b0b309c2b0d087c5c5c0f",
        "filePath": "/src/services/health-analysis-service.ts",
        "fileHash": "624acfdf6eeb0a0e198dee79db60c596",
        "startLine": 103,
        "endLine": 127,
        "startColumn": 2,
        "endColumn": 966,
        "astHash": "085df60996676ce9",
        "contextPath": [
          "HealthAnalysisService"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generates comprehensive refactoring plans for multiple functions\n   * @param functions Array of function information to analyze\n   * @returns Sorted refactoring plans (highest priority first)\n   */\n  async generateRefactoringPlan(functions: FunctionInfo[]): Promise<RefactoringPlan[]> {\n    const plans: RefactoringPlan[] = [];\n    \n    for (const func of functions) {\n      const analysis = await this.analyzeFunction(func);\n      \n      const plan: RefactoringPlan = {\n        functionId: func.id,\n        functionName: func.displayName,\n        filePath: func.filePath,\n        complexity: func.metrics?.cyclomaticComplexity || 0,\n        healthSuggestions: analysis.healthSuggestions,\n        astSuggestions: analysis.astSuggestions,\n        priority: analysis.priority,\n        estimatedImpact: analysis.estimatedImpact,\n        claudePrompt: this.generateSmartPrompt(func, analysis.healthSuggestions),\n        targetPatterns: this.extractTargetPatterns(analysis.healthSuggestions, analysis.astSuggestions)\n      };\n      \n      plans.push(plan);\n    }\n    \n    // Sort by priority (highest first)\n    return plans.sort((a, b) => b.priority - a.priority);\n  }",
        "sourceFileRefId": "02ac5e3b-c6d8-4615-bda9-6fc7c84a49e0",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 20,
          "totalLines": 32,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 6,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 494.94,
          "halsteadDifficulty": 3.72,
          "maintainabilityIndex": 53.75
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "74508691-9c10-5508-bee2-c5865958ffdc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ccd2dbfead0bbcef478ba0983a3698e8688d610110ca34cf41655a66f235b81f",
        "contentId": "9c92587fecb290fe7a852b2f335bcadac3310ef7f88a8b26fb911159f94f83b9",
        "name": "findComponentsContaining",
        "displayName": "SCCAnalyzer.findComponentsContaining",
        "signature": "public SCCAnalyzer.findComponentsContaining(functionIds: string[], callEdges: CallEdge[]): StronglyConnectedComponent[]",
        "signatureHash": "aa211b77e0b47c60cfd2aed70ebfe8c8b6303712e11af083a9b9fa01b73ce6b5",
        "filePath": "/src/analyzers/scc-analyzer.ts",
        "fileHash": "11535fa1fa92f6cea52bd9a8c4a9600b",
        "startLine": 103,
        "endLine": 113,
        "startColumn": 2,
        "endColumn": 351,
        "astHash": "c8e43653072c3a70",
        "contextPath": [
          "SCCAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Find SCCs that include specific functions\n   */\n  findComponentsContaining(\n    functionIds: string[],\n    callEdges: CallEdge[]\n  ): StronglyConnectedComponent[] {\n    const result = this.findStronglyConnectedComponents(callEdges);\n    const targetSet = new Set(functionIds);\n    \n    return result.components.filter(component =>\n      component.functionIds.some(id => targetSet.has(id))\n    );\n  }",
        "sourceFileRefId": "311c8637-01f3-40c7-adba-837d533de127",
        "parameters": [
          {
            "name": "functionIds",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "callEdges",
            "type": "CallEdge[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 2,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 158.12,
          "halsteadDifficulty": 1.37,
          "maintainabilityIndex": 78.97
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "57b83f01-2c33-58c8-9441-6d51c8f3bd9d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9950220b95c782b6767ebb4cd2730c794d9b1348a0a8179bdfbce7c7bb75f31d",
        "contentId": "4958b170584bc19307374cf9e8c021c145636097f02fdb359ffd16a4f9b5f261",
        "name": "createDriver",
        "displayName": "PGliteDialect.createDriver",
        "signature": "public PGliteDialect.createDriver(): Driver",
        "signatureHash": "5ed128ee551da635016139d8925be4541b34685c4725a34b63e0bcd12a31f183",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 104,
        "endLine": 106,
        "startColumn": 2,
        "endColumn": 75,
        "astHash": "75ad42a61b38b9b8",
        "contextPath": [
          "PGliteDialect"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "createDriver(): Driver {\r\n    return new PGliteDriver(this.#config);\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d4b3eb13-826d-5ccf-88d0-5002c48e7b42",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0cae3095ae5b3e3767b3dbb9384bf3c7ac4dcfe35e46dc7c331a0ffdc4c88ed9",
        "contentId": "3cf6420b52173e67473f1d6e42e9acd939ea2e1bb025b83d58ad165f93f1f203",
        "name": "generateDeadCodeGraph",
        "displayName": "DotGenerator.generateDeadCodeGraph",
        "signature": "public DotGenerator.generateDeadCodeGraph(functions: FunctionInfo[], callEdges: CallEdge[], deadFunctions: Set<string>, options: Partial<DotGraphOptions> = {}): string",
        "signatureHash": "49bf36a5cf3ffb3758c239aa3790c8e978e7a8eb5b3f8eccf862437787032775",
        "filePath": "/src/visualization/dot-generator.ts",
        "fileHash": "a3a1cbdbbca7d6c04ce9e9995bfb7b84",
        "startLine": 105,
        "endLine": 115,
        "startColumn": 2,
        "endColumn": 369,
        "astHash": "55d8d246a965ff6f",
        "contextPath": [
          "DotGenerator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate DOT graph for dead code analysis\n   */\n  generateDeadCodeGraph(\n    functions: FunctionInfo[],\n    callEdges: CallEdge[],\n    deadFunctions: Set<string>,\n    options: Partial<DotGraphOptions> = {}\n  ): string {\n    const opts = { ...this.defaultOptions, ...options };\n    const graph = this.createDeadCodeGraph(functions, callEdges, deadFunctions, opts);\n    \n    return this.renderDotGraph(graph, opts);\n  }",
        "sourceFileRefId": "e6a8b060-c6ae-424c-95c6-5e3e00cda5d0",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "callEdges",
            "type": "CallEdge[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "deadFunctions",
            "type": "Set<string>",
            "typeSimple": "string",
            "position": 2,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "Partial<DotGraphOptions>",
            "typeSimple": "Partial<DotGraphOptions>",
            "position": 3,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 4,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 123.19,
          "halsteadDifficulty": 1.41,
          "maintainabilityIndex": 80.84
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bdc29cb1-652d-5763-976f-a50f7502c8fe",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fd633b3d8efa776f37642b3a7a97b10b4d251440a8a8222053a40d2d0f84333c",
        "contentId": "027ba6b9031f87b2c1f376e5a1f0c6af04612de3f456f1ef6b720618bb2d9e4a",
        "name": "getSafeDeletionCandidates",
        "displayName": "ConfidenceCalculator.getSafeDeletionCandidates",
        "signature": "public ConfidenceCalculator.getSafeDeletionCandidates(edges: IdealCallEdge[]): IdealCallEdge[]",
        "signatureHash": "c53203a29abcea0242377b3bcdf658142f0d075d9fb1506315ebc68dd86af46c",
        "filePath": "/src/analyzers/confidence-calculator.ts",
        "fileHash": "5193cd208af182ad06c7f7e425b975a4",
        "startLine": 105,
        "endLine": 111,
        "startColumn": 2,
        "endColumn": 218,
        "astHash": "97de76aea8fae51d",
        "contextPath": [
          "ConfidenceCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get safe deletion candidates (high confidence only)\n   */\n  getSafeDeletionCandidates(edges: IdealCallEdge[]): IdealCallEdge[] {\n    return edges.filter(edge => \n      edge.confidenceScore >= 0.95 &&\n      edge.calleeFunctionId &&\n      edge.candidates.length === 1\n    );\n  }",
        "sourceFileRefId": "e159adea-ad45-4c66-9f99-4d357207ccf9",
        "parameters": [
          {
            "name": "edges",
            "type": "IdealCallEdge[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 110.36,
          "halsteadDifficulty": 3.54,
          "maintainabilityIndex": 89.54
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "31037531-f18e-5207-9b24-9215ca537e99",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9b6c207e4b98a23b2f0a83ccb996269479e26bbb51fa12b0cecba4fc178a257f",
        "contentId": "abce2fec2a6ef95a4a1cf4b858d1db2c4593dbf22b28b65659d1cfdd0aefbcf1",
        "name": "conditionalLog",
        "displayName": "conditionalLog",
        "signature": "conditionalLog(message: string, options: JsonOptions): void",
        "signatureHash": "c29e105c40ded7e0f78c19223a211476c93b3ab306c17f4c48359fb5150b218c",
        "filePath": "/src/utils/format-helpers.ts",
        "fileHash": "5c0deefcfdcd2000f15d5b81b3a5a340",
        "startLine": 106,
        "endLine": 110,
        "startColumn": 0,
        "endColumn": 141,
        "astHash": "ef2f8fa109106f8e",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Conditional console output that respects JSON mode\n */\nexport function conditionalLog(message: string, options: JsonOptions): void {\n  if (!isJsonOutput(options)) {\n    console.log(message);\n  }\n}",
        "sourceFileRefId": "cc5d67dd-78db-42fb-8d08-e5018ed1e2c3",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "JsonOptions",
            "typeSimple": "JsonOptions",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 51.89,
          "halsteadDifficulty": 2.06,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4e797904-f55a-5fd5-b26a-868ccd9eafb5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3b193b832c8ce76ef5710dd3ffe26e78beb32febcd9846f180a194db91ea7bbf",
        "contentId": "c19d72446560ed7e78dd99f9d6a763c8371c6ef5cf01c069115c64a85a9a1e8a",
        "name": "getClassToInterfacesMap",
        "displayName": "CHAAnalysisStage.getClassToInterfacesMap",
        "signature": "public CHAAnalysisStage.getClassToInterfacesMap(): Map<string, string[]>",
        "signatureHash": "2af349cb211928802e2954ece15f6d11ddea8fca574c47b6500cb6ae2fda4d1b",
        "filePath": "/src/analyzers/staged-analysis/stages/cha-analysis.ts",
        "fileHash": "b562e39ff8a930fa0222614af4559af1",
        "startLine": 107,
        "endLine": 109,
        "startColumn": 2,
        "endColumn": 113,
        "astHash": "a9d109d8ebbe388b",
        "contextPath": [
          "CHAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get the class-to-interfaces mapping from CHA analyzer\r\n   */\r\n  getClassToInterfacesMap(): Map<string, string[]> {\r\n    return this.chaAnalyzer.getClassToInterfacesMap();\r\n  }",
        "sourceFileRefId": "084c83f8-b58c-4b04-9cf1-de4c67158b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 20.68,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7b4ce178-a27c-5285-896b-85b6fd81d1d9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2d9cd122063fdb8cebe9a363d8937cebea1348be15b8d844c6815b01b0c7be3c",
        "contentId": "68ee93512e555b5b25e5c2f6663b778c80145bdbed98cd47bce65a15e4f8568d",
        "name": "createQueryCompiler",
        "displayName": "PGliteDialect.createQueryCompiler",
        "signature": "public PGliteDialect.createQueryCompiler(): void",
        "signatureHash": "26bd59665765a57ae9c87a108cec40998e54009ac351837b93212ac1403a3f6a",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 108,
        "endLine": 110,
        "startColumn": 2,
        "endColumn": 71,
        "astHash": "325d580890f2fb9c",
        "contextPath": [
          "PGliteDialect"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "createQueryCompiler() {\r\n    return new PostgresQueryCompiler();\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "25648b76-25f3-5440-a047-ab7806bb7e81",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f2b8bed7f69bbf29d3b7df55a52b473bf73d58578fabd38c03a22b1c8bc0b5b6",
        "contentId": "bff9162264a5c4f39a015ef8f9951d2bf99c39b5d17e4f242eb3b9b59f0cd57b",
        "name": "createSnapshot",
        "displayName": "SnapshotManager.createSnapshot",
        "signature": "public async SnapshotManager.createSnapshot(options: SnapshotCreationOptions = {}): Promise<SnapshotInfo>",
        "signatureHash": "a1eb59fae94721e5b98b0eb699302dd91c4842583e239582500ead9b0bfee2f1",
        "filePath": "/src/utils/snapshot-manager.ts",
        "fileHash": "749d205e4871f54ec6773da723ae887d",
        "startLine": 110,
        "endLine": 159,
        "startColumn": 2,
        "endColumn": 1903,
        "astHash": "88c841e57940f0dd",
        "contextPath": [
          "SnapshotManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Create a snapshot of the current codebase state\n   */\n  async createSnapshot(options: SnapshotCreationOptions = {}): Promise<SnapshotInfo> {\n    try {\n      this.logger.info('Creating snapshot', { options });\n      \n      // Generate snapshot ID and basic metadata\n      const snapshotId = this.generateSnapshotId(options);\n      const timestamp = new Date();\n      \n      // Get Git information if requested\n      const gitInfo = options.includeGitInfo !== false ? await this.getGitInfo() : {};\n      \n      // Get current function analysis for metadata\n      const analysisMetadata = await this.getCurrentAnalysisMetadata();\n      \n      // Create snapshot record\n      const snapshot: SnapshotInfo = {\n        id: snapshotId,\n        createdAt: timestamp.getTime(),\n        label: options.label || this.generateDefaultLabel(options),\n        comment: options.comment || '',\n        gitCommit: gitInfo.commit || '',\n        gitBranch: gitInfo.branch || '',\n        gitTag: gitInfo.tag || '',\n        projectRoot: this.projectRoot,\n        configHash: await this.calculateConfigHash(),\n        scope: 'src', // Default scope for legacy compatibility\n        metadata: {\n          ...analysisMetadata,\n          ...options.metadata,\n        },\n      };\n      \n      // Note: In the current implementation, we create metadata but don't store the snapshot\n      // This is a Phase 4 stub that will be enhanced with full snapshot storage later\n      this.logger.info(`Snapshot metadata prepared: ${snapshotId}`, {\n        functions: snapshot.metadata.totalFunctions,\n        files: snapshot.metadata.totalFiles,\n      });\n      \n      return snapshot;\n      \n    } catch (error) {\n      this.logger.error('Failed to create snapshot', {\n        options,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      \n      throw new Error(`Snapshot creation failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "26e6d46b-9cf7-44cf-8567-99320c847929",
        "parameters": [
          {
            "name": "options",
            "type": "SnapshotCreationOptions",
            "typeSimple": "SnapshotCreationOptions",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 36,
          "totalLines": 55,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 10,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 3,
          "callbackCount": 0,
          "commentLines": 9,
          "codeToCommentRatio": 4,
          "halsteadVolume": 852.98,
          "halsteadDifficulty": 4.63,
          "maintainabilityIndex": 34.32
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2689847a-bec1-55b2-884b-3d4bfd6ee603",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "569256ae388ce64396dd82e99ecce79f2fbe026fbe136a1efe2e4fd8538e4629",
        "contentId": "3298dd50232e06234f7726a268b94c315c8279b55b2b0e19d2ea8274b4c5c541",
        "name": "isEnabled",
        "displayName": "CallbackConfigManager.isEnabled",
        "signature": "public CallbackConfigManager.isEnabled(): boolean",
        "signatureHash": "2febc8c4d276d32adf0d990134279e65eb75585a5cfc53c8ff5a0775eaf5ba33",
        "filePath": "/src/config/callback-config.ts",
        "fileHash": "7fe35677951f085e04545ae537d36a75",
        "startLine": 111,
        "endLine": 113,
        "startColumn": 2,
        "endColumn": 60,
        "astHash": "56be1faf210cc89e",
        "contextPath": [
          "CallbackConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if callback analysis is enabled globally\n   */\n  isEnabled(): boolean {\n    return this.load().enabled;\n  }",
        "sourceFileRefId": "06b4d7d0-2d82-4c1d-a91a-5d86b15df5c3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fedc13cf-acf0-5377-8815-92a0314db39e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6284c5b599d8fcf04859e7e40e2755741b0830a9ff315afa9edc094a7fa8178f",
        "contentId": "05565c12f3cd9d7787aa3545cdd220266ca88b6347d70d2dde11a1e0334bbd9b",
        "name": "finish",
        "displayName": "ProgressBar.finish",
        "signature": "public ProgressBar.finish(message?: string): void",
        "signatureHash": "2192fff730d519a855be3962946552e3fb3c8627612f9892053ef1d4621cdbdf",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 112,
        "endLine": 117,
        "startColumn": 2,
        "endColumn": 141,
        "astHash": "7bd9bf5e3cfd84c5",
        "contextPath": [
          "ProgressBar"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "finish(message?: string): void {\n    process.stdout.write('\\n');\n    if (message) {\n      console.log(chalk.green('‚úì'), message);\n    }\n  }",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 8,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 92,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 94.74
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "afe8b8cc-31d1-51df-a611-fd2736c1a2b8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6db36d6ffc4dcb66e7087be86d2e02a2c5338d80f73a8498e85af0751cc1cb8d",
        "contentId": "3c6ad66f204d91fe5d91591387c7a704688a53c91af3028a736a1fe839840574",
        "name": "createAdapter",
        "displayName": "PGliteDialect.createAdapter",
        "signature": "public PGliteDialect.createAdapter(): void",
        "signatureHash": "20c9b4142e8ec3f7526588bd3aaa9c3709be68104b8d327e431f70897220089e",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 112,
        "endLine": 114,
        "startColumn": 2,
        "endColumn": 59,
        "astHash": "db8a495047741131",
        "contextPath": [
          "PGliteDialect"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "createAdapter() {\r\n    return new PostgresAdapter();\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1865bc00-657e-5208-b020-45ce85f5e811",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d9ec4ab5f4dedbfbcfafdd8242620d380755ce349f23bb059f2e6957dc18635d",
        "contentId": "a4f235006b42ac88c08c63e9868f01afa2b614e185e567bb1a437d4efea67840",
        "name": "analyze",
        "displayName": "CochangeAnalyzer.analyze",
        "signature": "public async CochangeAnalyzer.analyze(snapshotId?: string): Promise<CochangeAnalysisReport[]>",
        "signatureHash": "4718c54bc73f58415c8533b512194cd396630c0d8ee3c5ca0fb8ac68a299285e",
        "filePath": "/src/analyzers/type-insights/cochange-analyzer.ts",
        "fileHash": "5e70f116270d9767dafc586947f4fb97",
        "startLine": 113,
        "endLine": 195,
        "startColumn": 2,
        "endColumn": 3205,
        "astHash": "24956ce811595bb6",
        "contextPath": [
          "CochangeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Main analysis method\n   */\n  async analyze(snapshotId?: string): Promise<CochangeAnalysisReport[]> {\n    try {\n      if (!this.gitProvider) {\n        return [{\n          id: 'cochange-analysis',\n          pattern: ['git-history-required'],\n          support: 0,\n          confidence: 0,\n          lift: 0,\n          types: [],\n          suggestedAction: 'Git provider required for co-change analysis',\n          impactScore: 0,\n          typeChanges: [],\n          cochangeMatrix: [],\n          moduleSuggestions: [],\n          statistics: {\n            totalTypes: 0,\n            analyzedCommits: 0,\n            timeSpan: '0 months',\n            averageChangesPerType: 0,\n            mostVolatileType: 'N/A',\n            strongestCoupling: 'N/A',\n            suggestedModuleCount: 0\n          }\n        }];\n      }\n\n      // Load type information and map to files\n      const typeFileMap = await this.loadTypeFileMapping(snapshotId);\n      \n      if (typeFileMap.size === 0) {\n        return [];\n      }\n\n      // Get Git commit history\n      const commits = await this.gitProvider.getCommitHistory({\n        monthsBack: this.cochangeOptions.monthsBack,\n        maxCommits: this.cochangeOptions.maxCommits,\n        excludePaths: this.cochangeOptions.excludePaths\n      });\n\n      // Analyze type changes\n      const typeChanges = this.analyzeTypeChanges(commits, typeFileMap);\n      \n      // Calculate co-change relationships\n      const cochangeMatrix = this.calculateCochangeMatrix(commits, typeFileMap, typeChanges);\n      \n      // Generate module suggestions\n      const moduleSuggestions = this.cochangeOptions.suggestModules \n        ? this.generateModuleSuggestions(cochangeMatrix, typeChanges)\n        : [];\n\n      // Generate report\n      const report: CochangeAnalysisReport = {\n        id: 'cochange-analysis',\n        pattern: ['temporal-coupling'],\n        support: typeChanges.length,\n        confidence: this.calculateOverallConfidence(cochangeMatrix),\n        lift: 1.0,\n        types: typeChanges.map(tc => tc.typeId),\n        suggestedAction: this.generateSuggestedActions(cochangeMatrix, moduleSuggestions),\n        impactScore: this.calculateImpactScore(typeChanges, cochangeMatrix),\n        typeChanges: typeChanges.filter(tc => tc.changeCount >= this.cochangeOptions.minChanges),\n        cochangeMatrix: this.cochangeOptions.showMatrix ? cochangeMatrix : \n          cochangeMatrix.filter(rel => rel.temporalCoupling >= this.cochangeOptions.cochangeThreshold),\n        moduleSuggestions,\n        statistics: {\n          totalTypes: typeChanges.length,\n          analyzedCommits: commits.length,\n          timeSpan: `${this.cochangeOptions.monthsBack} months`,\n          averageChangesPerType: typeChanges.length > 0 ? \n            typeChanges.reduce((sum, tc) => sum + tc.changeCount, 0) / typeChanges.length : 0,\n          mostVolatileType: this.findMostVolatileType(typeChanges),\n          strongestCoupling: this.findStrongestCoupling(cochangeMatrix),\n          suggestedModuleCount: moduleSuggestions.length\n        }\n      };\n\n      return [report];\n    } catch (error) {\n      throw new Error(`Failed to analyze co-change patterns: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "c5a41cdc-8e3c-4c88-a677-6f2dd99587bb",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 69,
          "totalLines": 88,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 3,
          "branchCount": 6,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 4,
          "commentLines": 9,
          "codeToCommentRatio": 7.67,
          "halsteadVolume": 1587.9,
          "halsteadDifficulty": 9.71,
          "maintainabilityIndex": 14.91
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "Implements 1 abstract base method(s)",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0.8
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0.8,
        "protectionReason": "Implements 1 abstract base method(s)",
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 1
        }
      }
    },
    {
      "functionInfo": {
        "id": "2030a22d-ff3e-51d9-b97e-86fdfd7521bc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "595d164367a2418f83ed580064670b1ace2f3ea6949ec48b5730dbce22b6a32f",
        "contentId": "d5f81114b80b3c0fae1a4a956f37b5c851473b6572d61c95f6df70f1fae26841",
        "name": "getStorage",
        "displayName": "getStorage",
        "signature": "async getStorage(options?: {\r\n  config?: FuncqcConfig;\r\n  logger?: Logger;\r\n}): Promise<PGLiteStorageAdapter>",
        "signatureHash": "db9797fa56dd3b831d961ede4b2df283b5b5bb1f8d7f114918915659456625be",
        "filePath": "/src/core/storage-provider.ts",
        "fileHash": "7e9f868c8caa9c253d64cb1dadab0f43",
        "startLine": 114,
        "endLine": 120,
        "startColumn": 0,
        "endColumn": 221,
        "astHash": "6a5cbf6bcbf6c574",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n * Convenience function to get storage adapter\r\n */\r\nexport async function getStorage(options?: {\r\n  config?: FuncqcConfig;\r\n  logger?: Logger;\r\n}): Promise<PGLiteStorageAdapter> {\r\n  const provider = StorageProvider.getInstance();\r\n  return provider.getStorage(options);\r\n}",
        "sourceFileRefId": "6d1f4c74-8b98-416a-9241-8ba2aca8f936",
        "parameters": [
          {
            "name": "options",
            "type": "{\r\n  config?: FuncqcConfig;\r\n  logger?: Logger;\r\n}",
            "typeSimple": "{\r\n  config?: FuncqcConfig;\r\n  logger?: Logger;\r\n}",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 78.14,
          "halsteadDifficulty": 1.23,
          "maintainabilityIndex": 92.59
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bc35fe0b-9809-5867-8130-a4d5be62641b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e4457a9abf466d5edf4a6a4ee6d7ca63458e9aae80050f7ae2594383e4bcbf78",
        "contentId": "b048f5cdbc590dbfbbe5b47d45c9298004a83a09e7d1ed933a9c4b89bb3c02be",
        "name": "reset",
        "displayName": "CHAAnalysisStage.reset",
        "signature": "public CHAAnalysisStage.reset(): void",
        "signatureHash": "981465697efc86c5c58165be03853dfdc6b002c0186e3e89a574d57733feea57",
        "filePath": "/src/analyzers/staged-analysis/stages/cha-analysis.ts",
        "fileHash": "b562e39ff8a930fa0222614af4559af1",
        "startLine": 115,
        "endLine": 118,
        "startColumn": 2,
        "endColumn": 146,
        "astHash": "45f1780a0025da30",
        "contextPath": [
          "CHAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Reset analyzer state for fresh analysis\r\n   */\r\n  reset(): void {\r\n    // The CHA analyzer handles its own state management\r\n    // This method is provided for consistency with other stages\r\n  }",
        "sourceFileRefId": "084c83f8-b58c-4b04-9cf1-de4c67158b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 0.4,
          "halsteadVolume": 0,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "23d9a50e-f7a2-5ba5-8eed-72733f92238c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fceeadedc0ca04290b1ccd560e40987fe7e0231e3aceee40eb680a58b30bea7a",
        "contentId": "4b13e0d693cfd362db61589f6e796c8111ef6ff571358112cce1fddb7ffb0ee5",
        "name": "errorLog",
        "displayName": "errorLog",
        "signature": "errorLog(message: string): void",
        "signatureHash": "5efbaeab51e229ea12cd30704182fca8c4a6accc05ae47f5bce23673996c0b59",
        "filePath": "/src/utils/format-helpers.ts",
        "fileHash": "5c0deefcfdcd2000f15d5b81b3a5a340",
        "startLine": 115,
        "endLine": 117,
        "startColumn": 0,
        "endColumn": 77,
        "astHash": "11558b86fbe1aa29",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Error output that always goes to stderr\n */\nexport function errorLog(message: string): void {\n  console.error(message);\n}",
        "sourceFileRefId": "cc5d67dd-78db-42fb-8d08-e5018ed1e2c3",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 22.46,
          "halsteadDifficulty": 1.2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6e4f436b-c541-577c-baaa-d4ea233f8ab5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8ec727f5d4f6606a7fb265bca0c3b55e6ffb44350e53df5bc3e9f5c7b2ddb4ae",
        "contentId": "0b45f368583aa9f98e7251823bb608ceccb668d4f02f852f0138cd4ef398b6a9",
        "name": "createIntrospector",
        "displayName": "PGliteDialect.createIntrospector",
        "signature": "public PGliteDialect.createIntrospector(db: Kysely<unknown>): void",
        "signatureHash": "41b94797f1a9da0f9bfac1c3c9cfdd6651f0e0ea7fc1b7c43076305c17a88631",
        "filePath": "/src/storage/dialects/pglite-dialect.ts",
        "fileHash": "e18569593095b95b4c48ade8f743204e",
        "startLine": 116,
        "endLine": 118,
        "startColumn": 2,
        "endColumn": 90,
        "astHash": "d539b888d3f9e78e",
        "contextPath": [
          "PGliteDialect"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "createIntrospector(db: Kysely<unknown>) {\r\n    return new PostgresIntrospector(db);\r\n  }",
        "sourceFileRefId": "a9e72206-4cf3-45a6-b76d-1eeab3b81ffa",
        "parameters": [
          {
            "name": "db",
            "type": "Kysely<unknown>",
            "typeSimple": "Kysely<unknown>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 10,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1ba42339-89d1-5e58-9763-f8245853f9ce",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e34278604df1ff9d40364e12175e83f794e00929e1546f9b6aeca90fbb347c1c",
        "contentId": "0d626dd64f1f1a572ddf7f15d348e9794f0bcacbcc55be0137e569c2b98192d3",
        "name": "handleShutdown",
        "displayName": "GracefulShutdown.handleShutdown",
        "signature": "private async GracefulShutdown.handleShutdown(): void",
        "signatureHash": "3cd3e4e4b62a98fb2208adb155d0a1aeac8a7617f97a23e30f4a566532d2f63b",
        "filePath": "/src/utils/graceful-shutdown.ts",
        "fileHash": "11a7a9685e56eccff04242557a840f62",
        "startLine": 116,
        "endLine": 142,
        "startColumn": 2,
        "endColumn": 823,
        "astHash": "dd402005a33dcd11",
        "contextPath": [
          "GracefulShutdown"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "private async handleShutdown() {\n    if (this.isShuttingDown) {\n      console.log('\\nüö® Force shutdown requested...');\n      await this.forceShutdown();\n      return;\n    }\n\n    this.isShuttingDown = true;\n    console.log('\\nüõë Graceful shutdown initiated...');\n\n    // Set timeout for emergency shutdown\n    const emergencyTimeout = setTimeout(() => {\n      console.log('‚è∞ Shutdown timeout reached. Emergency shutdown...');\n      this.emergencyShutdown();\n    }, this.shutdownTimeout);\n\n    try {\n      await this.performGracefulShutdown();\n      clearTimeout(emergencyTimeout);\n      console.log('‚úÖ Graceful shutdown completed');\n      process.exit(0);\n    } catch (error) {\n      console.error('‚ùå Error during graceful shutdown:', error);\n      clearTimeout(emergencyTimeout);\n      this.emergencyShutdown();\n    }\n  }",
        "sourceFileRefId": "ccb30b80-4951-451a-9d5f-610e31c2c7b8",
        "parameters": [],
        "metrics": {
          "linesOfCode": 23,
          "totalLines": 29,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 1,
          "codeToCommentRatio": 23,
          "halsteadVolume": 359.49,
          "halsteadDifficulty": 2.71,
          "maintainabilityIndex": 52.88
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2f78fc9e-ee24-5819-8ae3-2b497da23d9c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "25dd0a1c3bae793bde59d73704f39dd5628202e7329b87fa414227891dd0fd3c",
        "contentId": "efd8269d3ba56bee2b68fa6219dbf24222d7d326a575011d49ecb3e8420a1eda",
        "name": "has",
        "displayName": "LRUCache.has",
        "signature": "public LRUCache.has(key: string): boolean",
        "signatureHash": "e3fc6dffcfd29b670ae08a81dc0039f3d8befe6fed0d3bcb8c273a252e1cc5da",
        "filePath": "/src/utils/lru-cache.ts",
        "fileHash": "9e7cc25d9187f13519d1dd204cf365bd",
        "startLine": 116,
        "endLine": 130,
        "startColumn": 2,
        "endColumn": 288,
        "astHash": "e5e818577922b525",
        "contextPath": [
          "LRUCache"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if key exists in cache\n   */\n  has(key: string): boolean {\n    const entry = this.cache.get(key);\n    \n    if (!entry) {\n      return false;\n    }\n\n    // Check TTL expiration\n    if (this.maxAge && Date.now() - entry.accessTime > this.maxAge) {\n      this.delete(key);\n      return false;\n    }\n\n    return true;\n  }",
        "sourceFileRefId": "63e260d6-11da-45e1-9a89-1aaec4b385b2",
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 20,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 3,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2.75,
          "halsteadVolume": 135.93,
          "halsteadDifficulty": 4.15,
          "maintainabilityIndex": 77.19
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6bacd91d-b279-5616-8980-c6809cb950ab",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b146a3eabb81e7045d7a078964a5f8c900f77208659c564733f30d0fead0f52b",
        "contentId": "d4ce31e7b814476c7474c08feba4b2e69c1a02483503e6220ff1d5da77e06742",
        "name": "getReviewCandidates",
        "displayName": "ConfidenceCalculator.getReviewCandidates",
        "signature": "public ConfidenceCalculator.getReviewCandidates(edges: IdealCallEdge[]): IdealCallEdge[]",
        "signatureHash": "e250650598ac65b4d406e87a1d334033c0c6b4bac4e4965b1b7ff5fc6ddc4691",
        "filePath": "/src/analyzers/confidence-calculator.ts",
        "fileHash": "5193cd208af182ad06c7f7e425b975a4",
        "startLine": 116,
        "endLine": 121,
        "startColumn": 2,
        "endColumn": 180,
        "astHash": "91a11eee72cd19d5",
        "contextPath": [
          "ConfidenceCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get edges requiring manual review\n   */\n  getReviewCandidates(edges: IdealCallEdge[]): IdealCallEdge[] {\n    return edges.filter(edge => \n      edge.confidenceScore >= 0.7 && \n      edge.confidenceScore < 0.95\n    );\n  }",
        "sourceFileRefId": "e159adea-ad45-4c66-9f99-4d357207ccf9",
        "parameters": [
          {
            "name": "edges",
            "type": "IdealCallEdge[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 79.95,
          "halsteadDifficulty": 3.89,
          "maintainabilityIndex": 95.79
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7e5697da-9a6b-5fd7-bd57-9b2149454442",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "538ab933cc7378f8ddacc7495d7451acef0f20be8be1dcec18546b9222dd0528",
        "contentId": "63bed7ae188c9ac4074a6caad9a99a9fc505ba9a30e92026dbf2fc84e83e11a1",
        "name": "isFrameworkEnabled",
        "displayName": "CallbackConfigManager.isFrameworkEnabled",
        "signature": "public CallbackConfigManager.isFrameworkEnabled(frameworkName: string): boolean",
        "signatureHash": "e0514e8782df6c92ee8c8ce209a6da7b96d075ffcc2e370463755c80da0651e0",
        "filePath": "/src/config/callback-config.ts",
        "fileHash": "7fe35677951f085e04545ae537d36a75",
        "startLine": 118,
        "endLine": 121,
        "startColumn": 2,
        "endColumn": 172,
        "astHash": "aa23ac9eff9dbd0c",
        "contextPath": [
          "CallbackConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if a specific framework is enabled\n   */\n  isFrameworkEnabled(frameworkName: string): boolean {\n    const frameworkConfig = this.getFrameworkConfig(frameworkName);\n    return frameworkConfig?.enabled ?? false;\n  }",
        "sourceFileRefId": "06b4d7d0-2d82-4c1d-a91a-5d86b15df5c3",
        "parameters": [
          {
            "name": "frameworkName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 38.04,
          "halsteadDifficulty": 2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "70ca2dda-bdab-53a0-9fc4-dd12384cef7b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f1cc24310009a6d8e24f8f09d6edad0d93cd256d07be661330d4c7067db74262",
        "contentId": "4dcf59f723b89c8c75b34771dea17727908226c03b0b4760acbba372afa39e66",
        "name": "getClearCoordinator",
        "displayName": "getClearCoordinator",
        "signature": "getClearCoordinator(): ClearCoordinator",
        "signatureHash": "f7d024ef3d28b97df97aabaf46ba13290bceb797e81e03141388dacdbb1546ad",
        "filePath": "/src/utils/clear-coordinator.ts",
        "fileHash": "5f2bb83eaae3419dad1653dc0eff694e",
        "startLine": 120,
        "endLine": 125,
        "startColumn": 0,
        "endColumn": 173,
        "astHash": "bab5b3888e71ba27",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Get the singleton ClearCoordinator instance\n */\nexport function getClearCoordinator(): ClearCoordinator {\n  if (!coordinatorInstance) {\n    coordinatorInstance = new ClearCoordinator();\n  }\n  return coordinatorInstance;\n}",
        "sourceFileRefId": "4f071925-8b13-4538-a189-e09a481c659e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 18.58,
          "halsteadDifficulty": 2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "caf61f83-2e23-5281-bf5a-e2a714f24751",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "44d529e2a320096540e3361a63c5a83e83fc311d6f885f117eafd4814ef4697f",
        "contentId": "c5bf9d677d41abd8a58f5205399e3a173cabbcfa0d37c55ea1f3b48b630910f0",
        "name": "getAnalysisStatistics",
        "displayName": "RTAAnalysisStage.getAnalysisStatistics",
        "signature": "public RTAAnalysisStage.getAnalysisStatistics(): {\r\n    candidatesAnalyzed: number;\r\n    edgesGenerated: number;\r\n    reductionRate: number;\r\n  }",
        "signatureHash": "18aafd4466aec77677cf57884c022727cfea2584b03b9ddd10d53386a80c12b3",
        "filePath": "/src/analyzers/staged-analysis/stages/rta-analysis.ts",
        "fileHash": "1c64024e3f89ea38aa7598ff26057f3d",
        "startLine": 121,
        "endLine": 133,
        "startColumn": 2,
        "endColumn": 331,
        "astHash": "81b3b3467a4111e4",
        "contextPath": [
          "RTAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get statistics about RTA analysis effectiveness\r\n   */\r\n  getAnalysisStatistics(): {\r\n    candidatesAnalyzed: number;\r\n    edgesGenerated: number;\r\n    reductionRate: number;\r\n  } {\r\n    // The RTAAnalyzer should provide these statistics\r\n    // For now, return placeholder values\r\n    return {\r\n      candidatesAnalyzed: 0,\r\n      edgesGenerated: 0,\r\n      reductionRate: 0\r\n    };\r\n  }",
        "sourceFileRefId": "90f5114e-03b8-42f9-af36-0c77cb9c0003",
        "parameters": [],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 18,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 2.2,
          "halsteadVolume": 23.22,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 91.13
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bb3a6fcf-aeb1-5196-a698-786078a3b9bc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a3a2940d13a998dbd9917341c7d79a5a2fe3a9dabecf1b402045d4f7012617cb",
        "contentId": "ee0aaeaef7bc8c2cd2072220f9704cf349491b022c7b3d7d36fa787e7016a0c2",
        "name": "calculateTypeMetrics",
        "displayName": "TypeAnalyzer.calculateTypeMetrics",
        "signature": "public TypeAnalyzer.calculateTypeMetrics(typeDefinition: TypeDefinition): TypeMetrics",
        "signatureHash": "d252696abead15d8c27c48b46837b91c011ea349211619b65f31da2f1a2e6bee",
        "filePath": "/src/analyzers/type-analyzer.ts",
        "fileHash": "5e5c2c7d89ad8630994a47040d7774e9",
        "startLine": 121,
        "endLine": 129,
        "startColumn": 2,
        "endColumn": 329,
        "astHash": "77a5b5c3223b1880",
        "contextPath": [
          "TypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate comprehensive metrics for a type definition using AST-based analysis.\n   * This replaces the previous string-based parsing with proper TypeScript AST traversal.\n   * \n   * @param typeDefinition - The type definition to analyze\n   * @returns Calculated metrics including field count, nesting depth, etc.\n   */\n  calculateTypeMetrics(typeDefinition: TypeDefinition): TypeMetrics {\n    try {\n      // Use AST-based analysis for accurate metrics calculation\n      return this.astMetrics.calculateMetrics(typeDefinition);\n    } catch {\n      // Fallback to default metrics if AST analysis fails\n      return this.getDefaultMetrics();\n    }\n  }",
        "sourceFileRefId": "a23a5da6-c06e-484d-821c-ccaed55bed7e",
        "parameters": [
          {
            "name": "typeDefinition",
            "type": "TypeDefinition",
            "typeSimple": "TypeDefinition",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 18,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 9,
          "codeToCommentRatio": 0.78,
          "halsteadVolume": 51.89,
          "halsteadDifficulty": 1.11,
          "maintainabilityIndex": 95.43
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1b32a066-d113-5afb-bad7-68dbd97e796d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2781bad00c803beaabf6a6f3affba5921073b9c162d6d848ce4d99f3493ea0f5",
        "contentId": "a5b4e0aefb768b3ca059b65a7484705d1a4b6f9387c93547bed6208bf758649f",
        "name": "isValidSnapshotId",
        "displayName": "UtilityOperations.isValidSnapshotId",
        "signature": "public UtilityOperations.isValidSnapshotId(id: string): boolean",
        "signatureHash": "46da852fb2a459cc95ca775fd0b1c31784a4286106116206f963cd073a123998",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 123,
        "endLine": 127,
        "startColumn": 2,
        "endColumn": 210,
        "astHash": "58c96853e917de9a",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Validate snapshot ID format\r\n   */\r\n  isValidSnapshotId(id: string): boolean {\r\n    // UUID v4 format validation\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n    return uuidRegex.test(id);\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1,
          "halsteadVolume": 30,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "26c73a04-c457-5306-b930-7b81e6aa5924",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a7af48be76fb9eef735e7edae651783a12392eed2a8311b048677d297937fe53",
        "contentId": "c8807a98e0765f00ae830390593e35ee63287648ece0ee17df6a9757613fda99",
        "name": "getMethodImplementationInfo",
        "displayName": "CHATypeSystemAnalysisStage.getMethodImplementationInfo",
        "signature": "public async CHATypeSystemAnalysisStage.getMethodImplementationInfo(functionId: string, snapshotId: string): Promise<{\n    isInterfaceImplementation: boolean;\n    isMethodOverride: boolean;\n    implementedInterfaces: string[];\n    overriddenMethods: string[];\n  }>",
        "signatureHash": "1b6f73bc534a5f3a300f81bd6a02a611632786e38ce741dec50dc09e3e81449d",
        "filePath": "/src/analyzers/staged-analysis/stages/cha-type-system-analysis.ts",
        "fileHash": "ad0a665a550768cbc495980cda70eaad",
        "startLine": 124,
        "endLine": 131,
        "startColumn": 2,
        "endColumn": 326,
        "astHash": "c439c53e49a85b1f",
        "contextPath": [
          "CHATypeSystemAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get method implementation info for deletion safety analysis\n   */\n  async getMethodImplementationInfo(functionId: string, snapshotId: string): Promise<{\n    isInterfaceImplementation: boolean;\n    isMethodOverride: boolean;\n    implementedInterfaces: string[];\n    overriddenMethods: string[];\n  }> {\n    return this.chaTypeIntegration.getMethodImplementationInfo(functionId, snapshotId);\n  }",
        "sourceFileRefId": "5d8603f9-dd33-4f4f-96dd-0df08fe38910",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 57.36,
          "halsteadDifficulty": 1.3,
          "maintainabilityIndex": 91.79
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2a47c32b-1465-5c2e-92eb-841029ab2a5d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "17bd82be63fc49bd388c6fafb6125b561536d7d85202dc72b61ee9d23e0109f8",
        "contentId": "d324a9d30937aa7968718c9c098c294b24518b9c83ee01528747c9b5faf60bf8",
        "name": "runPerformanceComparison",
        "displayName": "runPerformanceComparison",
        "signature": "async runPerformanceComparison(): Promise<void>",
        "signatureHash": "6e2eec5e08f7ee718ea759828ff0c059f7fd4e717556ea4fc84453f250b739e1",
        "filePath": "/src/benchmarks/performance-comparison.ts",
        "fileHash": "dfba80e67a0f26c694e92dfd3b15274a",
        "startLine": 125,
        "endLine": 290,
        "startColumn": 0,
        "endColumn": 7022,
        "astHash": "cd6c8b8b0d5b9c34",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Test function for performance comparison\n */\nasync function runPerformanceComparison(): Promise<void> {\n  console.log('üöÄ Starting CallGraphAnalyzer Performance Comparison');\n  console.log('================================================\\n');\n\n  // Create test project\n  const project = new Project({\n    skipAddingFilesFromTsConfig: true,\n    skipFileDependencyResolution: true,\n    skipLoadingLibFiles: true,\n  });\n\n  // Add sample files to test\n  const testFiles = [\n    'src/cli/commands/health/risk-evaluator.ts',\n    'src/analyzers/call-graph-analyzer.ts',\n    'src/analyzers/symbol-resolver.ts',\n    'src/core/analyzer.ts',\n    'src/utils/lazy-analysis.ts'\n  ];\n\n  // Load test files\n  for (const filePath of testFiles) {\n    try {\n      project.addSourceFileAtPath(filePath);\n    } catch (error) {\n      console.log(`‚ö†Ô∏è Could not load ${filePath}: ${error}`);\n    }\n  }\n\n  const sourceFiles = project.getSourceFiles();\n  console.log(`üìÅ Loaded ${sourceFiles.length} test files for comparison\\n`);\n\n  if (sourceFiles.length === 0) {\n    console.log('‚ùå No source files loaded. Cannot perform comparison.');\n    return;\n  }\n\n  // Test with baseline (no cache)\n  console.log('üìä Running baseline test (no caching)...');\n  const baselineAnalyzer = new NoCacheCallGraphAnalyzer();\n  const baselineStart = performance.now();\n  \n  let baselineEdges = 0;\n  for (const sourceFile of sourceFiles.slice(0, 3)) { // Test first 3 files\n    const functionMap = new Map();\n    // Create dummy function map for testing\n    sourceFile.forEachDescendant(node => {\n      if (Node.isFunctionDeclaration(node) || Node.isMethodDeclaration(node)) {\n        const name = node.getName?.() || 'anonymous';\n        const id = `test-${Math.random().toString(36).substr(2, 9)}`;\n        functionMap.set(name, {\n          id,\n          name,\n          startLine: node.getStartLineNumber(),\n          endLine: node.getEndLineNumber()\n        });\n      }\n    });\n\n    if (functionMap.size > 0) {\n      try {\n        const edges = await baselineAnalyzer.analyzeFile(sourceFile.getFilePath(), functionMap);\n        baselineEdges += edges.length;\n      } catch (error) {\n        console.log(`‚ö†Ô∏è Error analyzing ${sourceFile.getFilePath()}: ${error}`);\n      }\n    }\n  }\n  \n  const baselineTime = performance.now() - baselineStart;\n  const baselineMetrics = baselineAnalyzer.getBaselineMetrics();\n  \n  console.log(`‚úÖ Baseline completed in ${baselineTime.toFixed(2)}ms`);\n  console.log(`   Generated ${baselineEdges} call edges\\n`);\n\n  // Test with optimized version (with caching)\n  console.log('üöÄ Running optimized test (with caching)...');\n  const optimizedAnalyzer = new CallGraphAnalyzer(project, true);\n  const optimizedStart = performance.now();\n  \n  let optimizedEdges = 0;\n  for (const sourceFile of sourceFiles.slice(0, 3)) { // Test same 3 files\n    const functionMap = new Map();\n    // Create same dummy function map for testing\n    sourceFile.forEachDescendant(node => {\n      if (Node.isFunctionDeclaration(node) || Node.isMethodDeclaration(node)) {\n        const name = node.getName?.() || 'anonymous';\n        const id = `test-${Math.random().toString(36).substr(2, 9)}`;\n        functionMap.set(name, {\n          id,\n          name,\n          startLine: node.getStartLineNumber(),\n          endLine: node.getEndLineNumber()\n        });\n      }\n    });\n\n    if (functionMap.size > 0) {\n      try {\n        const edges = await optimizedAnalyzer.analyzeFile(sourceFile.getFilePath(), functionMap);\n        optimizedEdges += edges.length;\n      } catch (error) {\n        console.log(`‚ö†Ô∏è Error analyzing ${sourceFile.getFilePath()}: ${error}`);\n      }\n    }\n  }\n  \n  const optimizedTime = performance.now() - optimizedStart;\n  const optimizedMetrics = optimizedAnalyzer.getPerformanceMetrics();\n\n  console.log(`‚úÖ Optimized completed in ${optimizedTime.toFixed(2)}ms`);\n  console.log(`   Generated ${optimizedEdges} call edges\\n`);\n\n  // Performance comparison results\n  console.log('üìà PERFORMANCE COMPARISON RESULTS');\n  console.log('=====================================\\n');\n\n  console.log(`‚è±Ô∏è  Total Execution Time:`);\n  console.log(`   Baseline (no cache): ${baselineTime.toFixed(2)}ms`);\n  console.log(`   Optimized (cached):  ${optimizedTime.toFixed(2)}ms`);\n  console.log(`   Improvement:         ${((baselineTime - optimizedTime) / baselineTime * 100).toFixed(1)}%\\n`);\n\n  console.log(`üîÑ Call Edges Generated:`);\n  console.log(`   Baseline:  ${baselineEdges} edges`);\n  console.log(`   Optimized: ${optimizedEdges} edges`);\n  console.log(`   Difference: ${optimizedEdges - baselineEdges} edges\\n`);\n\n  // Detailed metrics from baseline\n  console.log(`üìä Baseline Metrics (No Cache):`);\n  if (baselineMetrics.phases['import_resolution']) {\n    const phase = baselineMetrics.phases['import_resolution'];\n    console.log(`   Import Resolution Calls: ${phase.details?.['baseline_calls'] || 0}`);\n    console.log(`   Export Declaration Calls: ${phase.details?.['export_declarations_calls'] || 0}`);\n    console.log(`   Files Found: ${phase.details?.['files_found'] || 0}`);\n    console.log(`   Files Not Found: ${phase.details?.['files_not_found'] || 0}`);\n    console.log(`   Successful Resolutions: ${phase.details?.['successful_resolutions'] || 0}`);\n    console.log(`   Failed Resolutions: ${phase.details?.['failed_resolutions'] || 0}`);\n    console.log(`   Average Duration: ${phase.averageDuration.toFixed(2)}ms\\n`);\n  }\n\n  // Detailed metrics from optimized version\n  console.log(`üöÄ Optimized Metrics (With Cache):`);\n  if (optimizedMetrics.phases['import_resolution']) {\n    const phase = optimizedMetrics.phases['import_resolution'];\n    console.log(`   Cache Hits: ${phase.details?.['cache_hits'] || 0}`);\n    console.log(`   Cache Misses: ${phase.details?.['cache_misses'] || 0}`);\n    console.log(`   Export Cache Builds: ${phase.details?.['export_cache_builds'] || 0}`);\n    console.log(`   Files Found: ${phase.details?.['files_found'] || 0}`);\n    console.log(`   Files Not Found: ${phase.details?.['files_not_found'] || 0}`);\n    console.log(`   Successful Resolutions: ${phase.details?.['successful_resolutions'] || 0}`);\n    console.log(`   Failed Resolutions: ${phase.details?.['failed_resolutions'] || 0}`);\n    \n    const totalCalls = (phase.details?.['cache_hits'] || 0) + (phase.details?.['cache_misses'] || 0);\n    const hitRate = totalCalls > 0 ? ((phase.details?.['cache_hits'] || 0) / totalCalls * 100).toFixed(1) : '0.0';\n    console.log(`   Cache Hit Rate: ${hitRate}%`);\n    console.log(`   Average Duration: ${phase.averageDuration.toFixed(2)}ms\\n`);\n  }\n\n  // Memory usage comparison\n  console.log(`üß† Memory Usage:`);\n  console.log(`   Baseline:  ${baselineMetrics.memory.heapUsed}MB used / ${baselineMetrics.memory.heapTotal}MB total`);\n  console.log(`   Optimized: ${optimizedMetrics.memory.heapUsed}MB used / ${optimizedMetrics.memory.heapTotal}MB total`);\n  console.log(`   Memory Overhead: ${(optimizedMetrics.memory.heapUsed - baselineMetrics.memory.heapUsed).toFixed(1)}MB\\n`);\n\n  console.log('‚úÖ Performance comparison completed!');\n}",
        "sourceFileRefId": "1ad9abe6-e8ab-4fcb-9209-5578f32bb8ad",
        "parameters": [],
        "metrics": {
          "linesOfCode": 132,
          "totalLines": 171,
          "cyclomaticComplexity": 35,
          "cognitiveComplexity": 35,
          "maxNestingLevel": 3,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 8,
          "loopCount": 3,
          "tryCatchCount": 3,
          "asyncAwaitCount": 2,
          "callbackCount": 2,
          "commentLines": 14,
          "codeToCommentRatio": 9.43,
          "halsteadVolume": 5583.13,
          "halsteadDifficulty": 21.32,
          "maintainabilityIndex": 0
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "dc6bf79f-88bb-5d91-aca3-374c8afbc4b4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "244df3d076897cd068be5f6878d28dbf407a83d299f5147cabf655bfcab61242",
        "contentId": "0a4ba7b412597df9fc1071d578412d5b19f0bb7938ca30e5bb7ca2473a9a52e9",
        "name": "validateEdge",
        "displayName": "ConfidenceCalculator.validateEdge",
        "signature": "public ConfidenceCalculator.validateEdge(edge: IdealCallEdge): boolean",
        "signatureHash": "821cc5ff022afd13543fc594811d3fbc93660bdde5f844d877dbc7e3d5be9f8b",
        "filePath": "/src/analyzers/confidence-calculator.ts",
        "fileHash": "5193cd208af182ad06c7f7e425b975a4",
        "startLine": 126,
        "endLine": 138,
        "startColumn": 2,
        "endColumn": 474,
        "astHash": "0cecef5ed3bdf396",
        "contextPath": [
          "ConfidenceCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Validate edge consistency\n   */\n  validateEdge(edge: IdealCallEdge): boolean {\n    // Basic validation\n    if (!edge.callerFunctionId) return false;\n    if (!edge.candidates || edge.candidates.length === 0) return false;\n    if (edge.confidenceScore < 0 || edge.confidenceScore > 1) return false;\n    \n    // If calleeFunctionId is specified, it should be in candidates\n    if (edge.calleeFunctionId && !edge.candidates.includes(edge.calleeFunctionId)) {\n      return false;\n    }\n    \n    return true;\n  }",
        "sourceFileRefId": "e159adea-ad45-4c66-9f99-4d357207ccf9",
        "parameters": [
          {
            "name": "edge",
            "type": "IdealCallEdge",
            "typeSimple": "IdealCallEdge",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 18,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 5,
          "branchCount": 4,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 1.8,
          "halsteadVolume": 194.49,
          "halsteadDifficulty": 8.33,
          "maintainabilityIndex": 78.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "47a9b685-db8b-5f57-a5ec-59500e73e5c3",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c3880b686b505a38a1daa0e525336fe71d2c255aec193c2981bd4a35e3e0d376",
        "contentId": "1bec151088cf57e528e7e1f8975375d05ee70b9bc59531c46b94738a69949e4c",
        "name": "matchesAnyPattern",
        "displayName": "matchesAnyPattern",
        "signature": "matchesAnyPattern(filePath: string, patterns: string[]): boolean",
        "signatureHash": "423c34f4333cda6972cf588180dfafb47cdb1494e50ab2d502f82ea35fd45e34",
        "filePath": "/src/utils/scope-utils.ts",
        "fileHash": "b1153280be7e855d2de7d257e47d440b",
        "startLine": 126,
        "endLine": 133,
        "startColumn": 0,
        "endColumn": 295,
        "astHash": "70ecf129137b536e",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Check if a file path matches any of the given glob patterns\n */\nexport function matchesAnyPattern(filePath: string, patterns: string[]): boolean {\n  if (!patterns || patterns.length === 0) {\n    return false;\n  }\n  \n  const normalizedPath = path.normalize(filePath).replace(/\\\\/g, '/');\n  return patterns.some(pattern => minimatch(normalizedPath, pattern));\n}",
        "sourceFileRefId": "1b92d115-a988-4d3b-87af-4680d1b4ff90",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "patterns",
            "type": "string[]",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 156.08,
          "halsteadDifficulty": 3.53,
          "maintainabilityIndex": 86.94
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "29b12d21-eb6f-5e9c-a370-ce06ce722f02",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "90ad3678bd3c85b7736a11549703b59dea8d2e19153401461ae88ecfa2ca9435",
        "contentId": "4090a64f1e67092b19fdb7c0b90dd042545cbde7ae152defd7f8453821924869",
        "name": "getGlobalOptions",
        "displayName": "CallbackConfigManager.getGlobalOptions",
        "signature": "public CallbackConfigManager.getGlobalOptions(): CallbackAnalysisConfig['options']",
        "signatureHash": "b3cbf031502dd36c84a0014d62c587f05dc157f241733261bf7370a60bf710fd",
        "filePath": "/src/config/callback-config.ts",
        "fileHash": "7fe35677951f085e04545ae537d36a75",
        "startLine": 126,
        "endLine": 128,
        "startColumn": 2,
        "endColumn": 93,
        "astHash": "806e9a66ab68d4ea",
        "contextPath": [
          "CallbackConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get global analysis options\n   */\n  getGlobalOptions(): CallbackAnalysisConfig['options'] {\n    return this.load().options;\n  }",
        "sourceFileRefId": "06b4d7d0-2d82-4c1d-a91a-5d86b15df5c3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 27,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "89efbaa5-cdb8-5b69-b102-3e0c14c7a4d0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8451c9bd2f31979440357d17521d1146bbfafefba491fc06ab127f44087a6514",
        "contentId": "38fb3461b35e0d9686641697d2af973ad79dd880a15cc3a17a87863a3c2dd17a",
        "name": "checkCompatibility",
        "displayName": "SchemaVersioning.checkCompatibility",
        "signature": "public async SchemaVersioning.checkCompatibility(fromHash: string, toHash: string): Promise<CompatibilityResult>",
        "signatureHash": "5681f05795e160811b1e3c53794603e2ed9177a266a2ec2aadc9f003a6011cb0",
        "filePath": "/src/storage/backup/avro/schema-versioning.ts",
        "fileHash": "6bfbaee21913fab520b88ffc82c63348",
        "startLine": 128,
        "endLine": 144,
        "startColumn": 2,
        "endColumn": 424,
        "astHash": "3cbb8d00fa0a1ec9",
        "contextPath": [
          "SchemaVersioning"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check compatibility between two schema versions\n   */\n  async checkCompatibility(\n    fromHash: string, \n    toHash: string\n  ): Promise<CompatibilityResult> {\n    if (fromHash === toHash) {\n      return {\n        compatible: true,\n        issues: [],\n        migrationRequired: false,\n      };\n    }\n\n    const fromVersion = await this.getVersion(fromHash);\n    const toVersion = await this.getVersion(toHash);\n\n    return this.analyzeCompatibility(fromVersion, toVersion);\n  }",
        "sourceFileRefId": "f4159773-ea1e-45c9-9e8a-2420caae0ace",
        "parameters": [
          {
            "name": "fromHash",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "toHash",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 22,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5,
          "halsteadVolume": 118.54,
          "halsteadDifficulty": 2.36,
          "maintainabilityIndex": 71.42
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "93d70dd1-2532-5c0c-a869-d0532424f24b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c02233c42223e48f7d0ab9ebf7577dd0168d120bf33f2164a987c477bcdbf915",
        "contentId": "38fa9f9de5b7f0ea2b7e8af71b636bb55b746c06976d7069599b9dcb289601f2",
        "name": "calculateJaccardSimilarity",
        "displayName": "CrossTypeAnalyzer.calculateJaccardSimilarity",
        "signature": "protected CrossTypeAnalyzer.calculateJaccardSimilarity(setA: Set<string>, setB: Set<string>): number",
        "signatureHash": "692b04d34fb8b10b135e84ce10e01aa5db6ea23a3f3b62be9998511d98d6205d",
        "filePath": "/src/analyzers/type-insights/cross-type-analyzer.ts",
        "fileHash": "3067045166e1508b44dc8b66f8e92b06",
        "startLine": 128,
        "endLine": 133,
        "startColumn": 2,
        "endColumn": 278,
        "astHash": "9c1c4df4b01361f3",
        "contextPath": [
          "CrossTypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate Jaccard similarity between two sets\n   */\n  protected calculateJaccardSimilarity(setA: Set<string>, setB: Set<string>): number {\n    const intersection = new Set([...setA].filter(x => setB.has(x)));\n    const union = new Set([...setA, ...setB]);\n    \n    return union.size === 0 ? 0 : intersection.size / union.size;\n  }",
        "sourceFileRefId": "6fe80e32-f668-4d24-8074-01f327b61e98",
        "parameters": [
          {
            "name": "setA",
            "type": "Set<string>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "setB",
            "type": "Set<string>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 147.15,
          "halsteadDifficulty": 4.15,
          "maintainabilityIndex": 95.48
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6c0a4899-48ef-5f43-8edf-50201ac47692",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6de0015513bbe8c74ea5da8309254dd84d62a8cb256048e569084c3c2658fcb3",
        "contentId": "78a45b1cfe834d80b9108e4a81b817ccbc70e8f0c5527c27cdd855d7e18883b7",
        "name": "calculateTypeUsage",
        "displayName": "TypeDependencyAnalyzer.calculateTypeUsage",
        "signature": "public TypeDependencyAnalyzer.calculateTypeUsage(dependencies: TypeDependency[]): Map<string, TypeUsageInfo>",
        "signatureHash": "0c6b1f48f8b20550600735fb88d3be3bf751f2631681bd5eeae27d3c6c8ff978",
        "filePath": "/src/analyzers/type-dependency-analyzer.ts",
        "fileHash": "e9557ede2981b324a2c27dec6ed36039",
        "startLine": 129,
        "endLine": 162,
        "startColumn": 2,
        "endColumn": 1035,
        "astHash": "9c0b8432aeedad4d",
        "contextPath": [
          "TypeDependencyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate usage information for each type\n   */\n  calculateTypeUsage(dependencies: TypeDependency[]): Map<string, TypeUsageInfo> {\n    const usageMap = new Map<string, TypeUsageInfo>();\n\n    // Initialize usage info for all types\n    this.typeDefinitions.forEach((typeDef, _typeName) => {\n      usageMap.set(typeDef.id, {\n        typeId: typeDef.id,\n        usageCount: 0,\n        usedInFiles: [],\n        usedByTypes: [],\n        dependencyChain: []\n      });\n    });\n\n    // Count dependencies (incoming edges = usage count)\n    dependencies.forEach(dep => {\n      const targetTypeDef = this.typeDefinitions.get(dep.targetTypeName);\n      \n      if (targetTypeDef && usageMap.has(targetTypeDef.id)) {\n        const usage = usageMap.get(targetTypeDef.id)!;\n        usage.usageCount++;\n        \n        if (!usage.usedInFiles.includes(dep.filePath)) {\n          usage.usedInFiles.push(dep.filePath);\n        }\n        \n        if (!usage.usedByTypes.includes(dep.sourceTypeId)) {\n          usage.usedByTypes.push(dep.sourceTypeId);\n        }\n      }\n    });\n\n    return usageMap;\n  }",
        "sourceFileRefId": "4c50873c-9d83-4ace-a247-7f10f41fe5c4",
        "parameters": [
          {
            "name": "dependencies",
            "type": "TypeDependency[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 26,
          "totalLines": 39,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 2,
          "commentLines": 5,
          "codeToCommentRatio": 5.2,
          "halsteadVolume": 624.02,
          "halsteadDifficulty": 4.93,
          "maintainabilityIndex": 45.42
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "61a33ce7-3715-5bb5-8eb7-82e4576e6616",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d990675091d762894541664c8c25c78cc0eea59899f5cff1fa3c38fa7ee2b13d",
        "contentId": "086b610a18a1d08b68ccd55323f5ac6bedd36f4426d1050ce980535cbc723751",
        "name": "resetClearCoordinator",
        "displayName": "resetClearCoordinator",
        "signature": "resetClearCoordinator(): void",
        "signatureHash": "3327bc3ecaf5d5291b0912ff14c175a5e0689f53bf1a9a799cd9b0a63fc196f0",
        "filePath": "/src/utils/clear-coordinator.ts",
        "fileHash": "5f2bb83eaae3419dad1653dc0eff694e",
        "startLine": 130,
        "endLine": 132,
        "startColumn": 0,
        "endColumn": 79,
        "astHash": "1eba3778a8cb4427",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Reset the coordinator (mainly for testing)\n */\nexport function resetClearCoordinator(): void {\n  coordinatorInstance = null;\n}",
        "sourceFileRefId": "4f071925-8b13-4538-a189-e09a481c659e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 4.75,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0a9e4e29-34d3-5632-95ef-cb0437769049",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "11e98599bf630ae534220e6ad2233d587a1b9644dafdde6f2fee8abdc721e24a",
        "contentId": "abb9b2c170bd1fa173ed93cc63e42cd64b6bfdce15cbfc09ec4d5f46ce57ea6e",
        "name": "isValidFunctionId",
        "displayName": "UtilityOperations.isValidFunctionId",
        "signature": "public UtilityOperations.isValidFunctionId(id: string): boolean",
        "signatureHash": "2b4a688a9fcf30e366681677bb163879b2f834677edca350830c2aac7356480f",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 132,
        "endLine": 138,
        "startColumn": 2,
        "endColumn": 332,
        "astHash": "c564044a4a809bf0",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Validate function ID format  \r\n   */\r\n  isValidFunctionId(id: string): boolean {\r\n    // Check if it's a UUID or semantic ID format\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n    const semanticIdRegex = /^[a-f0-9]{8,}$/; // At least 8 hex chars\r\n    \r\n    return uuidRegex.test(id) || semanticIdRegex.test(id);\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 12,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1.25,
          "halsteadVolume": 68.11,
          "halsteadDifficulty": 2.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0a862e79-ad49-5e9f-aca1-ca3d82102895",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "cc7092e367a8a4ecb400fb006299b97647f9010b16c5f96279efa6d6fd227f24",
        "contentId": "b5b13d61e9a5d00ef49846ec9deebb19319fc1b9e3f97f7d7ab0b1740105a1bc",
        "name": "reset",
        "displayName": "CallbackConfigManager.reset",
        "signature": "public CallbackConfigManager.reset(): void",
        "signatureHash": "08552fc740c95cd1a84196f83533bc27e24709f7ad85aea9c78c3631ee08f7ef",
        "filePath": "/src/config/callback-config.ts",
        "fileHash": "7fe35677951f085e04545ae537d36a75",
        "startLine": 133,
        "endLine": 135,
        "startColumn": 2,
        "endColumn": 50,
        "astHash": "ad4b0aa17a9724a9",
        "contextPath": [
          "CallbackConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Reset cached configuration\n   */\n  reset(): void {\n    this.config = undefined;\n  }",
        "sourceFileRefId": "06b4d7d0-2d82-4c1d-a91a-5d86b15df5c3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 11.61,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4a164920-8d15-542c-bdc6-26eaba27c8b9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1a31a2bd8d4c20b334219e0bffd0f9a4019f4dc3193d9130ec557a7269338ab8",
        "contentId": "55e56838054969cfaf1ccdbc71cd11e25a75d7ba561a0e7698dc5b0cc2c9637d",
        "name": "generateBulkInsertSQL",
        "displayName": "generateBulkInsertSQL",
        "signature": "generateBulkInsertSQL(tableName: string, columns: string[], rowCount: number, options?: { idempotent?: boolean }): string",
        "signatureHash": "71e6b7d76162278bf51a768a483b28acd94d846dfb8ba4e90efb7e987a45b428",
        "filePath": "/src/storage/bulk-insert-utils.ts",
        "fileHash": "73027149bc3396fe4e3f7f3d50b7b05c",
        "startLine": 133,
        "endLine": 165,
        "startColumn": 0,
        "endColumn": 983,
        "astHash": "f321a0e3eaebbc7f",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Generate bulk insert SQL statements\n */\nexport function generateBulkInsertSQL(\n  tableName: string,\n  columns: string[],\n  rowCount: number,\n  options?: { idempotent?: boolean }\n): string {\n  if (rowCount === 0) return '';\n\n  const placeholders: string[] = [];\n  let paramIndex = 1;\n\n  for (let i = 0; i < rowCount; i++) {\n    const rowPlaceholders = columns.map(() => `$${paramIndex++}`);\n    placeholders.push(`(${rowPlaceholders.join(', ')})`);\n  }\n\n  let sql = `\n    INSERT INTO ${tableName} (${columns.join(', ')})\n    VALUES ${placeholders.join(', ')}\n  `;\n\n  // Add idempotent clause if requested\n  if (options?.idempotent) {\n    // For type_definitions table, use existing UNIQUE constraint to prevent true duplicates\n    if (tableName === 'type_definitions') {\n      sql += ` ON CONFLICT (snapshot_id, file_path, name, start_line) DO NOTHING`;\n    } else if (columns.includes('id')) {\n      sql += ` ON CONFLICT (id) DO NOTHING`;\n    } // else: id column doesn't exist, skip ON CONFLICT clause\n  }\n\n  return sql;\n}",
        "sourceFileRefId": "78dcb36c-74ab-44aa-bb06-829a383a940a",
        "parameters": [
          {
            "name": "tableName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "columns",
            "type": "string[]",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "rowCount",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "{ idempotent?: boolean }",
            "typeSimple": "boolean",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 26,
          "totalLines": 38,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 3,
          "parameterCount": 4,
          "returnStatementCount": 2,
          "branchCount": 4,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 5,
          "codeToCommentRatio": 5.2,
          "halsteadVolume": 369.31,
          "halsteadDifficulty": 5.38,
          "maintainabilityIndex": 49.12
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d35a8147-9d96-531c-b35c-bf27e0b3df17",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "41ef3755a935ed5014a1fcc3c460754656bc01376aa8e67a40d0faf92fc79adf",
        "contentId": "c313bf39dbb29f863c08508eca4740424e2fe4db16e7be86cb10a2d29df1dcf3",
        "name": "measurePerformance",
        "displayName": "measurePerformance",
        "signature": "measurePerformance(_target: object, propertyKey: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>",
        "signatureHash": "763589d1cb875a07a6fedacee0891c47721620b72775128f4ab22940369f1f17",
        "filePath": "/src/utils/performance-metrics.ts",
        "fileHash": "34670ccb10474bd32d6e93a6472856b7",
        "startLine": 136,
        "endLine": 160,
        "startColumn": 0,
        "endColumn": 849,
        "astHash": "647bdfb0f2e4fee4",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Decorator for measuring method performance\n */\nexport function measurePerformance<T extends (...args: unknown[]) => unknown>(\n  _target: object,\n  propertyKey: string,\n  descriptor: TypedPropertyDescriptor<T>\n): TypedPropertyDescriptor<T> {\n  const originalMethod = descriptor.value!;\n\n  descriptor.value = function(this: unknown, ...args: Parameters<T>) {\n    const start = performance.now();\n    const result = originalMethod.apply(this, args) as ReturnType<T>;\n    const duration = performance.now() - start;\n\n    // If the instance has a profiler, record the measurement\n    if (this && typeof this === 'object' && 'profiler' in this) {\n      const profiler = (this as { profiler: unknown }).profiler;\n      if (profiler instanceof PerformanceProfiler) {\n        profiler.recordDetail('method_calls', propertyKey, duration);\n      }\n    }\n\n    return result;\n  } as T;\n\n  return descriptor;\n}",
        "sourceFileRefId": "b4c1a98c-be99-4ac7-8471-c8b53030f6f6",
        "parameters": [
          {
            "name": "_target",
            "type": "object",
            "typeSimple": "object",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "propertyKey",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "descriptor",
            "type": "TypedPropertyDescriptor<T>",
            "typeSimple": "TypedPropertyDescriptor<T>",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 20,
          "totalLines": 30,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 3,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 5,
          "halsteadVolume": 353.92,
          "halsteadDifficulty": 7.56,
          "maintainabilityIndex": 55.8
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1057ad04-a983-57da-9542-9ea5041205c8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7af302565aa6f9baccbf2b6bb57685c90ee330b3c1db4de7e2c444af1989064a",
        "contentId": "85dcbc24fe7ecb9046f4a6522ca30dc54550c4496797701f511ed9dde4a24e7a",
        "name": "reset",
        "displayName": "CHATypeSystemAnalysisStage.reset",
        "signature": "public CHATypeSystemAnalysisStage.reset(): void",
        "signatureHash": "0c60c5bf50819e91e5f02e60576dc2feba784c9a9baa2c82cda8f7588b19a207",
        "filePath": "/src/analyzers/staged-analysis/stages/cha-type-system-analysis.ts",
        "fileHash": "ad0a665a550768cbc495980cda70eaad",
        "startLine": 136,
        "endLine": 138,
        "startColumn": 2,
        "endColumn": 58,
        "astHash": "d34336319b689bcf",
        "contextPath": [
          "CHATypeSystemAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Reset analyzer state for fresh analysis\n   */\n  reset(): void {\n    this.chaTypeIntegration.clear();\n  }",
        "sourceFileRefId": "5d8603f9-dd33-4f4f-96dd-0df08fe38910",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "59e442f8-6faf-5980-b815-ef9e28baba56",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c06f79367c0bc1bf34da5eeebde520bf39760dfd2865a0d438edec4e3b05d383",
        "contentId": "d84cbbfade695ece4bb08aac61bd382b04c6b8e4cc32650cb333d096a5cabf17",
        "name": "saveCustomPreset",
        "displayName": "PresetManager.saveCustomPreset",
        "signature": "public async PresetManager.saveCustomPreset(preset: ProjectPreset): Promise<void>",
        "signatureHash": "2846601a205698e62dd85242483c52fbe1e29e4608fab5bd3536d674693a00be",
        "filePath": "/src/config/preset-manager.ts",
        "fileHash": "0a6f6ee710b28ca1a220c50dfb495520",
        "startLine": 136,
        "endLine": 153,
        "startColumn": 2,
        "endColumn": 486,
        "astHash": "d65f48e6a83879a7",
        "contextPath": [
          "PresetManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Save a custom preset\n   */\n  async saveCustomPreset(preset: ProjectPreset): Promise<void> {\n    const customPresets = await this.loadCustomPresets();\n\n    // Remove existing preset with same ID\n    const filteredPresets = customPresets.filter(p => p.id !== preset.id);\n\n    // Add the new preset\n    filteredPresets.push({\n      ...preset,\n      category: 'custom',\n      metadata: {\n        ...preset.metadata,\n        updated: Date.now(),\n      },\n    });\n\n    await this.saveCustomPresets(filteredPresets);\n  }",
        "sourceFileRefId": "07c101ea-572a-4ea4-bea6-b7d043e468c9",
        "parameters": [
          {
            "name": "preset",
            "type": "ProjectPreset",
            "typeSimple": "ProjectPreset",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 23,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 5,
          "codeToCommentRatio": 2.6,
          "halsteadVolume": 216.22,
          "halsteadDifficulty": 2.09,
          "maintainabilityIndex": 70.49
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "de9b9ddd-22ad-5308-ba2b-90d88f4cc2e9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "311c0a3684c60c1737369143a22fe0e73d90bda4d3fe7573e30f3b5899bd5784",
        "contentId": "5df5ab2d617a75b9c20448a5431ba32735bb60813fb9db76e0a64de660537eed",
        "name": "filterPathsByScope",
        "displayName": "filterPathsByScope",
        "signature": "filterPathsByScope(filePaths: string[], scopeConfig: ScopeConfig): string[]",
        "signatureHash": "1485ae5a6aac9d564c066887077503563c5c00baa0a71299f3b96e08d415e818",
        "filePath": "/src/utils/scope-utils.ts",
        "fileHash": "b1153280be7e855d2de7d257e47d440b",
        "startLine": 138,
        "endLine": 140,
        "startColumn": 0,
        "endColumn": 172,
        "astHash": "439d5cd9816cc524",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Get all file paths that belong to a specific scope from a list of file paths\n */\nexport function filterPathsByScope(filePaths: string[], scopeConfig: ScopeConfig): string[] {\n  return filePaths.filter(filePath => isPathInScope(filePath, scopeConfig));\n}",
        "sourceFileRefId": "1b92d115-a988-4d3b-87af-4680d1b4ff90",
        "parameters": [
          {
            "name": "filePaths",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "scopeConfig",
            "type": "ScopeConfig",
            "typeSimple": "ScopeConfig",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "39e08e4f-5fb9-5baa-a98c-9cfa6c3773f6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1b1860d33e5bf3ea8913ec757b097dc06045a87e4ffb9d54f9f414e1865ccd81",
        "contentId": "9c90b24bbe9ca8de59297439b3379eb9ed433f439beb54c1b91c89d84464fc2b",
        "name": "constructor",
        "displayName": "ArchitectureLayerDetector.constructor",
        "signature": "public ArchitectureLayerDetector(customPatterns?: LayerDetectionPattern[])",
        "signatureHash": "b03ecd3b5d409d09e68f7799e015f773fb7ffb214bae251ffb68d9a1112d1e0e",
        "filePath": "/src/analyzers/architecture-layer-detector.ts",
        "fileHash": "e9d2cbb4480855fb4a0b7744fb514c9d",
        "startLine": 139,
        "endLine": 143,
        "startColumn": 2,
        "endColumn": 251,
        "astHash": "7235365de70cb893",
        "contextPath": [
          "ArchitectureLayerDetector"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(customPatterns?: LayerDetectionPattern[]) {\n    this.layerPatterns = customPatterns || LAYER_PATTERNS;\n    // Pre-compile all regex patterns for better performance\n    this.compiledPatterns = this.compilePatterns(this.layerPatterns);\n  }",
        "sourceFileRefId": "17199480-c4b0-4762-8a40-cd2237dceffd",
        "parameters": [
          {
            "name": "customPatterns",
            "type": "LayerDetectionPattern[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 7,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 4,
          "halsteadVolume": 58.81,
          "halsteadDifficulty": 2.57,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a5e764d5-07d9-5e57-876b-93757dc976f4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8fe1a00fecb77f76471c625c8c5b862ac6447b4e3e7cee8a932c1be4c98448c8",
        "contentId": "b048f5cdbc590dbfbbe5b47d45c9298004a83a09e7d1ed933a9c4b89bb3c02be",
        "name": "reset",
        "displayName": "RTAAnalysisStage.reset",
        "signature": "public RTAAnalysisStage.reset(): void",
        "signatureHash": "798621b05070bd276746c29802b5a7ed22b87f29ad579c17c620d41b1a5e3a69",
        "filePath": "/src/analyzers/staged-analysis/stages/rta-analysis.ts",
        "fileHash": "1c64024e3f89ea38aa7598ff26057f3d",
        "startLine": 139,
        "endLine": 142,
        "startColumn": 2,
        "endColumn": 146,
        "astHash": "45f1780a0025da30",
        "contextPath": [
          "RTAAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Reset analyzer state for fresh analysis\r\n   */\r\n  reset(): void {\r\n    // The RTA analyzer handles its own state management\r\n    // This method is provided for consistency with other stages\r\n  }",
        "sourceFileRefId": "90f5114e-03b8-42f9-af36-0c77cb9c0003",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 0.4,
          "halsteadVolume": 0,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "55c55fc9-9296-5115-acd0-aec22ec777ff",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e39bcb7ca59bec60a24c56bae1f58e132ea77c03458476bf28e460cfd4ad18e0",
        "contentId": "a9ef1489b5d84606a41d417d023d017533e5958bfed8ae8f208d473113e3af13",
        "name": "getConfidenceStats",
        "displayName": "ConfidenceCalculator.getConfidenceStats",
        "signature": "public ConfidenceCalculator.getConfidenceStats(edges: IdealCallEdge[]): {\n    averageConfidence: number;\n    medianConfidence: number;\n    confidenceDistribution: Map<string, number>;\n  }",
        "signatureHash": "312ac6974e3ba5a8f2ab1f9f718da2830b464b25a2d4e8e9c2b6143a11b7105e",
        "filePath": "/src/analyzers/confidence-calculator.ts",
        "fileHash": "5193cd208af182ad06c7f7e425b975a4",
        "startLine": 143,
        "endLine": 174,
        "startColumn": 2,
        "endColumn": 1008,
        "astHash": "b42685f0bdda009c",
        "contextPath": [
          "ConfidenceCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get confidence statistics\n   */\n  getConfidenceStats(edges: IdealCallEdge[]): {\n    averageConfidence: number;\n    medianConfidence: number;\n    confidenceDistribution: Map<string, number>;\n  } {\n    if (edges.length === 0) {\n      return {\n        averageConfidence: 0,\n        medianConfidence: 0,\n        confidenceDistribution: new Map()\n      };\n    }\n    \n    const scores = edges.map(e => e.confidenceScore).sort((a, b) => a - b);\n    \n    const averageConfidence = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n    const medianConfidence = scores[Math.floor(scores.length / 2)];\n    \n    // Distribution by 0.1 buckets\n    const distribution = new Map<string, number>();\n    for (const score of scores) {\n      const bucket = Math.floor(score * 10) / 10;\n      const key = `${bucket.toFixed(1)}-${(bucket + 0.1).toFixed(1)}`;\n      distribution.set(key, (distribution.get(key) || 0) + 1);\n    }\n    \n    return {\n      averageConfidence,\n      medianConfidence,\n      confidenceDistribution: distribution\n    };\n  }",
        "sourceFileRefId": "e159adea-ad45-4c66-9f99-4d357207ccf9",
        "parameters": [
          {
            "name": "edges",
            "type": "IdealCallEdge[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 27,
          "totalLines": 37,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 4,
          "codeToCommentRatio": 6.75,
          "halsteadVolume": 647.86,
          "halsteadDifficulty": 9.58,
          "maintainabilityIndex": 44.49
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c38d4b91-fb9e-5bb5-b898-59128f567170",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9f957e744e1e838bb9de6885b2d97e0833f2bd7325d4ac7e368d3612ae9c6abc",
        "contentId": "caf053cf5cc5ac38708442cbc37fd63e8bba18b99a53b2d06998945c952b2c75",
        "name": "escapeLikePattern",
        "displayName": "UtilityOperations.escapeLikePattern",
        "signature": "public UtilityOperations.escapeLikePattern(pattern: string): string",
        "signatureHash": "a6c9c358cc17f97cd770eb6618f07eff0c589b75541e166631470547e170be37",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 143,
        "endLine": 148,
        "startColumn": 2,
        "endColumn": 161,
        "astHash": "688dd54aee5b0ae7",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Escape SQL LIKE pattern special characters\r\n   */\r\n  escapeLikePattern(pattern: string): string {\r\n    return pattern\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/%/g, '\\\\%')\r\n      .replace(/_/g, '\\\\_');\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "pattern",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 79.95,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 96.02
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "95bbc61e-1456-51b7-9c4d-9a95822f628f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2efd505885bf2b558dc8f517314c82358ea75403176ecda72bb463543262ef59",
        "contentId": "718b58076875747be46cb626a4f0323899a4bd4c536707666d67e46f1e23b1fc",
        "name": "generateHealthReport",
        "displayName": "TypeMetricsCalculator.generateHealthReport",
        "signature": "public TypeMetricsCalculator.generateHealthReport(typeScores: TypeQualityScore[], circularDependencies: CircularDependency[]): TypeHealthReport",
        "signatureHash": "09c87b03e01ae776f39e404e3f73334a85aeed4043df95bf9cb38e4035668d44",
        "filePath": "/src/analyzers/type-metrics-calculator.ts",
        "fileHash": "e6f170bcabfadbee57137ab72b1d475b",
        "startLine": 143,
        "endLine": 180,
        "startColumn": 2,
        "endColumn": 1276,
        "astHash": "49677e1c00e85366",
        "contextPath": [
          "TypeMetricsCalculator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate a comprehensive health report for all types\n   */\n  generateHealthReport(\n    typeScores: TypeQualityScore[],\n    circularDependencies: CircularDependency[]\n  ): TypeHealthReport {\n    const totalTypes = typeScores.length;\n    const overallHealth = totalTypes > 0 \n      ? Math.round(typeScores.reduce((sum, score) => sum + score.overallScore, 0) / totalTypes)\n      : 100;\n\n    // Calculate risk distribution\n    const riskDistribution = {\n      low: typeScores.filter(s => s.riskLevel === 'low').length,\n      medium: typeScores.filter(s => s.riskLevel === 'medium').length,\n      high: typeScores.filter(s => s.riskLevel === 'high').length,\n      critical: typeScores.filter(s => s.riskLevel === 'critical').length\n    };\n\n    // Collect top issues\n    const allIssues = typeScores.flatMap(score => \n      score.issues.map(issue => ({ ...issue, typeName: score.typeName }))\n    );\n    const topIssues = allIssues\n      .sort((a, b) => this.getIssuePriority(b) - this.getIssuePriority(a))\n      .slice(0, 10);\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(typeScores, circularDependencies);\n\n    return {\n      overallHealth,\n      totalTypes,\n      riskDistribution,\n      topIssues,\n      circularDependencies,\n      recommendations,\n      thresholds: this.thresholds\n    };\n  }",
        "sourceFileRefId": "d2b0b789-7d39-40e1-a623-b525ec560c71",
        "parameters": [
          {
            "name": "typeScores",
            "type": "TypeQualityScore[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "circularDependencies",
            "type": "CircularDependency[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 31,
          "totalLines": 43,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 8,
          "commentLines": 6,
          "codeToCommentRatio": 5.17,
          "halsteadVolume": 907.4,
          "halsteadDifficulty": 6.87,
          "maintainabilityIndex": 39.19
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "20a57cff-208e-5811-96fb-4fa97d8ed476",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "83ec542c9d035b7c6a63002e6ae395160b21a26a6358577fcb135e1cb6633ac7",
        "contentId": "515439725654f3bc86df25ddec67a82294f7afe291f4d7244e1d4208b5135180",
        "name": "getRecommendedProvider",
        "displayName": "GitFactory.getRecommendedProvider",
        "signature": "public async GitFactory.getRecommendedProvider(): Promise<GitProviderType>",
        "signatureHash": "794a6849d72a03fad53c91a50f0b6db0ebdf7dfc5229c61b8c24fee21f251158",
        "filePath": "/src/utils/git/git-factory.ts",
        "fileHash": "a4849dc9530f19deb7dfc4a85d852be2",
        "startLine": 147,
        "endLine": 160,
        "startColumn": 2,
        "endColumn": 341,
        "astHash": "9cc083f56fb3bbad",
        "contextPath": [
          "GitFactory"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Êé®Â•®„Åï„Çå„ÇãGit„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÂèñÂæó\n   */\n  async getRecommendedProvider(): Promise<GitProviderType> {\n    const available = await this.detectAvailableProviders();\n\n    // ÂÑ™ÂÖàÈ†Ü‰Ωç: simple-git > native > mock\n    if (available.includes('simple-git')) {\n      return 'simple-git';\n    }\n    \n    if (available.includes('native')) {\n      return 'native';\n    }\n    \n    return 'mock';\n  }",
        "sourceFileRefId": "c4b1cc11-8455-431e-bbbc-32803e554054",
        "parameters": [],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 19,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 3,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2.5,
          "halsteadVolume": 85.11,
          "halsteadDifficulty": 1.55,
          "maintainabilityIndex": 83.16
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "14a713ce-fa37-55d3-b787-d7322e492c31",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "add27f0685d49210ee7d51f08cf6c15ade9cf3516b59de2c1ac218d9a56c3728",
        "contentId": "4ae8a5aa3ce5b0447004873562b7d3a0ee571e451a137c6ab5019634741921ac",
        "name": "buildInClause",
        "displayName": "UtilityOperations.buildInClause",
        "signature": "public UtilityOperations.buildInClause(values: unknown[], startIndex: number = 1): { clause: string; params: unknown[] }",
        "signatureHash": "aea3155af8ed0dac56ea18c6fb86861da7bb9f2eb97f5a1ff2742ed630ce7edd",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 153,
        "endLine": 163,
        "startColumn": 2,
        "endColumn": 353,
        "astHash": "0eeea6b8e90a3156",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Build SQL IN clause with proper parameter placeholders\r\n   */\r\n  buildInClause(values: unknown[], startIndex: number = 1): { clause: string; params: unknown[] } {\r\n    if (values.length === 0) {\r\n      return { clause: 'FALSE', params: [] };\r\n    }\r\n\r\n    const placeholders = values.map((_, i) => `$${startIndex + i}`).join(', ');\r\n    return {\r\n      clause: `(${placeholders})`,\r\n      params: values\r\n    };\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "values",
            "type": "unknown[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "startIndex",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "1"
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 16,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 149.34,
          "halsteadDifficulty": 3.18,
          "maintainabilityIndex": 79.17
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "aeedbc91-91b4-52a3-825b-139b46f656e7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "61f6af1db1234853f1d65fc36ced8df668fd9573278a922f75fdda72fe478f74",
        "contentId": "08aec2b8e5b677ee207c9fb26e3dbc9aef5055c631518a2f0b0e8eef8e2b63da",
        "name": "saveMetricsBatch",
        "displayName": "MetricsOperations.saveMetricsBatch",
        "signature": "public async MetricsOperations.saveMetricsBatch(functions: FunctionInfo[]): Promise<void>",
        "signatureHash": "bbea9ca898fc76d09689851763338ac368fd699ec16052e6e93e3f6aaefe7de3",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 153,
        "endLine": 183,
        "startColumn": 2,
        "endColumn": 1139,
        "astHash": "ebd2d2f21e31fc9a",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Save metrics for multiple functions\r\n   */\r\n  async saveMetricsBatch(functions: FunctionInfo[]): Promise<void> {\r\n    const functionsWithMetrics = functions.filter(f => f.metrics);\r\n    if (functionsWithMetrics.length === 0) return;\r\n\r\n    try {\r\n      // Use optimal batch size\r\n      const batchSize = BatchProcessor.calculateFunctionBatchSize(functionsWithMetrics);\r\n      \r\n      // Process in batches\r\n      for (let i = 0; i < functionsWithMetrics.length; i += batchSize) {\r\n        const batch = functionsWithMetrics.slice(i, i + batchSize);\r\n        \r\n        if (batch.length >= 10) {\r\n          await this.bulkInsertMetrics(batch);\r\n        } else {\r\n          // For small batches, use individual inserts\r\n          for (const func of batch) {\r\n            if (func.metrics) {\r\n              await this.saveMetrics(func.id, func.snapshotId, func.metrics);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_WRITE_ERROR,\r\n        `Failed to save metrics batch: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 25,
          "totalLines": 36,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9,
          "maxNestingLevel": 5,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 5,
          "loopCount": 2,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 6,
          "codeToCommentRatio": 4.17,
          "halsteadVolume": 510.07,
          "halsteadDifficulty": 7.54,
          "maintainabilityIndex": 46.93
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b341f36d-3fd2-5908-98f1-e9919d24218c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f19c0e03d1ddc68a89a7afa751cb760766bbe63867eb0eac0a31d5614f71b5da",
        "contentId": "d5a7d160465f907d04c32f66c12f3969ef64dc0d6e23090bdb035826ddfcf0cf",
        "name": "calculateConfidence",
        "displayName": "CrossTypeAnalyzer.calculateConfidence",
        "signature": "protected CrossTypeAnalyzer.calculateConfidence(antecedent: string[], consequent: string[], types: TypePropertyInfo[]): number",
        "signatureHash": "0b1e90fe6e75233c59460d4c9359669ef07114ddca6deba419b5eb924021e272",
        "filePath": "/src/analyzers/type-insights/cross-type-analyzer.ts",
        "fileHash": "3067045166e1508b44dc8b66f8e92b06",
        "startLine": 154,
        "endLine": 163,
        "startColumn": 2,
        "endColumn": 385,
        "astHash": "077954ea30982860",
        "contextPath": [
          "CrossTypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate confidence for association rule A ‚Üí B\n   */\n  protected calculateConfidence(\n    antecedent: string[], \n    consequent: string[], \n    types: TypePropertyInfo[]\n  ): number {\n    const antecedentSupport = this.calculateSupport(antecedent, types);\n    const fullPatternSupport = this.calculateSupport([...antecedent, ...consequent], types);\n    \n    return antecedentSupport === 0 ? 0 : fullPatternSupport / antecedentSupport;\n  }",
        "sourceFileRefId": "6fe80e32-f668-4d24-8074-01f327b61e98",
        "parameters": [
          {
            "name": "antecedent",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "consequent",
            "type": "string[]",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "types",
            "type": "TypePropertyInfo[]",
            "typeSimple": "array",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 102.8,
          "halsteadDifficulty": 4.2,
          "maintainabilityIndex": 84.43
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0938d64d-2267-579c-a74f-68366f318a04",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ef4c2bb35fe80932786460cb87c3044fe3c950100ef4efed4cdf01499dbc9363",
        "contentId": "cec8471df3335b4356f9b42df8ebaf295fe13ad243eebebd0bcc64fcd90aee45",
        "name": "filterExistingFiles",
        "displayName": "BatchFileReader.filterExistingFiles",
        "signature": "public async BatchFileReader.filterExistingFiles(filePaths: string[]): Promise<string[]>",
        "signatureHash": "6c60591db2096f8c7fca39d7722a743785bcac8bc0a8cc29949479284b8aba42",
        "filePath": "/src/utils/batch-file-reader.ts",
        "fileHash": "02ccc3a44f0ca2be608534196172f6b4",
        "startLine": 155,
        "endLine": 180,
        "startColumn": 2,
        "endColumn": 815,
        "astHash": "9c4c8bbffa4309b2",
        "contextPath": [
          "BatchFileReader"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Filter existing files without reading content\n   */\n  async filterExistingFiles(filePaths: string[]): Promise<string[]> {\n    const existingFiles: string[] = [];\n    \n    // Check files in batches\n    for (let i = 0; i < filePaths.length; i += this.concurrency) {\n      const batch = filePaths.slice(i, i + this.concurrency);\n      const batchResults = await Promise.allSettled(\n        batch.map(async filePath => {\n          try {\n            await fs.access(filePath, fs.constants.F_OK);\n            return { filePath, exists: true };\n          } catch {\n            return { filePath, exists: false };\n          }\n        })\n      );\n      \n      for (const result of batchResults) {\n        if (result.status === 'fulfilled' && result.value.exists) {\n          existingFiles.push(result.value.filePath);\n        }\n      }\n    }\n    \n    return existingFiles;\n  }",
        "sourceFileRefId": "155d76f0-4c8f-4e1d-bf42-c46a9537fcda",
        "parameters": [
          {
            "name": "filePaths",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 22,
          "totalLines": 31,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 3,
          "parameterCount": 1,
          "returnStatementCount": 3,
          "branchCount": 1,
          "loopCount": 2,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 4,
          "codeToCommentRatio": 5.5,
          "halsteadVolume": 398.08,
          "halsteadDifficulty": 6.28,
          "maintainabilityIndex": 52.47
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bbb0a521-6bb2-57bf-93ab-43a3fcb4d86b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8e56b2b2bed8cc8cb4a6f9fd353d666acaf6c88548195ca58c75081f565b6880",
        "contentId": "a6e3881c7c0932f3bb365634ffae42c0aa9a2ae5273415711249f4d62fc6124d",
        "name": "deleteCustomPreset",
        "displayName": "PresetManager.deleteCustomPreset",
        "signature": "public async PresetManager.deleteCustomPreset(presetId: string): Promise<boolean>",
        "signatureHash": "1be374967c17eac0d78afa8d4a1431e300165fc897d92385717109d3a0720cff",
        "filePath": "/src/config/preset-manager.ts",
        "fileHash": "0a6f6ee710b28ca1a220c50dfb495520",
        "startLine": 158,
        "endLine": 168,
        "startColumn": 2,
        "endColumn": 375,
        "astHash": "9e3733f28e90d08b",
        "contextPath": [
          "PresetManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Delete a custom preset\n   */\n  async deleteCustomPreset(presetId: string): Promise<boolean> {\n    const customPresets = await this.loadCustomPresets();\n    const filteredPresets = customPresets.filter(p => p.id !== presetId);\n\n    if (filteredPresets.length === customPresets.length) {\n      return false; // Preset not found\n    }\n\n    await this.saveCustomPresets(filteredPresets);\n    return true;\n  }",
        "sourceFileRefId": "07c101ea-572a-4ea4-bea6-b7d043e468c9",
        "parameters": [
          {
            "name": "presetId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 16,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 133.44,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 82.47
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9d9e9038-7d45-51de-82e9-56644dd2252f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "29ab451d5914fa2f5a04de7d14227f652c2c1621bef5a67569c8ed09a99ce5dc",
        "contentId": "7e3b43fc805485467471762717bedbdd8b9ca849f3738baaf725dca52a3250e7",
        "name": "cleanupOldSnapshots",
        "displayName": "SnapshotManager.cleanupOldSnapshots",
        "signature": "public async SnapshotManager.cleanupOldSnapshots(): Promise<number>",
        "signatureHash": "be1e0205c4ab42885236280b5f7e71be2b372b7128a7fe507aea3a5e926bbd56",
        "filePath": "/src/utils/snapshot-manager.ts",
        "fileHash": "749d205e4871f54ec6773da723ae887d",
        "startLine": 165,
        "endLine": 215,
        "startColumn": 2,
        "endColumn": 1716,
        "astHash": "a6e35354482ccacc",
        "contextPath": [
          "SnapshotManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Cleanup old automatic snapshots based on retention policy\n   */\n  async cleanupOldSnapshots(): Promise<number> {\n    try {\n      const snapshots = await this.storage.getSnapshots();\n      \n      // Filter automatic snapshots (those with session IDs)\n      const automaticSnapshots = snapshots.filter(s => \n        s.label?.includes('Session ') || \n        s.comment?.includes('Automatic snapshot')\n      );\n      \n      // Sort by creation time (oldest first)\n      automaticSnapshots.sort((a, b) => a.createdAt - b.createdAt);\n      \n      // Calculate how many to delete\n      const excessCount = automaticSnapshots.length - this.config.maxRetentionCount;\n      \n      if (excessCount <= 0) {\n        this.logger.debug('No old snapshots to cleanup', {\n          total: automaticSnapshots.length,\n          retention: this.config.maxRetentionCount,\n        });\n        return 0;\n      }\n      \n      // Delete excess snapshots\n      const snapshotsToDelete = automaticSnapshots.slice(0, excessCount);\n      let deletedCount = 0;\n      \n      for (const snapshot of snapshotsToDelete) {\n        try {\n          await this.storage.deleteSnapshot(snapshot.id);\n          deletedCount++;\n          this.logger.debug(`Deleted old snapshot: ${snapshot.id}`);\n        } catch (error) {\n          this.logger.warn('Failed to delete snapshot', {\n            snapshotId: snapshot.id,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n      }\n      \n      this.logger.info(`Cleaned up ${deletedCount} old snapshots`);\n      return deletedCount;\n      \n    } catch (error) {\n      this.logger.error('Failed to cleanup old snapshots', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return 0;\n    }\n  }",
        "sourceFileRefId": "26e6d46b-9cf7-44cf-8567-99320c847929",
        "parameters": [],
        "metrics": {
          "linesOfCode": 39,
          "totalLines": 57,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 3,
          "parameterCount": 0,
          "returnStatementCount": 3,
          "branchCount": 3,
          "loopCount": 1,
          "tryCatchCount": 2,
          "asyncAwaitCount": 2,
          "callbackCount": 2,
          "commentLines": 7,
          "codeToCommentRatio": 5.57,
          "halsteadVolume": 939.2,
          "halsteadDifficulty": 6.87,
          "maintainabilityIndex": 32.18
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "404dfa92-b261-5634-a066-805d61037b86",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3584efff1898e5d7d5e1249589c5aa9ab6f72a87b3de96b09d63e6deb7a4fbde",
        "contentId": "d60961a4b6643e424f53cb2dc5e508397c4977f98684da8b314dd8444c4e03f2",
        "name": "getTransactionDepth",
        "displayName": "DatabaseCore.getTransactionDepth",
        "signature": "public DatabaseCore.getTransactionDepth(): number",
        "signatureHash": "81dbb696d047ef58c5c5694f6285b1ae907ecbf01873084d6ebd50163103667a",
        "filePath": "/src/storage/modules/database-core.ts",
        "fileHash": "d928fe9f9b070d47db40b220a45d4c5c",
        "startLine": 165,
        "endLine": 167,
        "startColumn": 2,
        "endColumn": 73,
        "astHash": "d692af30e8786e8f",
        "contextPath": [
          "DatabaseCore"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get current transaction depth\r\n   */\r\n  getTransactionDepth(): number {\r\n    return this.transactionDepth;\r\n  }",
        "sourceFileRefId": "940fcb15-46cb-484c-9a81-314c59e0381d",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 4.75,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b7f1de8d-c07a-5e68-a25a-746f5839bea9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "01db1e1a483b58b8a7fa0629b98812d1902f7c29f1b00ef089b4df93d54d9f9f",
        "contentId": "8f515dda2d7fcc2030a96eb79f1f64ad8f1627a8382599a96d0249ba4378c9b8",
        "name": "loadLightweight",
        "displayName": "ConfigManager.loadLightweight",
        "signature": "public ConfigManager.loadLightweight(): { storage: { path: string } }",
        "signatureHash": "587744ef893436fe55be4ea9111d0b68d56f7a17710e2485c91f2791b9f3eca8",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 166,
        "endLine": 188,
        "startColumn": 2,
        "endColumn": 658,
        "astHash": "d8475372b1813bc8",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Lightweight config loading for read-only commands.\n   * Only loads essential settings like storage path.\n   */\n  loadLightweight(): { storage: { path: string } } {\n    if (ConfigManager.lightweightCache) {\n      return ConfigManager.lightweightCache;\n    }\n\n    try {\n      const result = this.explorer.search();\n      const storagePath = result?.config?.storage?.path || DEFAULT_CONFIG.storage.path!;\n\n      ConfigManager.lightweightCache = {\n        storage: { path: storagePath },\n      };\n\n      return ConfigManager.lightweightCache;\n    } catch {\n      // Fallback to defaults if config loading fails\n      ConfigManager.lightweightCache = {\n        storage: { path: DEFAULT_CONFIG.storage.path! },\n      };\n\n      return ConfigManager.lightweightCache;\n    }\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 29,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 3,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 3.6,
          "halsteadVolume": 216,
          "halsteadDifficulty": 5.83,
          "maintainabilityIndex": 62.2
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "68738fbe-0ad9-53b9-b041-65c472c55e9b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e820ff229323d46e98f7fd1bfacdf4b454e20dfb2048b3f1370aa3496676bfc3",
        "contentId": "81e6c4416e325e73489d31c07222271641a17846c6225ebbd0d667d33792cbfa",
        "name": "chunkArray",
        "displayName": "UtilityOperations.chunkArray",
        "signature": "public UtilityOperations.chunkArray(array: T[], chunkSize: number): T[][]",
        "signatureHash": "5c8fcf8554d91292905396089c1943c2f6e9ee317cd322b26ce67fc057570f31",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 168,
        "endLine": 174,
        "startColumn": 2,
        "endColumn": 226,
        "astHash": "594c7e0e8df3f030",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Chunk array into smaller arrays of specified size\r\n   */\r\n  chunkArray<T>(array: T[], chunkSize: number): T[][] {\r\n    const chunks: T[][] = [];\r\n    for (let i = 0; i < array.length; i += chunkSize) {\r\n      chunks.push(array.slice(i, i + chunkSize));\r\n    }\r\n    return chunks;\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "array",
            "type": "T[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "chunkSize",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 134.89,
          "halsteadDifficulty": 5.21,
          "maintainabilityIndex": 88.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "72558f59-8e88-5acb-ac59-0079be8c616f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1a91e4729ba8da68864b7e1a9b74533b249d46a77468c1d515605d9be63a4d1d",
        "contentId": "470a310879c4db420f59538b20a7dc3e907461b97e056e47cd6944cda193a2b5",
        "name": "calculateLift",
        "displayName": "CrossTypeAnalyzer.calculateLift",
        "signature": "protected CrossTypeAnalyzer.calculateLift(antecedent: string[], consequent: string[], types: TypePropertyInfo[]): number",
        "signatureHash": "83b1226437ebc648c7fe18829e1b7443352915bbe63bb4592084e1a7bda66402",
        "filePath": "/src/analyzers/type-insights/cross-type-analyzer.ts",
        "fileHash": "3067045166e1508b44dc8b66f8e92b06",
        "startLine": 168,
        "endLine": 179,
        "startColumn": 2,
        "endColumn": 531,
        "astHash": "1d0e79a1a5ac1603",
        "contextPath": [
          "CrossTypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate lift metric for association rule\n   */\n  protected calculateLift(\n    antecedent: string[], \n    consequent: string[], \n    types: TypePropertyInfo[]\n  ): number {\n    const antecedentSupport = this.calculateSupport(antecedent, types);\n    const consequentSupport = this.calculateSupport(consequent, types);\n    const fullPatternSupport = this.calculateSupport([...antecedent, ...consequent], types);\n    \n    const expectedSupport = (antecedentSupport * consequentSupport) / types.length;\n    return expectedSupport === 0 ? 0 : fullPatternSupport / expectedSupport;\n  }",
        "sourceFileRefId": "6fe80e32-f668-4d24-8074-01f327b61e98",
        "parameters": [
          {
            "name": "antecedent",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "consequent",
            "type": "string[]",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "types",
            "type": "TypePropertyInfo[]",
            "typeSimple": "array",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 17,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 175.14,
          "halsteadDifficulty": 5.96,
          "maintainabilityIndex": 75.74
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "16fb8339-13a0-5316-a652-712f110dd07b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6fad184902bbf3432eb8738cd74e360ba2a4a7b79d54656bbff30a79c7c223d1",
        "contentId": "4d9b87740b3c12be808d6e539fd07ea994bd481f30f1e8b43240f4ef5a774ec0",
        "name": "getMainAnalysisCache",
        "displayName": "DistributedCacheManager.getMainAnalysisCache",
        "signature": "public DistributedCacheManager.getMainAnalysisCache(): AnalysisCache",
        "signatureHash": "9520653291d833f4863322c8b9a14b54463e8da9e8bde812062b6f18ccf0786d",
        "filePath": "/src/utils/distributed-cache-manager.ts",
        "fileHash": "2fecef49e97fcd19dea7828071fa2edc",
        "startLine": 169,
        "endLine": 171,
        "startColumn": 2,
        "endColumn": 80,
        "astHash": "84986376dfd4c79f",
        "contextPath": [
          "DistributedCacheManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get the main analysis cache for cases that need persistent storage\n   * This should be used sparingly to avoid centrality bottleneck\n   */\n  getMainAnalysisCache(): AnalysisCache {\n    return this.mainAnalysisCache;\n  }",
        "sourceFileRefId": "5e86d722-a217-4a9a-993d-7cc0f1464dd4",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 0.75,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "75fa5726-9698-5e66-b36e-10725785ddbc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6129e728496f3f75c0d9dd4bc41ab483e0025d3c057b68c26a4a6666d4ff3527",
        "contentId": "670b2b2b15df7fe43876803a38aa89395eae806b8fbd4f75f61ae357b1302cca",
        "name": "splitIntoBatches",
        "displayName": "splitIntoBatches",
        "signature": "splitIntoBatches(data: T[], batchSize: number): T[][]",
        "signatureHash": "f5d02ffa746119207c6cff3c44c5ae7c4b27d3f903922eb688413ac4cb598f76",
        "filePath": "/src/storage/bulk-insert-utils.ts",
        "fileHash": "73027149bc3396fe4e3f7f3d50b7b05c",
        "startLine": 170,
        "endLine": 178,
        "startColumn": 0,
        "endColumn": 230,
        "astHash": "79cdacfa979d60a2",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Split data into optimal batch sizes\n */\nexport function splitIntoBatches<T>(data: T[], batchSize: number): T[][] {\n  const batches: T[][] = [];\n\n  for (let i = 0; i < data.length; i += batchSize) {\n    batches.push(data.slice(i, i + batchSize));\n  }\n\n  return batches;\n}",
        "sourceFileRefId": "78dcb36c-74ab-44aa-bb06-829a383a940a",
        "parameters": [
          {
            "name": "data",
            "type": "T[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "batchSize",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 14,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 134.89,
          "halsteadDifficulty": 5.21,
          "maintainabilityIndex": 88.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c609eb48-4566-54f5-9674-c45590a211a1",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3666171aa28949655b0023d23facfaa0ec543f2787c5f76fb58d2e1116aa552f",
        "contentId": "2ca58cc311a3cfbd5151330ec0350dee0183c0b6163b177e3b7c6c89de443f2b",
        "name": "detectAnomaly",
        "displayName": "StreamingStats.detectAnomaly",
        "signature": "public StreamingStats.detectAnomaly(value: number): AnomalyResult",
        "signatureHash": "c6b8d711e3ef50ad827378e66685ce21313c407c49d3db5a5b53ef1c85e4619a",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 172,
        "endLine": 212,
        "startColumn": 2,
        "endColumn": 1075,
        "astHash": "1fc692aae4f45696",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Detect if a value is anomalous based on Z-score\n   *\n   * @param value The value to test for anomaly\n   * @returns Anomaly detection result\n   */\n  detectAnomaly(value: number): AnomalyResult {\n    // If variance tracking is disabled, cannot perform anomaly detection\n    if (!this.config.trackVariance) {\n      return {\n        isAnomaly: false,\n        severity: 'normal',\n        zScore: 0,\n        threshold: this.config.anomalyThreshold,\n        confidence: 0,\n        isReliable: false,\n      };\n    }\n\n    const zScore = this.zScore(value);\n    const absZScore = Math.abs(zScore);\n\n    // Calculate confidence based on sample size\n    const confidence = Math.min(this.count / this.config.minSamples, 1.0);\n\n    // Determine severity\n    let severity: AnomalyResult['severity'] = 'normal';\n    let isAnomaly = false;\n\n    if (absZScore > this.config.anomalyThreshold) {\n      isAnomaly = true;\n      if (absZScore > this.config.anomalyThreshold * 1.5) {\n        severity = 'critical';\n      } else {\n        severity = 'warning';\n      }\n    }\n\n    return {\n      isAnomaly,\n      severity,\n      zScore,\n      threshold: this.config.anomalyThreshold,\n      confidence,\n      isReliable: this.isReliable,\n    };\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 33,
          "totalLines": 49,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 9,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 446.25,
          "halsteadDifficulty": 7.38,
          "maintainabilityIndex": 42.59
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "31398458-3778-5018-904d-a49e095f12d5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0243f5b07f75cbe83c92a4de8297a4761bc77f6f8c111b51ac1cc126ddb5f435",
        "contentId": "9cbba6619ca9a29de1516f4fa911fd10be38e21380b074ef08eea8c5e8473b83",
        "name": "setTypeSystemAnalysisResults",
        "displayName": "setTypeSystemAnalysisResults",
        "signature": "setTypeSystemAnalysisResults(env: CommandEnvironment, result: TypeSystemAnalysisResult): void",
        "signatureHash": "f25640aa44efdd3c82dcef440c529302b97c87fa083c473cdb43a6b5f411c347",
        "filePath": "/src/utils/scan-shared-data-helpers.ts",
        "fileHash": "fb3c12746438ae96073d4c84272ca4d0",
        "startLine": 173,
        "endLine": 182,
        "startColumn": 0,
        "endColumn": 259,
        "astHash": "52a386317411a50c",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Update type system analysis results in shared data\n */\nexport function setTypeSystemAnalysisResults(\n  env: CommandEnvironment,\n  result: TypeSystemAnalysisResult\n): void {\n  if (!env.scanSharedData) {\n    throw new Error('ScanSharedData not initialized');\n  }\n  \n  env.scanSharedData.typeSystemResults = result;\n}",
        "sourceFileRefId": "9ee3e01b-3105-4ef6-9cbf-834aa13b52cf",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "result",
            "type": "TypeSystemAnalysisResult",
            "typeSimple": "TypeSystemAnalysisResult",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 64.53,
          "halsteadDifficulty": 2.17,
          "maintainabilityIndex": 87.93
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0de18bd2-6606-56fd-ac7a-9db1af4c7cc0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0f6350f200383d79b5631db521b46babc46baf210d17a170ef27c45507eff83a",
        "contentId": "c5482c139315a9669131b32ac395a97ae3bea4274ea13fdb75a0d8a2350212b4",
        "name": "getLayerNames",
        "displayName": "LayerAssigner.getLayerNames",
        "signature": "public LayerAssigner.getLayerNames(): string[]",
        "signatureHash": "834d8be0d5c1938e3eaf9f26167107decc2036cac52e700528dd7277cf912b6a",
        "filePath": "/src/analyzers/layer-assigner.ts",
        "fileHash": "39c2cd1001afd8804d1c687ab0e35d64",
        "startLine": 174,
        "endLine": 176,
        "startColumn": 2,
        "endColumn": 77,
        "astHash": "cedad0b048792a96",
        "contextPath": [
          "LayerAssigner"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get all layer names defined in the configuration\n   */\n  getLayerNames(): string[] {\n    return Object.keys(this.config.layers);\n  }",
        "sourceFileRefId": "cd4f0ea7-9b30-451a-ac3f-7eca0b69e2cf",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 30,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2755bcdb-056b-5e3c-8790-af5ff421f2ae",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "86c4ed45b22dad39a2dca1788e8dedd8c9e5c2af4eec26b7ca947554cd9a2edb",
        "contentId": "9e7be909c9bb43688821d693035bac332314f3f3d8d569e1fd4bee4b89e63a1e",
        "name": "getRuntimeStatistics",
        "displayName": "RuntimeTraceIntegrationStage.getRuntimeStatistics",
        "signature": "public RuntimeTraceIntegrationStage.getRuntimeStatistics(): {\r\n    tracesCollected: number;\r\n    functionsWithTraces: number;\r\n    averageExecutionsPerFunction: number;\r\n  }",
        "signatureHash": "4a300005e6e6271d30a46e1ab9e2fa04cedffeff82b684477172e76f628e5628",
        "filePath": "/src/analyzers/staged-analysis/stages/runtime-trace-integration.ts",
        "fileHash": "c8750b658f4ae79fd5a1e1dd6204d439",
        "startLine": 178,
        "endLine": 192,
        "startColumn": 2,
        "endColumn": 492,
        "astHash": "9e41f174d5ab79ef",
        "contextPath": [
          "RuntimeTraceIntegrationStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get runtime trace statistics\r\n   */\r\n  getRuntimeStatistics(): {\r\n    tracesCollected: number;\r\n    functionsWithTraces: number;\r\n    averageExecutionsPerFunction: number;\r\n  } {\r\n    const stats = this.runtimeTraceIntegrator.getCoverageStats();\r\n    \r\n    return {\r\n      tracesCollected: stats.totalExecutions,\r\n      functionsWithTraces: stats.totalCoveredFunctions,\r\n      averageExecutionsPerFunction: stats.totalCoveredFunctions > 0 \r\n        ? stats.totalExecutions / stats.totalCoveredFunctions \r\n        : 0\r\n    };\r\n  }",
        "sourceFileRefId": "6570a266-b34a-4852-8ceb-450775093416",
        "parameters": [],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 20,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4.67,
          "halsteadVolume": 128.93,
          "halsteadDifficulty": 4.18,
          "maintainabilityIndex": 72.41
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e4819add-f60a-51cc-a058-5b41a2679cbd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0c061b443d4a462dcdef0782782cb412f7297b1375cc5ac570af907f077aef85",
        "contentId": "65311ab8be0c1dd97def0f6348801f36fac0f8bb767439f6ca624e73699d658a",
        "name": "calculateContentHash",
        "displayName": "UtilityOperations.calculateContentHash",
        "signature": "public UtilityOperations.calculateContentHash(content: string): string",
        "signatureHash": "2b4a688a9fcf30e366681677bb163879b2f834677edca350830c2aac7356480f",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 179,
        "endLine": 187,
        "startColumn": 2,
        "endColumn": 311,
        "astHash": "c564044a4a809bf0",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Calculate hash for content (simple implementation)\r\n   */\r\n  calculateContentHash(content: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < content.length; i++) {\r\n      const char = content.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash).toString(16);\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "content",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 14,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 208.97,
          "halsteadDifficulty": 8.44,
          "maintainabilityIndex": 79.11
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a99e958a-bfeb-525d-81a8-ff3c2d848c56",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "05ec169d1c6329e8d1626ce2899cb90598c66f4e61db63837a0e5dca7bcc629d",
        "contentId": "494be42453cfc3cb6273b0b6c87c3349f575a96696efb0fe9f2da021975de2d0",
        "name": "cleanupOldVersions",
        "displayName": "SchemaVersioning.cleanupOldVersions",
        "signature": "public async SchemaVersioning.cleanupOldVersions(keepCount: number = 10): Promise<number>",
        "signatureHash": "f9f5915ff2e5bca44341ed5e03c4f02aa4c8f5cce085dba711f57301be392a8e",
        "filePath": "/src/storage/backup/avro/schema-versioning.ts",
        "fileHash": "6bfbaee21913fab520b88ffc82c63348",
        "startLine": 179,
        "endLine": 201,
        "startColumn": 2,
        "endColumn": 604,
        "astHash": "058549cda428c58c",
        "contextPath": [
          "SchemaVersioning"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clean up old schema versions\n   */\n  async cleanupOldVersions(keepCount: number = 10): Promise<number> {\n    const versions = await this.getAllVersions();\n    \n    if (versions.length <= keepCount) {\n      return 0;\n    }\n\n    const toDelete = versions.slice(keepCount);\n    let deletedCount = 0;\n\n    for (const version of toDelete) {\n      try {\n        const versionPath = path.join(this.schemaRegistryPath, `${version.hash}.json`);\n        await fs.unlink(versionPath);\n        this.versionCache.delete(version.hash);\n        deletedCount++;\n      } catch {\n        // Ignore deletion errors\n      }\n    }\n\n    return deletedCount;\n  }",
        "sourceFileRefId": "f4159773-ea1e-45c9-9e8a-2420caae0ace",
        "parameters": [
          {
            "name": "keepCount",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "10"
          }
        ],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 28,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4.5,
          "halsteadVolume": 269.88,
          "halsteadDifficulty": 2.92,
          "maintainabilityIndex": 60.53
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1f2ec490-b533-584e-ad89-67d77f1aa790",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "749de5a7febaa19f506e1dcbb47591bcf0ec4882fc05e40465fadf1ef576f476",
        "contentId": "6f708ee076974e8603ecb5b6814f739b4566cce5f7ddfe33da4e2bc8288d3bee",
        "name": "keys",
        "displayName": "LRUCache.keys",
        "signature": "public LRUCache.keys(): string[]",
        "signatureHash": "f0f8b896ff066128f21065f03f7dbfecc5740c61ed1121b4d1e415342e05933a",
        "filePath": "/src/utils/lru-cache.ts",
        "fileHash": "9e7cc25d9187f13519d1dd204cf365bd",
        "startLine": 180,
        "endLine": 190,
        "startColumn": 2,
        "endColumn": 199,
        "astHash": "cc534bab45157dbe",
        "contextPath": [
          "LRUCache"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get all keys (ordered by recency, most recent first)\n   */\n  keys(): string[] {\n    const keys: string[] = [];\n    let current = this.head;\n    \n    while (current) {\n      keys.push(current.key);\n      current = current.next;\n    }\n    \n    return keys;\n  }",
        "sourceFileRefId": "63e260d6-11da-45e1-9a89-1aaec4b385b2",
        "parameters": [],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 16,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 66.44,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 87.71
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "15caab54-d800-5867-8bfe-59dbda8bc828",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9c9833878d35b797ca8853ddeece5190e1114d4ed8e6b1e9572859fa7c1fbc51",
        "contentId": "c7679264d9a667ea82c4983ee0fdf50334f2cf129fcb0dc3375dd031ff24c10a",
        "name": "getLayerPatterns",
        "displayName": "LayerAssigner.getLayerPatterns",
        "signature": "public LayerAssigner.getLayerPatterns(layerName: string): string[]",
        "signatureHash": "564ee8385a5f05797190dbb40dacbd3d8a23d313ce85df905f3d8ed4b04a56e8",
        "filePath": "/src/analyzers/layer-assigner.ts",
        "fileHash": "39c2cd1001afd8804d1c687ab0e35d64",
        "startLine": 181,
        "endLine": 185,
        "startColumn": 2,
        "endColumn": 217,
        "astHash": "63180638a52f91a4",
        "contextPath": [
          "LayerAssigner"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get layer patterns for a specific layer\n   */\n  getLayerPatterns(layerName: string): string[] {\n    const layerConfig = this.config.layers[layerName];\n    if (!layerConfig) return [];\n    return Array.isArray(layerConfig) ? layerConfig : layerConfig.patterns;\n  }",
        "sourceFileRefId": "cd4f0ea7-9b30-451a-ac3f-7eca0b69e2cf",
        "parameters": [
          {
            "name": "layerName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 77.71,
          "halsteadDifficulty": 3.11,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0c2c283e-fe1c-536d-aa11-61a921a49a37",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e7e94836eb83b1d662c44bfb9d3eca0a96a581c82770b86d92bb97cd4ca6e1d3",
        "contentId": "0f9313efcae1c75802723ce180191f9a30aa15298378922673aa536b937aac6a",
        "name": "generateReport",
        "displayName": "PropertySliceMiner.generateReport",
        "signature": "public async PropertySliceMiner.generateReport(snapshotId?: string): Promise<PropertySliceReport>",
        "signatureHash": "b44e5c136714b4ce9b4e8e6188c958df9e5463ac013df4fd604622be63ea7d80",
        "filePath": "/src/analyzers/type-insights/property-slice-miner.ts",
        "fileHash": "0486fc7d2e3d408beca96140cc509dc9",
        "startLine": 182,
        "endLine": 201,
        "startColumn": 2,
        "endColumn": 705,
        "astHash": "28f6d209c5874834",
        "contextPath": [
          "PropertySliceMiner"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate comprehensive analysis report\n   */\n  async generateReport(snapshotId?: string): Promise<PropertySliceReport> {\n    const slices = await this.analyze(snapshotId);\n    \n    const highValueSlices = slices.filter(s => s.extractionBenefit === 'high');\n    const mediumValueSlices = slices.filter(s => s.extractionBenefit === 'medium');\n    const lowValueSlices = slices.filter(s => s.extractionBenefit === 'low');\n\n    const estimatedCodeReduction = slices.reduce((total, slice) => \n      total + slice.duplicateCode, 0\n    );\n\n    return {\n      totalSlices: slices.length,\n      highValueSlices,\n      mediumValueSlices,\n      lowValueSlices,\n      estimatedCodeReduction,\n      recommendations: this.generateRecommendations(slices)\n    };\n  }",
        "sourceFileRefId": "a2ec0c07-a6c9-4773-ac67-d772cadf304b",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 25,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 4,
          "commentLines": 3,
          "codeToCommentRatio": 5.67,
          "halsteadVolume": 373.29,
          "halsteadDifficulty": 3.66,
          "maintainabilityIndex": 60.12
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5804364d-a990-5f54-a86d-88c84e50d0d2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "435f0dda45cbe3a59cd188d5d71bcd18c902f7f65ede0b2b4c57da0c7f7914db",
        "contentId": "4161f53c976fe80a4235e34bd6761a802c6550248d14c9deb24b44686c357687",
        "name": "setCouplingAnalysisResults",
        "displayName": "setCouplingAnalysisResults",
        "signature": "setCouplingAnalysisResults(env: CommandEnvironment, result: CouplingAnalysisResult): void",
        "signatureHash": "2d1e95eea85785337afbdf052e49a7d2e5ccb2abe807b1c0d5ca60364af95c73",
        "filePath": "/src/utils/scan-shared-data-helpers.ts",
        "fileHash": "fb3c12746438ae96073d4c84272ca4d0",
        "startLine": 187,
        "endLine": 196,
        "startColumn": 0,
        "endColumn": 253,
        "astHash": "5aab1ccd042a7018",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Update coupling analysis results in shared data\n */\nexport function setCouplingAnalysisResults(\n  env: CommandEnvironment,\n  result: CouplingAnalysisResult\n): void {\n  if (!env.scanSharedData) {\n    throw new Error('ScanSharedData not initialized');\n  }\n  \n  env.scanSharedData.couplingResults = result;\n}",
        "sourceFileRefId": "9ee3e01b-3105-4ef6-9cbf-834aa13b52cf",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "result",
            "type": "CouplingAnalysisResult",
            "typeSimple": "CouplingAnalysisResult",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 64.53,
          "halsteadDifficulty": 2.17,
          "maintainabilityIndex": 87.93
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4fc02c29-bf42-58ac-ac7f-a112b1e8e273",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b3de45767ee2ee2bc02a5ffb3b5795d71d48f7614628436ffdfa43cd1b183891",
        "contentId": "2de766604c7a263c60cb59105c9c2c88cce6207841c771392f5d62fa923011dc",
        "name": "getTopologicalOrder",
        "displayName": "SCCAnalyzer.getTopologicalOrder",
        "signature": "public SCCAnalyzer.getTopologicalOrder(callEdges: CallEdge[]): string[][] | null",
        "signatureHash": "28da34a0afbab66f8fab8061c7956aa0b5ea45e5a2732e98ed309ece01e94626",
        "filePath": "/src/analyzers/scc-analyzer.ts",
        "fileHash": "11535fa1fa92f6cea52bd9a8c4a9600b",
        "startLine": 187,
        "endLine": 237,
        "startColumn": 2,
        "endColumn": 1510,
        "astHash": "0c1110afbedcd57c",
        "contextPath": [
          "SCCAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get topological order of SCCs (if DAG)\n   */\n  getTopologicalOrder(callEdges: CallEdge[]): string[][] | null {\n    const { nodes, edges } = this.calculateCondensationGraph(callEdges);\n    \n    // Build adjacency list for components\n    const adjList = new Map<string, Set<string>>();\n    const inDegree = new Map<string, number>();\n    \n    // Initialize\n    for (const node of nodes) {\n      adjList.set(node.id, new Set());\n      inDegree.set(node.id, 0);\n    }\n    \n    // Build graph\n    for (const edge of edges) {\n      adjList.get(edge.from)?.add(edge.to);\n      inDegree.set(edge.to, (inDegree.get(edge.to) || 0) + 1);\n    }\n    \n    // Kahn's algorithm for topological sort\n    const queue: string[] = [];\n    const result: string[][] = [];\n    \n    // Find nodes with no incoming edges\n    for (const [nodeId, degree] of inDegree.entries()) {\n      if (degree === 0) {\n        queue.push(nodeId);\n      }\n    }\n    \n    while (queue.length > 0) {\n      const current = queue.shift()!;\n      const component = nodes.find(n => n.id === current);\n      if (component) {\n        result.push(component.functionIds);\n      }\n      \n      // Process neighbors\n      for (const neighbor of adjList.get(current) || []) {\n        const newDegree = (inDegree.get(neighbor) || 0) - 1;\n        inDegree.set(neighbor, newDegree);\n        \n        if (newDegree === 0) {\n          queue.push(neighbor);\n        }\n      }\n    }\n    \n    // Check if all nodes were processed (no cycles between SCCs)\n    return result.length === nodes.length ? result : null;\n  }",
        "sourceFileRefId": "311c8637-01f3-40c7-adba-837d533de127",
        "parameters": [
          {
            "name": "callEdges",
            "type": "CallEdge[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 35,
          "totalLines": 56,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 13,
          "maxNestingLevel": 3,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 4,
          "loopCount": 5,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 10,
          "codeToCommentRatio": 3.5,
          "halsteadVolume": 945.11,
          "halsteadDifficulty": 8.52,
          "maintainabilityIndex": 33.52
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ff604053-2e0d-54d8-a86d-84f99db8180e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "feef47c60763f07e5cce11d490f86a583655f9efc3e79912b2dd130b8d389a14",
        "contentId": "b907c0b5b7727df0a6ded3f44b009d978fad270735ceb5699c0f3b47dac2ceba",
        "name": "updateMetrics",
        "displayName": "MetricsOperations.updateMetrics",
        "signature": "public async MetricsOperations.updateMetrics(functionId: string, updates: Partial<QualityMetrics>): Promise<void>",
        "signatureHash": "3f4381706dc682b447078e4b6e618fce8c3177e28b03590ae0e323d718f122fd",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 188,
        "endLine": 221,
        "startColumn": 2,
        "endColumn": 1052,
        "astHash": "2bd116a48347cf33",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Update specific metrics for a function\r\n   */\r\n  async updateMetrics(\r\n    functionId: string, \r\n    updates: Partial<QualityMetrics>\r\n  ): Promise<void> {\r\n    try {\r\n      const setClauses: string[] = [];\r\n      const values: unknown[] = [];\r\n      let paramIndex = 1;\r\n\r\n      // Build dynamic update query\r\n      for (const [key, value] of Object.entries(updates)) {\r\n        const columnName = this.camelToSnake(key);\r\n        setClauses.push(`${columnName} = $${paramIndex}`);\r\n        values.push(value ?? null);\r\n        paramIndex++;\r\n      }\r\n\r\n      if (setClauses.length === 0) return;\r\n\r\n      values.push(functionId); // Add function_id as last parameter\r\n\r\n      await this.db.query(\r\n        `UPDATE quality_metrics SET ${setClauses.join(', ')} \r\n         WHERE function_id = $${paramIndex}`,\r\n        values\r\n      );\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_WRITE_ERROR,\r\n        `Failed to update metrics: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "updates",
            "type": "Partial<QualityMetrics>",
            "typeSimple": "Partial<QualityMetrics>",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 29,
          "totalLines": 39,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 7.25,
          "halsteadVolume": 461.23,
          "halsteadDifficulty": 4.95,
          "maintainabilityIndex": 44.67
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "365d0215-1aa2-5e80-ab7d-8e8b7d538cab",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "726c00c44f80dcd6ff62bafb63c4da92b7c3afe048919da5645f0ebbac96426c",
        "contentId": "c163f331976dd9eea085363dac688161ed80ddb615b7de352defc3aadc02088c",
        "name": "matchesAnyLayer",
        "displayName": "LayerAssigner.matchesAnyLayer",
        "signature": "public LayerAssigner.matchesAnyLayer(filePath: string): boolean",
        "signatureHash": "a609fa495158e6c25213d1b563a3125c19b106867563fed00e7d1dd0feb2bc8d",
        "filePath": "/src/analyzers/layer-assigner.ts",
        "fileHash": "39c2cd1001afd8804d1c687ab0e35d64",
        "startLine": 190,
        "endLine": 203,
        "startColumn": 2,
        "endColumn": 427,
        "astHash": "c343e528a1b564b4",
        "contextPath": [
          "LayerAssigner"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if a file path matches any layer pattern\n   */\n  matchesAnyLayer(filePath: string): boolean {\n    const normalizedPath = this.normalizePath(filePath);\n    \n    for (const layerConfig of Object.values(this.config.layers)) {\n      const patterns = Array.isArray(layerConfig) ? layerConfig : layerConfig.patterns;\n      for (const pattern of patterns) {\n        if (minimatch(normalizedPath, pattern)) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }",
        "sourceFileRefId": "cd4f0ea7-9b30-451a-ac3f-7eca0b69e2cf",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 19,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 3,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4,
          "halsteadVolume": 152.93,
          "halsteadDifficulty": 1.53,
          "maintainabilityIndex": 74.04
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4a6f8c74-86f0-5b76-97de-adbb49ae83eb",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "712ea34d4b018bea879a3625bccf60849e6d63964925b3811167b59b7c2bc91c",
        "contentId": "a8b2f815e07cd0c00b8fd535fa49914c5adafce3e025a86541d17f9521cbee92",
        "name": "formatFileSize",
        "displayName": "UtilityOperations.formatFileSize",
        "signature": "public UtilityOperations.formatFileSize(bytes: number): string",
        "signatureHash": "6cb9bf5df0405d4b2ece8ef7de223f0e23e735031017d05ced55a03e8a19e480",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 192,
        "endLine": 203,
        "startColumn": 2,
        "endColumn": 303,
        "astHash": "c93e8bd7bb020df3",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Format file size in human readable format\r\n   */\r\n  formatFileSize(bytes: number): string {\r\n    const units = ['B', 'KB', 'MB', 'GB'];\r\n    let size = bytes;\r\n    let unitIndex = 0;\r\n\r\n    while (size >= 1024 && unitIndex < units.length - 1) {\r\n      size /= 1024;\r\n      unitIndex++;\r\n    }\r\n\r\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "bytes",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 17,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 165.06,
          "halsteadDifficulty": 7.8,
          "maintainabilityIndex": 78.19
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "94cd3091-6947-5e44-9891-8df5e0a4f9a7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bbb687b13c2a0a434c1c47e1f5cd6cddee20deef4892c9b35a472d5e41492d25",
        "contentId": "a460e2c2607f64f019daa4550021aa088d229a42b64c1cb9d78a1c862d4e54fd",
        "name": "analyze",
        "displayName": "CrossTypeAnalyzer.analyze",
        "signature": "public CrossTypeAnalyzer.analyze(snapshotId?: string): Promise<CrossTypePattern[]>",
        "signatureHash": "3d26007866f761b2ba6ec720d465eb9017809a3c839fff9d59154f33cf22baa1",
        "filePath": "/src/analyzers/type-insights/cross-type-analyzer.ts",
        "fileHash": "3067045166e1508b44dc8b66f8e92b06",
        "startLine": 196,
        "endLine": 196,
        "startColumn": 2,
        "endColumn": 69,
        "astHash": "c7e159573b5f84c0",
        "contextPath": [
          "CrossTypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Abstract method to be implemented by specific analyzers\n   */\n  abstract analyze(snapshotId?: string): Promise<CrossTypePattern[]>;",
        "sourceFileRefId": "6fe80e32-f668-4d24-8074-01f327b61e98",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 1,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 0.33,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "49a1d0e8-7dd6-57ef-88cf-adbf15cf5b59",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "47a78ffef39f9919ecd8ad744cd000b55377fbc22af75da1adbefa9208180858",
        "contentId": "447caab7b072bcd3841a802205166ca6d8f89745f1fd3a217fb0aff4bc8a8ce5",
        "name": "collectPropertyAccess",
        "displayName": "OnePassASTVisitor.collectPropertyAccess",
        "signature": "private OnePassASTVisitor.collectPropertyAccess(node: PropertyAccessExpression | Node, ctx: ScanContext): void",
        "signatureHash": "1966ec059934e7b2bf1a10f2d60965554c3f79b6545e17a189aeef37be45a62c",
        "filePath": "/src/analyzers/shared/one-pass-visitor.ts",
        "fileHash": "a3e738d9114f8146ab99389bb7345be9",
        "startLine": 196,
        "endLine": 253,
        "startColumn": 2,
        "endColumn": 2048,
        "astHash": "78bd1da73d6774ce",
        "contextPath": [
          "OnePassASTVisitor"
        ],
        "functionType": "method",
        "modifiers": [
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "private collectPropertyAccess(node: PropertyAccessExpression | Node, ctx: ScanContext): void {\n    const func = this.findContainingFunction(node);\n    if (!func) return;\n    \n    const funcId = this.getFunctionId(func, ctx);\n    const expression = Node.isPropertyAccessExpression(node) ? node.getExpression() : \n                       Node.isElementAccessExpression(node) ? node.getExpression() : null;\n    const propertyName = Node.isPropertyAccessExpression(node) ? node.getName() : \n                        Node.isElementAccessExpression(node) ? this.getElementAccessName(node) : 'unknown';\n    \n    if (!expression || !propertyName || propertyName === 'unknown') return;\n    \n    // Get parameter type map (lazy computation)\n    const paramMap = this.getOrCreateParamTypeMap(func, ctx);\n    \n    // Check if this is a parameter access\n    // Fixed: Properly extract parameter name from expression\n    let paramName: string | null = null;\n    if (Node.isIdentifier(expression)) {\n      paramName = expression.getText();\n    } else if (Node.isThisExpression(expression)) {\n      paramName = 'this';\n    }\n    \n    // `this` „ÅØÈñ¢Êï∞„Éë„É©„É°„Éº„Çø„Å´Âê´„Åæ„Çå„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂûã„ÇíÂãïÁöÑ„Å´Ê≥®ÂÖ•„Åô„Çã\n    if (paramName === 'this' && !paramMap.has('this')) {\n      try {\n        const thisType = ctx.checker.getTypeAtLocation(expression);\n        paramMap.set('this', thisType);\n      } catch {\n        return; // ÂûãËß£Ê±∫„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó\n      }\n    }\n    \n    if (!paramName || !paramMap.has(paramName)) {\n      return;\n    }\n    \n    // Classify access type\n    const accessType = this.classifyPropertyAccess(node);\n    \n    // Store usage data\n    if (!ctx.usageData.propertyAccesses.has(funcId)) {\n      ctx.usageData.propertyAccesses.set(funcId, new Map());\n    }\n    \n    const funcUsage = ctx.usageData.propertyAccesses.get(funcId)!;\n    if (!funcUsage.has(paramName)) {\n      funcUsage.set(paramName, []);\n    }\n    \n    funcUsage.get(paramName)!.push({\n      property: propertyName,\n      accessType,\n      line: node.getStartLineNumber(),\n      context: this.getAccessContext(node)\n    });\n  }",
        "sourceFileRefId": "58489f52-f9a0-4d2a-94b8-0bdfed6aa1bc",
        "parameters": [
          {
            "name": "node",
            "type": "PropertyAccessExpression | Node",
            "typeSimple": "PropertyAccessExpression | Node",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "ctx",
            "type": "ScanContext",
            "typeSimple": "ScanContext",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 42,
          "totalLines": 60,
          "cyclomaticComplexity": 18,
          "cognitiveComplexity": 18,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 4,
          "branchCount": 12,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 7,
          "halsteadVolume": 1372.29,
          "halsteadDifficulty": 7.42,
          "maintainabilityIndex": 25.31
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "433258c5-9f4c-52e6-9504-378fa01b917a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6fa9fc636b2d3ca2d88e18a2abb002453fac440b9a03e6b631f616d4b193f3fe",
        "contentId": "c194042aae893b7661e04a3d69e8625157808d50f0e7ec37a76502358ba7ff02",
        "name": "hasRuntimeTraces",
        "displayName": "RuntimeTraceIntegrationStage.hasRuntimeTraces",
        "signature": "public RuntimeTraceIntegrationStage.hasRuntimeTraces(): boolean",
        "signatureHash": "c9a9bb98724423b683223d5045c6fd3ef6e8391d385f1905e222c65ac2131721",
        "filePath": "/src/analyzers/staged-analysis/stages/runtime-trace-integration.ts",
        "fileHash": "c8750b658f4ae79fd5a1e1dd6204d439",
        "startLine": 197,
        "endLine": 200,
        "startColumn": 2,
        "endColumn": 148,
        "astHash": "28bb96bd810d1048",
        "contextPath": [
          "RuntimeTraceIntegrationStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Check if runtime traces are available\r\n   */\r\n  hasRuntimeTraces(): boolean {\r\n    const stats = this.runtimeTraceIntegrator.getCoverageStats();\r\n    return stats.totalCoveredFunctions > 0;\r\n  }",
        "sourceFileRefId": "6570a266-b34a-4852-8ceb-450775093416",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 43.19,
          "halsteadDifficulty": 1.71,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1be68b61-87bf-5d63-8232-31dd91a318dc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e1b3ff0a0586980bbf9a4aee5b9dcd2459f02ac9ad3feefdfea83e0253eba80d",
        "contentId": "36d4170f584b9dc1bca384284d22fc41045a54d8a497d1975b3c96d34d890d6b",
        "name": "hasAnalysisResults",
        "displayName": "hasAnalysisResults",
        "signature": "hasAnalysisResults(env: CommandEnvironment, analysisType: 'basic' | 'callGraph' | 'typeSystem' | 'coupling'): boolean",
        "signatureHash": "a22009d6d69b040f401c2287961368635ee385e718e4163d1b682a45b71feda5",
        "filePath": "/src/utils/scan-shared-data-helpers.ts",
        "fileHash": "fb3c12746438ae96073d4c84272ca4d0",
        "startLine": 201,
        "endLine": 221,
        "startColumn": 0,
        "endColumn": 589,
        "astHash": "08542324088bd7fa",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Check if specific analysis results are available\n */\nexport function hasAnalysisResults(\n  env: CommandEnvironment,\n  analysisType: 'basic' | 'callGraph' | 'typeSystem' | 'coupling'\n): boolean {\n  if (!env.scanSharedData) {\n    return false;\n  }\n\n  switch (analysisType) {\n    case 'basic':\n      return !!env.scanSharedData.basicResults && env.scanSharedData.functions.length > 0;\n    case 'callGraph':\n      return !!env.scanSharedData.callGraphResults;\n    case 'typeSystem':\n      return !!env.scanSharedData.typeSystemResults;\n    case 'coupling':\n      return !!env.scanSharedData.couplingResults;\n    default:\n      return false;\n  }\n}",
        "sourceFileRefId": "9ee3e01b-3105-4ef6-9cbf-834aa13b52cf",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "analysisType",
            "type": "'basic' | 'callGraph' | 'typeSystem' | 'coupling'",
            "typeSimple": "'basic' | 'callGraph' | 'typeSystem' | 'coupling'",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 20,
          "totalLines": 26,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 6,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 6.67,
          "halsteadVolume": 237.71,
          "halsteadDifficulty": 4,
          "maintainabilityIndex": 58.1
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "033ff6c4-1228-5939-ac54-9d2b6db48a40",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "dfd39acfce98f5c37381678da9567105351784716b2b93626bb9763cc068a602",
        "contentId": "66b082d9398e207931e76668dd8145868ac78e020e0297741b0eaab6a6e09ef7",
        "name": "getConfiguration",
        "displayName": "CrossTypeAnalyzer.getConfiguration",
        "signature": "public CrossTypeAnalyzer.getConfiguration(): CrossTypeAnalysisOptions",
        "signatureHash": "8f6f08b53fb9401b34752a60b3923a366b749704f03f091ef95bf870a4331a0d",
        "filePath": "/src/analyzers/type-insights/cross-type-analyzer.ts",
        "fileHash": "3067045166e1508b44dc8b66f8e92b06",
        "startLine": 201,
        "endLine": 203,
        "startColumn": 2,
        "endColumn": 84,
        "astHash": "db1cf25b7f70b777",
        "contextPath": [
          "CrossTypeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get analyzer-specific configuration\n   */\n  getConfiguration(): CrossTypeAnalysisOptions {\n    return { ...this.options };\n  }",
        "sourceFileRefId": "6fe80e32-f668-4d24-8074-01f327b61e98",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4b714acd-da8b-596a-8811-781d7010f14a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0abb35d449e52deb8940f28c0b8abf3705d5e4725e2ce7f261c52ed219ea2648",
        "contentId": "08dfc7dc3912246894c60779c74ab1b02495aeb49fc92e495b9cc5d57b5ebe7d",
        "name": "addMigrationRule",
        "displayName": "SchemaVersioning.addMigrationRule",
        "signature": "public async SchemaVersioning.addMigrationRule(rule: MigrationRule): Promise<void>",
        "signatureHash": "c0f1fa67d83fea908d0e57358ef297ac6f55a872a7fd5ce848953d80940f9d11",
        "filePath": "/src/storage/backup/avro/schema-versioning.ts",
        "fileHash": "6bfbaee21913fab520b88ffc82c63348",
        "startLine": 206,
        "endLine": 221,
        "startColumn": 2,
        "endColumn": 570,
        "astHash": "415cbdb0a15877f2",
        "contextPath": [
          "SchemaVersioning"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Add migration rule between schema versions\n   */\n  async addMigrationRule(rule: MigrationRule): Promise<void> {\n    const fromVersion = await this.getVersion(rule.fromVersion);\n    \n    if (!fromVersion.migrationRules) {\n      fromVersion.migrationRules = [];\n    }\n    \n    // Remove existing rule for same target\n    fromVersion.migrationRules = fromVersion.migrationRules.filter(\n      r => !(r.toVersion === rule.toVersion && r.tableName === rule.tableName)\n    );\n    \n    fromVersion.migrationRules.push(rule);\n    await this.saveVersion(fromVersion);\n    this.versionCache.set(fromVersion.hash, fromVersion);\n  }",
        "sourceFileRefId": "f4159773-ea1e-45c9-9e8a-2420caae0ace",
        "parameters": [
          {
            "name": "rule",
            "type": "MigrationRule",
            "typeSimple": "MigrationRule",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 21,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 4,
          "codeToCommentRatio": 3,
          "halsteadVolume": 337.6,
          "halsteadDifficulty": 6,
          "maintainabilityIndex": 68.56
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d2fed710-fda9-5512-bf55-6f9257931b5b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4098a5064bca709cff84075f4bbdfd0132a02713c23c95733696349bbe349efa",
        "contentId": "2515700263202d1cf0427c3fec0c96cdcddb9eacf8e3131f26702686c52b9ef9",
        "name": "getProject",
        "displayName": "FunctionAnalyzer.getProject",
        "signature": "public FunctionAnalyzer.getProject(): Project | null",
        "signatureHash": "9d2a42562382b89302bd430912e6f71ead7bd5c25dfd2682ec5b84f8470a8afb",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 208,
        "endLine": 210,
        "startColumn": 2,
        "endColumn": 61,
        "astHash": "bc20fe9c605b8f65",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get the ts-morph Project instance for shared usage\n   */\n  getProject(): Project | null {\n    return this.project;\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5f5ace6b-d552-5406-a383-3db157814a78",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "413e4245e2a7d96a8237ccc321e21343086d39e323091e7d33fdd6ffc119a52e",
        "contentId": "00f6ad6338ac983d85a6332bafb235b2d0efabd1df06df985eefd1278a27b051",
        "name": "readFilesWithChangeDetection",
        "displayName": "BatchFileReader.readFilesWithChangeDetection",
        "signature": "public async BatchFileReader.readFilesWithChangeDetection(filePaths: string[], lastModifiedTimes: Map<string, Date>): Promise<{\n    changed: Map<string, FileReadResult>;\n    unchanged: string[];\n  }>",
        "signatureHash": "bbdacc502313eafd9454ce4ec2ccc9ec86a9c9d2a282ccac653f3cf2c4c6c49f",
        "filePath": "/src/utils/batch-file-reader.ts",
        "fileHash": "02ccc3a44f0ca2be608534196172f6b4",
        "startLine": 211,
        "endLine": 255,
        "startColumn": 2,
        "endColumn": 1292,
        "astHash": "3c1f2292fcb1e5b3",
        "contextPath": [
          "BatchFileReader"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Read files with change detection (compare modification times)\n   */\n  async readFilesWithChangeDetection(\n    filePaths: string[],\n    lastModifiedTimes: Map<string, Date>\n  ): Promise<{\n    changed: Map<string, FileReadResult>;\n    unchanged: string[];\n  }> {\n    const changed = new Map<string, FileReadResult>();\n    const unchanged: string[] = [];\n    \n    // First, check modification times\n    const stats = await this.getFileStats(filePaths);\n    const filesToRead: string[] = [];\n    \n    for (const filePath of filePaths) {\n      const stat = stats.get(filePath);\n      const lastModified = lastModifiedTimes.get(filePath);\n      \n      if (!stat) {\n        // File doesn't exist or error getting stats\n        changed.set(filePath, {\n          filePath,\n          exists: false,\n          size: 0,\n          modifiedTime: new Date(0)\n        });\n      } else if (!lastModified || stat.mtime > lastModified) {\n        // File is new or modified\n        filesToRead.push(filePath);\n      } else {\n        // File unchanged\n        unchanged.push(filePath);\n      }\n    }\n    \n    // Read only changed files\n    if (filesToRead.length > 0) {\n      const readResults = await this.readFiles(filesToRead);\n      for (const [filePath, result] of readResults) {\n        changed.set(filePath, result);\n      }\n    }\n    \n    return { changed, unchanged };\n  }",
        "sourceFileRefId": "155d76f0-4c8f-4e1d-bf42-c46a9537fcda",
        "parameters": [
          {
            "name": "filePaths",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "lastModifiedTimes",
            "type": "Map<string, Date>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 35,
          "totalLines": 50,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 8,
          "codeToCommentRatio": 4.38,
          "halsteadVolume": 502.11,
          "halsteadDifficulty": 5.29,
          "maintainabilityIndex": 39.64
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4e05506b-995e-50df-bb20-44480d36cd37",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fc1aaba1cf84683396a67416c982ac3538bf5bed692b2143087ec4c5c1d5fd1a",
        "contentId": "86f539301ca1d42a62333a9c38c8cf6146b05a2dfe76b12e6c653a568912d204",
        "name": "clearAll",
        "displayName": "DistributedCacheManager.clearAll",
        "signature": "public async DistributedCacheManager.clearAll(): Promise<void>",
        "signatureHash": "cf3d8f6ef37bd792e2b45d66afd7c81b26619a3d2c5c559b62ece288a1416506",
        "filePath": "/src/utils/distributed-cache-manager.ts",
        "fileHash": "2fecef49e97fcd19dea7828071fa2edc",
        "startLine": 212,
        "endLine": 217,
        "startColumn": 2,
        "endColumn": 187,
        "astHash": "bf19622385f241a1",
        "contextPath": [
          "DistributedCacheManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear all caches\n   */\n  async clearAll(): Promise<void> {\n    await Promise.all([\n      this.mainAnalysisCache.clear(),\n      ...Array.from(this.cacheInstances.values()).map(cache => cache.clear())\n    ]);\n  }",
        "sourceFileRefId": "5e86d722-a217-4a9a-993d-7cc0f1464dd4",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 144.43,
          "halsteadDifficulty": 1.18,
          "maintainabilityIndex": 91.59
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0d3c9bea-c2ad-54a0-92ea-c7c2159fa734",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5122c36ef4e1e1791ae9c701d2529c1bc2cccdb6c64b7fb1caf9922e1568d05e",
        "contentId": "b048f5cdbc590dbfbbe5b47d45c9298004a83a09e7d1ed933a9c4b89bb3c02be",
        "name": "reset",
        "displayName": "RuntimeTraceIntegrationStage.reset",
        "signature": "public RuntimeTraceIntegrationStage.reset(): void",
        "signatureHash": "dd452cebbe378cc3cc4aafb60f2d133ce71402c08de5d28396c38be2538a7423",
        "filePath": "/src/analyzers/staged-analysis/stages/runtime-trace-integration.ts",
        "fileHash": "c8750b658f4ae79fd5a1e1dd6204d439",
        "startLine": 213,
        "endLine": 216,
        "startColumn": 2,
        "endColumn": 158,
        "astHash": "45f1780a0025da30",
        "contextPath": [
          "RuntimeTraceIntegrationStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Reset integrator state for fresh analysis\r\n   */\r\n  reset(): void {\r\n    // The runtime trace integrator handles its own state management\r\n    // This method is provided for consistency with other stages\r\n  }",
        "sourceFileRefId": "6570a266-b34a-4852-8ceb-450775093416",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 0.4,
          "halsteadVolume": 0,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "41af6b59-bdcf-5795-9fcb-8fc910002a13",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "618a2e639691bab6970b400d9d5d6eb93c3e28fbb484e7e603c2c53751c5ee8f",
        "contentId": "6edf81455de48b4dff7dd618131dff14c2fb529316495dc4c28a45d12664f1ae",
        "name": "dispose",
        "displayName": "FunctionAnalyzer.dispose",
        "signature": "public FunctionAnalyzer.dispose(): void",
        "signatureHash": "9576f24c11705a61a619704aea58cabc28aea2729c5a4dc3c82dc65d9d5e5e3c",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 215,
        "endLine": 232,
        "startColumn": 2,
        "endColumn": 683,
        "astHash": "590865877cb8f82e",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Cleanup resources\n   */\n  dispose(): void {\n    if (this.idealCallGraphAnalyzer) {\n      this.idealCallGraphAnalyzer.dispose();\n      this.idealCallGraphAnalyzer = null;\n    }\n    if (this.project) {\n      // Properly dispose the Project to free all SourceFiles and memory\n      // This should be the only place where Project disposal happens\n      try {\n        // Note: ts-morph Project doesn't have a dispose() method, but setting to null\n        // allows garbage collection to clean up SourceFiles and TypeScript compiler resources\n        this.project = null;\n      } catch (error) {\n        console.warn('Warning: Error during Project cleanup:', error);\n        this.project = null;\n      }\n    }\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 23,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 2,
          "halsteadVolume": 100.38,
          "halsteadDifficulty": 2.5,
          "maintainabilityIndex": 73.82
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8743a8c5-850e-5f38-9077-c2db2f965d03",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "da27795170909cce2510491330c953f7fd3c762b35f3fb3671c332682be7d35d",
        "contentId": "2efd45cfa673f000aa678bf95dbf6c6a3c4f16e1ca8cb79ac0b715f9c16b38cd",
        "name": "isCodeFile",
        "displayName": "UtilityOperations.isCodeFile",
        "signature": "public UtilityOperations.isCodeFile(filePath: string): boolean",
        "signatureHash": "35626d9d2e8e8aef389a02ffb2e5665847be89afe1bb4c93d79c37e7ed1124ac",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 216,
        "endLine": 219,
        "startColumn": 2,
        "endColumn": 164,
        "astHash": "62f2f371265b9867",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Check if file is a TypeScript/JavaScript file\r\n   */\r\n  isCodeFile(filePath: string): boolean {\r\n    const ext = this.getFileExtension(filePath);\r\n    return ['ts', 'tsx', 'js', 'jsx', 'mts', 'cts'].includes(ext);\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 74.23,
          "halsteadDifficulty": 1.15,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "90d51eb7-2ad7-51a1-86fc-6bd7b2b77f9a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "90334cbdea14548224f4a397a6c82c406b36648b7b17a3d3db9fbb526f16d372",
        "contentId": "03dba263ac231fc91f49dab64b4111a91cdbdbcf563beb92c60b3c3612f77fa7",
        "name": "getSafeEdges",
        "displayName": "IdealCallGraphAnalyzer.getSafeEdges",
        "signature": "public IdealCallGraphAnalyzer.getSafeEdges(): IdealCallEdge[]",
        "signatureHash": "5e510a095ad511ff0e02edc55f5b1652d1d3cb47d2c524417d7608b38652419e",
        "filePath": "/src/analyzers/ideal-call-graph-analyzer.ts",
        "fileHash": "69f7013eb689232120c46debbacec724",
        "startLine": 217,
        "endLine": 220,
        "startColumn": 2,
        "endColumn": 120,
        "astHash": "206de677711ef442",
        "contextPath": [
          "IdealCallGraphAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get edges suitable for safe deletion (high confidence only)\n   */\n  getSafeEdges(): IdealCallEdge[] {\n    // Implementation will be added after basic system is working\n    return [];\n  }",
        "sourceFileRefId": "15239115-c133-42e3-807c-aa13a63818a1",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 0.75,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2575c2bb-9f2a-5594-a9b9-5dd6fd9c766e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "39c0a0baab34b8d44c8a8d6d826a9370d60d359ef9da08175611ee9b95701d6f",
        "contentId": "f54cef9e8d74107ebb8de9ac971be5383679893c487131e6087706b880fb5cf1",
        "name": "getSummary",
        "displayName": "StreamingStats.getSummary",
        "signature": "public StreamingStats.getSummary(): StatsSummary",
        "signatureHash": "26bfd2b7405cd3dc992d3e88d2d68920e48d401d7048dc8f65c44a67db5601e0",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 217,
        "endLine": 227,
        "startColumn": 2,
        "endColumn": 336,
        "astHash": "03726c66f425415f",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get comprehensive statistical summary\n   */\n  getSummary(): StatsSummary {\n    return {\n      count: this.count,\n      mean: this.currentMean,\n      variance: this.currentVariance,\n      standardDeviation: this.currentStandardDeviation,\n      min: this.count === 0 ? 0 : this.minValue,\n      max: this.count === 0 ? 0 : this.maxValue,\n      isReliable: this.isReliable,\n    };\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 16,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 134.89,
          "halsteadDifficulty": 1.47,
          "maintainabilityIndex": 77.47
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b29cdbca-6ac5-55b9-8ff9-bd2601eed3ca",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "92f0b1bf4bf64c4a61c987768606d3c06f296d3a54b6ef60c961f73a344d4adf",
        "contentId": "79e493a3870dd94c1ddc977752accb3fb3b0f9a1cde891c2028d9b3a4e7e4ccc",
        "name": "getAllStats",
        "displayName": "DistributedCacheManager.getAllStats",
        "signature": "public DistributedCacheManager.getAllStats(): CacheStatsRecord",
        "signatureHash": "f66a99e11dac40717c76f88fed734ea4914dc8beb2628ccfc8dc471f5a72cfed",
        "filePath": "/src/utils/distributed-cache-manager.ts",
        "fileHash": "2fecef49e97fcd19dea7828071fa2edc",
        "startLine": 222,
        "endLine": 234,
        "startColumn": 2,
        "endColumn": 353,
        "astHash": "68150f8d4b9ec431",
        "contextPath": [
          "DistributedCacheManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cache statistics for all instances\n   */\n  getAllStats(): CacheStatsRecord {\n    const stats: CacheStatsRecord = {\n      mainAnalysisCache: this.mainAnalysisCache.getStats()\n    };\n\n    for (const [key, cache] of this.cacheInstances.entries()) {\n      if ('getStats' in cache && typeof cache.getStats === 'function') {\n        stats[key] = cache.getStats();\n      }\n    }\n\n    return stats;\n  }",
        "sourceFileRefId": "5e86d722-a217-4a9a-993d-7cc0f1464dd4",
        "parameters": [],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 18,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 166.91,
          "halsteadDifficulty": 6,
          "maintainabilityIndex": 75.65
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4592ec4e-875c-5e36-a060-220262e86344",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d6410f71863677143385067d8aa46cded9335db5fc19edf6428709963930eee6",
        "contentId": "4d7b399c1fc6b4ab31a8dea8c06d1ae3abaf8ae3eb31d06f538f65f7b49ffabc",
        "name": "percentage",
        "displayName": "percentage",
        "signature": "percentage(value: number, total: number): number",
        "signatureHash": "9876cf35ffa4033ca02d0ddd12ed9d8f207f53ad7af7b2dc3d76437159408ff8",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 223,
        "endLine": 226,
        "startColumn": 0,
        "endColumn": 182,
        "astHash": "b3e5489bc7efb498",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Calculate percentage with safe division\n */\nexport function percentage(value: number, total: number): number {\n  if (total === 0) return 0;\n  return Math.round((value / total) * 100 * 100) / 100; // Round to 2 decimal places\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "total",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 77.71,
          "halsteadDifficulty": 4.38,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "eed7ef0c-f0e3-5cc0-8ac1-25968b0c1835",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7fe73a9c52e2b4c4fcd1088f9fdeac07f06a9bf97a95f0ed3ed83f6bca3850d6",
        "contentId": "8d2255b69e461c5d01ca6e8479e6b50b54ab056da025a6e476fab52ea23816f5",
        "name": "sanitizeString",
        "displayName": "UtilityOperations.sanitizeString",
        "signature": "public UtilityOperations.sanitizeString(str: string): string",
        "signatureHash": "e98d62320926d0f95f47ceadc4400f3758cbd52b11205222e8b027b656600124",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 224,
        "endLine": 226,
        "startColumn": 2,
        "endColumn": 81,
        "astHash": "33163c9e058f56d0",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Sanitize string for use in SQL queries\r\n   */\r\n  sanitizeString(str: string): string {\r\n    return str.replace(/'/g, \"''\");\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "str",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 27,
          "halsteadDifficulty": 1.17,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5837dc87-d194-567f-b661-126090d2cd2b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "62a5dd181eef16c0208105c67c93dfe9d83f992fb624235d297d65f7a311ed2c",
        "contentId": "f6afe69b21ea2dcc2a19cf884c7c5f5095692996cb41382260d770d3d575db23",
        "name": "getReviewEdges",
        "displayName": "IdealCallGraphAnalyzer.getReviewEdges",
        "signature": "public IdealCallGraphAnalyzer.getReviewEdges(): IdealCallEdge[]",
        "signatureHash": "6a8c35ffcc5d425d55c0bd082de89e9e8e63d81d1cc7693ee7577ced6ec79aed",
        "filePath": "/src/analyzers/ideal-call-graph-analyzer.ts",
        "fileHash": "69f7013eb689232120c46debbacec724",
        "startLine": 225,
        "endLine": 228,
        "startColumn": 2,
        "endColumn": 122,
        "astHash": "b6f2513f206c9dbb",
        "contextPath": [
          "IdealCallGraphAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get edges requiring manual review\n   */\n  getReviewEdges(): IdealCallEdge[] {\n    // Implementation will be added after basic system is working\n    return [];\n  }",
        "sourceFileRefId": "15239115-c133-42e3-807c-aa13a63818a1",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 0.75,
          "halsteadVolume": 2,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c6afa834-0db9-5fdc-a754-8763347337cd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ba452ec4d26adc468cf6b8e52b246ccb46f0d5d13958f99df4cf68a5389faa72",
        "contentId": "24721eb664116c492a7d6afcdb5225c79dc75999fe5e4704f6134d8748e162a0",
        "name": "deleteMetrics",
        "displayName": "MetricsOperations.deleteMetrics",
        "signature": "public async MetricsOperations.deleteMetrics(functionId: string): Promise<boolean>",
        "signatureHash": "9c816217df3621595c9afdc93be39ae0c7d4cc04b1b08c03008ea8452d80ec96",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 226,
        "endLine": 240,
        "startColumn": 2,
        "endColumn": 545,
        "astHash": "47f392bd33e4ca65",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Delete metrics for a function\r\n   */\r\n  async deleteMetrics(functionId: string): Promise<boolean> {\r\n    try {\r\n      const result = await this.db.query(\r\n        'DELETE FROM quality_metrics WHERE function_id = $1',\r\n        [functionId]\r\n      );\r\n      return (result as unknown as { changes: number }).changes > 0;\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_WRITE_ERROR,\r\n        `Failed to delete metrics: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 20,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5,
          "halsteadVolume": 169.46,
          "halsteadDifficulty": 3.11,
          "maintainabilityIndex": 68.28
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ab29f021-0c96-5209-b068-7d97b661e54a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6eb329ad40aed4e863ad00198bbd0b1a101398ab1a61265cfe1315ea86341661",
        "contentId": "084d1d6934ec33fb80ac8839d6c99851aa6a4080b4d4f1a075624336c6d91c21",
        "name": "findMigrationPath",
        "displayName": "SchemaVersioning.findMigrationPath",
        "signature": "public async SchemaVersioning.findMigrationPath(fromHash: string, toHash: string): Promise<string[]>",
        "signatureHash": "70b823acbe6107a567eecc329d33642a6843f509e277385b04a21c078af840b5",
        "filePath": "/src/storage/backup/avro/schema-versioning.ts",
        "fileHash": "6bfbaee21913fab520b88ffc82c63348",
        "startLine": 226,
        "endLine": 240,
        "startColumn": 2,
        "endColumn": 514,
        "astHash": "eb5b39513bb04375",
        "contextPath": [
          "SchemaVersioning"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Find migration path between versions\n   */\n  async findMigrationPath(fromHash: string, toHash: string): Promise<string[]> {\n    if (fromHash === toHash) {\n      return [];\n    }\n\n    // Simple direct migration check for now\n    // In future, implement proper graph traversal for multi-step migrations\n    const fromVersion = await this.getVersion(fromHash);\n    \n    if (fromVersion.migrationRules?.some(r => r.toVersion === toHash)) {\n      return [fromHash, toHash];\n    }\n\n    throw new Error(`No migration path found from ${fromHash} to ${toHash}`);\n  }",
        "sourceFileRefId": "f4159773-ea1e-45c9-9e8a-2420caae0ace",
        "parameters": [
          {
            "name": "fromHash",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "toHash",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 20,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 5,
          "codeToCommentRatio": 2,
          "halsteadVolume": 124,
          "halsteadDifficulty": 2.65,
          "maintainabilityIndex": 80.33
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "efa39f6f-8eb5-5f8f-988a-18fb4946a30f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "29b23bad6cbd5d34d327b1a77c89b512ae8ac804316a086f74593e5cceb3b793",
        "contentId": "f39648124d7a07416f0383c640b56e0f9ab143e7854cb298f5fcf0bba984cc8f",
        "name": "constructor",
        "displayName": "TypeFunctionLinker.constructor",
        "signature": "public TypeFunctionLinker(project: Project, options?: TypeFunctionLinkerOptions & {\n      metricsProvider?: { getMetricsBatch: (functionIds: string[]) => Promise<Map<string, QualityMetrics>> } | undefined;\n    })",
        "signatureHash": "12da50d4ae3b88104a02c5b88ac974b6abf6b2a7814b1b8f7324939b0340306c",
        "filePath": "/src/analyzers/type-function-linker.ts",
        "fileHash": "a7102bbbac7a916310c7908bcf7170c8",
        "startLine": 227,
        "endLine": 249,
        "startColumn": 2,
        "endColumn": 1947,
        "astHash": "a8173d858b886356",
        "contextPath": [
          "TypeFunctionLinker"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(\n    project: Project, \n    options?: TypeFunctionLinkerOptions & {\n      metricsProvider?: { getMetricsBatch: (functionIds: string[]) => Promise<Map<string, QualityMetrics>> } | undefined;\n    }\n  ) {\n    this.project = project;\n    this.metricsProvider = options?.metricsProvider;\n    \n    // Merge default thresholds with user-provided thresholds\n    this.riskThresholds = {\n      SIGNATURE_LENGTH_WARNING: options?.riskThresholds?.signatureLengthWarning ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.SIGNATURE_LENGTH_WARNING,\n      SIGNATURE_LENGTH_CRITICAL: options?.riskThresholds?.signatureLengthCritical ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.SIGNATURE_LENGTH_CRITICAL,\n      NAME_LENGTH_WARNING: options?.riskThresholds?.nameLengthWarning ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.NAME_LENGTH_WARNING,\n      NAME_LENGTH_CRITICAL: options?.riskThresholds?.nameLengthCritical ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.NAME_LENGTH_CRITICAL,\n      CYCLOMATIC_COMPLEXITY_WARNING: options?.riskThresholds?.cyclomaticComplexityWarning ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.CYCLOMATIC_COMPLEXITY_WARNING,\n      CYCLOMATIC_COMPLEXITY_CRITICAL: options?.riskThresholds?.cyclomaticComplexityCritical ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.CYCLOMATIC_COMPLEXITY_CRITICAL,\n      MAINTAINABILITY_INDEX_WARNING: options?.riskThresholds?.maintainabilityIndexWarning ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.MAINTAINABILITY_INDEX_WARNING,\n      MAINTAINABILITY_INDEX_CRITICAL: options?.riskThresholds?.maintainabilityIndexCritical ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.MAINTAINABILITY_INDEX_CRITICAL,\n      LINES_OF_CODE_WARNING: options?.riskThresholds?.linesOfCodeWarning ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.LINES_OF_CODE_WARNING,\n      LINES_OF_CODE_CRITICAL: options?.riskThresholds?.linesOfCodeCritical ?? TypeFunctionLinker.DEFAULT_RISK_THRESHOLDS.LINES_OF_CODE_CRITICAL,\n    };\n  }",
        "sourceFileRefId": "d8feac5f-6614-4757-9623-b078f52b6d70",
        "parameters": [
          {
            "name": "project",
            "type": "Project",
            "typeSimple": "Project",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "TypeFunctionLinkerOptions & {\n      metricsProvider?: { getMetricsBatch: (functionIds: string[]) => Promise<Map<string, QualityMetrics>> } | undefined;\n    }",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 21,
          "totalLines": 25,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 11,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 21,
          "halsteadVolume": 739.3,
          "halsteadDifficulty": 3.91,
          "maintainabilityIndex": 47.76
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "76a9be7b-ba46-5f3d-a195-730052f222ca",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6651a69a91a29ae76ee040fde6a706e8c7452eef85690d20c588ff5ccc9796e3",
        "contentId": "faf8ba6c58200821caae3b646e77ce7337b25e7326fd100c1851a9bb8a104f3f",
        "name": "camelToSnake",
        "displayName": "UtilityOperations.camelToSnake",
        "signature": "public UtilityOperations.camelToSnake(str: string): string",
        "signatureHash": "d0a03446187fd20db9f46e02234dd1a91a69c2cf0db720bd28a1b5a29f5716e4",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 231,
        "endLine": 233,
        "startColumn": 2,
        "endColumn": 115,
        "astHash": "68462fbab50ae260",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Convert camelCase to snake_case\r\n   */\r\n  camelToSnake(str: string): string {\r\n    return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "str",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 46.51,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e98ddbc1-e184-5344-974c-aa0168f920cc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "37a8e59bdc4950263e11b5f70d2d2ffccdd927673d907388589ac38f4478e6e4",
        "contentId": "bbf554379ae42b216bab28987ec445cfbec15d8b257f943a33d599c7e1bc546c",
        "name": "clamp",
        "displayName": "clamp",
        "signature": "clamp(value: number, min: number, max: number): number",
        "signatureHash": "cb3999bb4d50cdec4e4f41dcc3527a56d14871e8703157c871556d371988c13e",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 231,
        "endLine": 233,
        "startColumn": 0,
        "endColumn": 120,
        "astHash": "d2f3a7ba72363f28",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Clamp value between min and max\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max);\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "min",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "max",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 53.89,
          "halsteadDifficulty": 1.86,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "82e08cba-c9f2-584f-9131-925562561e48",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9c7affcfccbb615fe037e7fb1a934ae2648d414618612a2ab95e4af0cd84def8",
        "contentId": "3a31da1642ed0b18e4dacee9c298dcc975831ff7b769ccfda12e8854210fc77c",
        "name": "createDefaultGitProvider",
        "displayName": "createDefaultGitProvider",
        "signature": "createDefaultGitProvider(): GitProvider",
        "signatureHash": "27a2745544437f88411c9b700909fafbad107649279237e1c1617d83ece6c44b",
        "filePath": "/src/utils/git/git-factory.ts",
        "fileHash": "a4849dc9530f19deb7dfc4a85d852be2",
        "startLine": 232,
        "endLine": 234,
        "startColumn": 0,
        "endColumn": 118,
        "astHash": "d036ef58a3f40f46",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * ‰æøÂà©„Å™Èñ¢Êï∞Ôºö„Éá„Éï„Ç©„É´„Éà„ÅÆGitProvider„ÇíÂèñÂæó\n */\nexport function createDefaultGitProvider(): GitProvider {\n  return GitFactory.getInstance().createDefaultProvider();\n}",
        "sourceFileRefId": "c4b1cc11-8455-431e-bbbc-32803e554054",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 34.87,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0e7f35c0-4fbc-5db7-b1e5-9502186dc877",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "88734922cec652f4e004d40035f3ed684319e24865bd888e8d414bd31c76e79f",
        "contentId": "f41327e0458eb727b22a8faa28c7183fca5c04a49f076c2526b8f4095fad9ff7",
        "name": "reset",
        "displayName": "StreamingStats.reset",
        "signature": "public StreamingStats.reset(): void",
        "signatureHash": "f27b202f28ebbc92685b7cd3e1f973aae084df47805fb6832edc5a073bd54c54",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 232,
        "endLine": 238,
        "startColumn": 2,
        "endColumn": 169,
        "astHash": "2d6fef540994f83f",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Reset all statistics to initial state\n   */\n  reset(): void {\n    this.count = 0;\n    this.mean = 0;\n    this.m2 = 0;\n    this.minValue = Number.POSITIVE_INFINITY;\n    this.maxValue = Number.NEGATIVE_INFINITY;\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 89.62,
          "halsteadDifficulty": 1.3,
          "maintainabilityIndex": 91.56
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1fc16e41-c503-5bca-9d88-6b35eac9f90d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4d7c6eb342b35d0f0204c089b84b014ef185c52fd5b869a526e8083aae74a0c8",
        "contentId": "0d0e64b29cdb31f6eb69ad9179530b89d64d3a5fa70cbed915476b7dfa1a4f35",
        "name": "formatCoverageAnalysis",
        "displayName": "CoverageAnalyzer.formatCoverageAnalysis",
        "signature": "public CoverageAnalyzer.formatCoverageAnalysis(analysis: TypeCoverageAnalysis): string",
        "signatureHash": "a3190718fbadbf592fbc99c0e94bf4a6483140a1de8ec74877c2c7fbba28d865",
        "filePath": "/src/analyzers/type-insights/coverage-analyzer.ts",
        "fileHash": "3f904041bdb6cb35ea26720758870439",
        "startLine": 235,
        "endLine": 298,
        "startColumn": 2,
        "endColumn": 2200,
        "astHash": "ec803a858f53cfc5",
        "contextPath": [
          "CoverageAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Format coverage analysis for display\n   */\n  formatCoverageAnalysis(analysis: TypeCoverageAnalysis): string {\n    const lines: string[] = [];\n    \n    lines.push(`\\nüî• Coverage Analysis for type '${analysis.typeName}'\\n`);\n    \n    // Usage summary\n    lines.push(`üìä Usage Summary:`);\n    lines.push(`  Total Properties: ${analysis.totalProperties}`);\n    const usedPct = analysis.totalProperties > 0\n      ? Math.round((analysis.usedProperties / analysis.totalProperties) * 100)\n      : 0;\n    lines.push(`  Used Properties:  ${analysis.usedProperties} (${usedPct}%)`);\n    lines.push('');\n\n    // Hot properties\n    if (analysis.hotProperties.length > 0) {\n      lines.push('üî• Hot Properties:');\n      for (const prop of analysis.hotProperties.slice(0, 5)) {\n        const readers = prop.readerCount;\n        const writers = prop.writerFunctions.size;\n        lines.push(`  ${prop.property}: ${prop.totalCalls} calls (${readers}r, ${writers}w)`);\n      }\n      lines.push('');\n    }\n\n    // Cold properties\n    if (analysis.coldProperties.length > 0) {\n      lines.push('‚ùÑÔ∏è  Cold Properties (unused):');\n      lines.push(`  ${analysis.coldProperties.slice(0, 5).join(', ')}`);\n      if (analysis.coldProperties.length > 5) {\n        lines.push(`  ...and ${analysis.coldProperties.length - 5} more`);\n      }\n      lines.push('');\n    }\n\n    // Write hubs\n    if (analysis.writeHubs.length > 0) {\n      lines.push('üìù Write Hubs:');\n      for (const hub of analysis.writeHubs.slice(0, 3)) {\n        lines.push(`  ${hub.property}: ${hub.writerFunctions.size} writers, ${hub.readerCount} readers`);\n      }\n      lines.push('');\n    }\n\n    // Readonly candidates\n    if (analysis.readOnlyCandidates.length > 0) {\n      lines.push('üîí Readonly Candidates:');\n      for (const candidate of analysis.readOnlyCandidates.slice(0, 5)) {\n        lines.push(`  ${candidate.property}: ${candidate.readerCount} reads, 0 writes`);\n      }\n      lines.push('');\n    }\n\n    // Recommendations\n    if (analysis.recommendations.length > 0) {\n      lines.push('üí° Recommendations:');\n      analysis.recommendations.forEach((rec, index) => {\n        lines.push(`  ${index + 1}. ${rec}`);\n      });\n      lines.push('');\n    }\n\n    return lines.join('\\n');\n  }",
        "sourceFileRefId": "a6e42406-f754-4faf-a55a-445a06291c7a",
        "parameters": [
          {
            "name": "analysis",
            "type": "TypeCoverageAnalysis",
            "typeSimple": "TypeCoverageAnalysis",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 50,
          "totalLines": 69,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 11,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 7,
          "loopCount": 3,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 9,
          "codeToCommentRatio": 5.56,
          "halsteadVolume": 1780.3,
          "halsteadDifficulty": 12.35,
          "maintainabilityIndex": 20.89
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ffaf1fb5-e927-566d-a5d7-a4a6363a91c4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "189f5bd11e03b42a059575cd1e46eb08b39988cc4848a19daef91e97ce083f8c",
        "contentId": "6769ac9683514a5db724d58c49bebcd1ce16a1c908d310e33b9bfb08979122f6",
        "name": "updateMockData",
        "displayName": "MockGitProvider.updateMockData",
        "signature": "public MockGitProvider.updateMockData(newData: Partial<MockGitData>): void",
        "signatureHash": "910ec838fb044f01e5953f539fbbc1200826318d3f1b2146ccc311748c851384",
        "filePath": "/src/utils/git/mock-git-provider.ts",
        "fileHash": "5ec98b4f67493090f9a3804e332283d9",
        "startLine": 235,
        "endLine": 237,
        "startColumn": 2,
        "endColumn": 113,
        "astHash": "eda8bbeb7a48ea4d",
        "contextPath": [
          "MockGitProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„É´„Éë„Éº„É°„ÇΩ„ÉÉ„Éâ\n\n  /**\n   * „É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞\n   */\n  updateMockData(newData: Partial<MockGitData>): void {\n    this.mockData = { ...this.mockData, ...newData };\n  }",
        "sourceFileRefId": "cab1f986-fe3d-49c2-a429-9f8e1fb6abbf",
        "parameters": [
          {
            "name": "newData",
            "type": "Partial<MockGitData>",
            "typeSimple": "Partial<MockGitData>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 0.75,
          "halsteadVolume": 28.07,
          "halsteadDifficulty": 1.4,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "96df5ed3-8e39-5b14-bde5-f960f46dc4fe",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7bd78515c72075a46211850dd04964d908168388150ce2523d1ddbd391f6e9bf",
        "contentId": "aa38c8754bbb89f986ea165f9bc6f3d5b31f303d16e5f8dca6af1cfa9cdc4049",
        "name": "snakeToCamel",
        "displayName": "UtilityOperations.snakeToCamel",
        "signature": "public UtilityOperations.snakeToCamel(str: string): string",
        "signatureHash": "1ca58f6b76766826e09f739ba002f7595607e722e25a5befa139a36e5b67e1c5",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 238,
        "endLine": 240,
        "startColumn": 2,
        "endColumn": 117,
        "astHash": "44a2d30967d2f07f",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Convert snake_case to camelCase\r\n   */\r\n  snakeToCamel(str: string): string {\r\n    return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "str",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 51.89,
          "halsteadDifficulty": 1.22,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7350c885-ce9d-505e-8163-caaef721ddfd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "41948eaef1c5a9c9988578e776e63ae5b1cdd19adcaf858c01c6a01348d7d8d7",
        "contentId": "9e07587dbd7626d0a5254f31f0b0d7432af5aaf64560f42421bff2aa2f3e2452",
        "name": "createGitProvider",
        "displayName": "createGitProvider",
        "signature": "createGitProvider(config: GitFactoryConfig): GitProvider",
        "signatureHash": "48695a5746aa449a906bea60ef655c0c8190ac652bde61eb0118f92c9f52ecb9",
        "filePath": "/src/utils/git/git-factory.ts",
        "fileHash": "a4849dc9530f19deb7dfc4a85d852be2",
        "startLine": 239,
        "endLine": 241,
        "startColumn": 0,
        "endColumn": 134,
        "astHash": "1a7ef591ce287e9c",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * ‰æøÂà©„Å™Èñ¢Êï∞ÔºöÊåáÂÆö„Åï„Çå„ÅüË®≠ÂÆö„ÅßGitProvider„Çí‰ΩúÊàê\n */\nexport function createGitProvider(config: GitFactoryConfig): GitProvider {\n  return GitFactory.getInstance().createProvider(config);\n}",
        "sourceFileRefId": "c4b1cc11-8455-431e-bbbc-32803e554054",
        "parameters": [
          {
            "name": "config",
            "type": "GitFactoryConfig",
            "typeSimple": "GitFactoryConfig",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 48.43,
          "halsteadDifficulty": 1.11,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f3fe3bc2-f744-5cc8-84a2-dd25d1bcf6a8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "93f32ca36fb6fec5604bab533d26f8d610da87455cd3ad5f00d2c718cdfad270",
        "contentId": "066074c87fff53e67ae14ac0b1cc02c8dbbb40c713e17637e821d4ee9ebdb0b7",
        "name": "getCommitFiles",
        "displayName": "GitCochangeProvider.getCommitFiles",
        "signature": "public async GitCochangeProvider.getCommitFiles(commitHash: string): Promise<string[]>",
        "signatureHash": "0ca445b1b2adfd8495916a91329a95743c3be1f8bbfe12e7100cc8e8cf2c8903",
        "filePath": "/src/analyzers/type-insights/git-cochange-provider.ts",
        "fileHash": "7af758c57709f5b11305695e6fa52504",
        "startLine": 239,
        "endLine": 257,
        "startColumn": 2,
        "endColumn": 698,
        "astHash": "a5aaceb9a539bcea",
        "contextPath": [
          "GitCochangeProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get files changed in a specific commit\n   */\n  async getCommitFiles(commitHash: string): Promise<string[]> {\n    try {\n      const output = this.runGit(['show', '--no-patch', '--name-only', '--pretty=format:', commitHash], {\n        cwd: this.repositoryRoot,\n        timeout: this.timeout\n      });\n\n      return output\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => line && this.isTypeScriptFile(line))\n        .map(file => this.normalizeFilePath(file));\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to get commit files for ${commitHash}: ${error.message}`);\n      }\n      throw new Error(`Failed to get commit files for ${commitHash}: ${String(error)}`);\n    }\n  }",
        "sourceFileRefId": "12866a76-6d42-49ab-8f8b-2d7fd8fcb1a0",
        "parameters": [
          {
            "name": "commitHash",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 24,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 3,
          "codeToCommentRatio": 6,
          "halsteadVolume": 375.08,
          "halsteadDifficulty": 3.03,
          "maintainabilityIndex": 58.06
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "50cca820-d758-518d-9553-ac8159a9eceb",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8919fe9e4f7336da4e7aadd1ff34604b34ddd1800af4a98cc0b2844aff550e3b",
        "contentId": "42d666ce5b5e3387972f0b80677431b21122d672b1cb66a805efa3ce0765d199",
        "name": "deepMerge",
        "displayName": "deepMerge",
        "signature": "deepMerge(target: T, ...sources: Partial<T>[]): T",
        "signatureHash": "d6cb075d8d7c0ece5a9ccc673d03b59d115825ff14a0374a0f469e3a032977be",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 239,
        "endLine": 252,
        "startColumn": 0,
        "endColumn": 314,
        "astHash": "c8cf59353a458686",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Deep merge objects using simple JSON approach\n */\nexport function deepMerge<T extends Record<string, unknown>>(\n  target: T,\n  ...sources: Partial<T>[]\n): T {\n  const result = JSON.parse(JSON.stringify(target)) as T;\n\n  for (const source of sources) {\n    if (source) {\n      Object.assign(result, JSON.parse(JSON.stringify(source)));\n    }\n  }\n\n  return result;\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "target",
            "type": "T",
            "typeSimple": "T",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "sources",
            "type": "Partial<T>[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": true
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 20,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4,
          "halsteadVolume": 179.31,
          "halsteadDifficulty": 2.06,
          "maintainabilityIndex": 73.3
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "15996f5f-5104-54e2-82b4-916b03803f0b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "08f642df20988ce133efffe454542e05309867326e26dc0a8448220489a36f58",
        "contentId": "af3c467c737909f2c0ef3eb94554c0ab395284f4eb4df68e5ea446a3b6b0377d",
        "name": "cleanupScanSharedData",
        "displayName": "cleanupScanSharedData",
        "signature": "cleanupScanSharedData(env: CommandEnvironment): void",
        "signatureHash": "27fa2a1ab6b0990d98e525d9201f13f73932c629c7948b0c44a12f245c53bf07",
        "filePath": "/src/utils/scan-shared-data-helpers.ts",
        "fileHash": "fb3c12746438ae96073d4c84272ca4d0",
        "startLine": 239,
        "endLine": 254,
        "startColumn": 0,
        "endColumn": 558,
        "astHash": "d11503d641961f71",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Cleanup shared data to free memory\n */\nexport function cleanupScanSharedData(env: CommandEnvironment): void {\n  if (env.scanSharedData) {\n    // Clear large data structures\n    env.scanSharedData.fileContentMap.clear();\n    env.scanSharedData.sourceFileIdMap.clear();\n    \n    // Clear analysis results (delete optional properties)\n    delete env.scanSharedData.basicResults;\n    delete env.scanSharedData.callGraphResults;\n    delete env.scanSharedData.typeSystemResults;\n    delete env.scanSharedData.couplingResults;\n    \n    // Clear the entire shared data\n    delete env.scanSharedData;\n  }\n}",
        "sourceFileRefId": "9ee3e01b-3105-4ef6-9cbf-834aa13b52cf",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 21,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 1.83,
          "halsteadVolume": 183.62,
          "halsteadDifficulty": 2.23,
          "maintainabilityIndex": 75.39
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "23ac4eb4-b63c-5b8b-8565-7a30ccd962bd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "10eab05bdecb48ebb621ad11a8f88cee31e8f18f762d256de3e3ecfd7020d7d3",
        "contentId": "6d5e26192ce223a6810e9fa389386f77d931d16a511b7b4ae87526d14b5565e3",
        "name": "getMockData",
        "displayName": "MockGitProvider.getMockData",
        "signature": "public MockGitProvider.getMockData(): MockGitData",
        "signatureHash": "0f47cd495719072549ff70b7f29fa7563f61af92da3edf308d1813100b5f2d0e",
        "filePath": "/src/utils/git/mock-git-provider.ts",
        "fileHash": "5ec98b4f67493090f9a3804e332283d9",
        "startLine": 242,
        "endLine": 244,
        "startColumn": 2,
        "endColumn": 67,
        "astHash": "387f1921ede6b8b7",
        "contextPath": [
          "MockGitProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * ÁèæÂú®„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíÂèñÂæó\n   */\n  getMockData(): MockGitData {\n    return { ...this.mockData };\n  }",
        "sourceFileRefId": "cab1f986-fe3d-49c2-a429-9f8e1fb6abbf",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "88572312-0a7f-5537-969f-e95fb3e578e5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "13ba0e2c8985c09177e177444bd2d70e909e249831b418d411cfe16f804233a1",
        "contentId": "f2f64918fb5b7603b9eaec1dd2206567431627940b032f4ee9b203b597f548de",
        "name": "assessFunctionRisk",
        "displayName": "ThresholdEvaluator.assessFunctionRisk",
        "signature": "public ThresholdEvaluator.assessFunctionRisk(functionId: string, functionName: string, filePath: string, startLine: number, endLine: number, metrics: QualityMetrics, violations: ThresholdViolation[], assessmentConfig?: RiskAssessmentConfig): FunctionRiskAssessment",
        "signatureHash": "f6b9788a9839bc38486c13034da773bc6be0a5c7ebf6cedec371e947c40cf1ca",
        "filePath": "/src/utils/threshold-evaluator.ts",
        "fileHash": "6d7018b3b2a13b67bcc1a023d0912607",
        "startLine": 242,
        "endLine": 284,
        "startColumn": 2,
        "endColumn": 1022,
        "astHash": "9e6decd44a7d59f5",
        "contextPath": [
          "ThresholdEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Assess function risk based on violations and configuration\n   */\n  assessFunctionRisk(\n    functionId: string,\n    functionName: string,\n    filePath: string,\n    startLine: number,\n    endLine: number,\n    metrics: QualityMetrics,\n    violations: ThresholdViolation[],\n    assessmentConfig?: RiskAssessmentConfig\n  ): FunctionRiskAssessment {\n    const config = this.getDefaultRiskAssessmentConfig(assessmentConfig);\n\n    // Count violations by level\n    const violationsByLevel: Record<ViolationLevel, number> = {\n      warning: 0,\n      error: 0,\n      critical: 0,\n    };\n\n    violations.forEach(v => {\n      violationsByLevel[v.level]++;\n    });\n\n    // Calculate risk score\n    const riskScore = this.calculateRiskScore(violations, config);\n\n    // Determine risk level\n    const riskLevel = this.determineRiskLevel(violations, config);\n\n    return {\n      functionId,\n      functionName,\n      filePath,\n      startLine,\n      endLine,\n      violations,\n      totalViolations: violations.length,\n      riskLevel,\n      riskScore,\n      violationsByLevel,\n      metrics,\n    };\n  }",
        "sourceFileRefId": "0b4dfca5-28d2-40b1-90d2-3058fabc8ca5",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functionName",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "startLine",
            "type": "number",
            "typeSimple": "number",
            "position": 3,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "endLine",
            "type": "number",
            "typeSimple": "number",
            "position": 4,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "metrics",
            "type": "QualityMetrics",
            "typeSimple": "QualityMetrics",
            "position": 5,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "violations",
            "type": "ThresholdViolation[]",
            "typeSimple": "array",
            "position": 6,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "assessmentConfig",
            "type": "RiskAssessmentConfig",
            "typeSimple": "RiskAssessmentConfig",
            "position": 7,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 35,
          "totalLines": 48,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 8,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 6,
          "codeToCommentRatio": 5.83,
          "halsteadVolume": 359.41,
          "halsteadDifficulty": 3.2,
          "maintainabilityIndex": 43.53
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "89646a96-4cc2-53e4-93a7-5c2af57faeb8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a5ccf5d1680f6a7f4ef3c55058fdf32c61d1ae6cf49cac21fa67b2ec381d5367",
        "contentId": "5cfba6f642a7b9827d47f1fb5fc5f628a7eb5adc2580247299be46ec98bf52e2",
        "name": "clone",
        "displayName": "StreamingStats.clone",
        "signature": "public StreamingStats.clone(): StreamingStats",
        "signatureHash": "a6ed56bcd45ae329af848c921ca2ed8143b2715a525bca37f5fdabfabe91165e",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 243,
        "endLine": 251,
        "startColumn": 2,
        "endColumn": 261,
        "astHash": "a6c270276cc393e4",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Create a copy of this StreamingStats instance\n   */\n  clone(): StreamingStats {\n    const cloned = new StreamingStats(this.config);\n    cloned.count = this.count;\n    cloned.mean = this.mean;\n    cloned.m2 = this.m2;\n    cloned.minValue = this.minValue;\n    cloned.maxValue = this.maxValue;\n    return cloned;\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 14,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 128,
          "halsteadDifficulty": 2.33,
          "maintainabilityIndex": 83.02
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ab0a12a5-24dd-5385-902c-c400a97de8af",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4d2863d798aa08287e41f39deb2c7a49c3819dad683b0568456629a877b8f211",
        "contentId": "2a4c707a6d33dce2453ddd5444a5b213f0e2c63cacb9db0bb9e5f1d52479bbe6",
        "name": "getSnapshotMetrics",
        "displayName": "MetricsOperations.getSnapshotMetrics",
        "signature": "public async MetricsOperations.getSnapshotMetrics(snapshotId: string): Promise<{\r\n    totalFunctions: number;\r\n    avgComplexity: number;\r\n    maxComplexity: number;\r\n    avgLinesOfCode: number;\r\n    totalLinesOfCode: number;\r\n    complexityDistribution: Record<string, number>;\r\n  }>",
        "signatureHash": "3af58df441ce6ffb90f25aac2e97117df34d21c4724d5f859f3d9ce0d820aa34",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 245,
        "endLine": 304,
        "startColumn": 2,
        "endColumn": 2415,
        "astHash": "8d0e05538c5ebffd",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get aggregate metrics for a snapshot\r\n   */\r\n  async getSnapshotMetrics(snapshotId: string): Promise<{\r\n    totalFunctions: number;\r\n    avgComplexity: number;\r\n    maxComplexity: number;\r\n    avgLinesOfCode: number;\r\n    totalLinesOfCode: number;\r\n    complexityDistribution: Record<string, number>;\r\n  }> {\r\n    try {\r\n      const result = await this.db.query(\r\n        `\r\n        SELECT \r\n          COUNT(*) as total_functions,\r\n          AVG(q.cyclomatic_complexity) as avg_complexity,\r\n          MAX(q.cyclomatic_complexity) as max_complexity,\r\n          AVG(q.lines_of_code) as avg_lines,\r\n          SUM(q.lines_of_code) as total_lines,\r\n          SUM(CASE WHEN q.cyclomatic_complexity <= 5 THEN 1 ELSE 0 END) as low_complexity,\r\n          SUM(CASE WHEN q.cyclomatic_complexity > 5 AND q.cyclomatic_complexity <= 10 THEN 1 ELSE 0 END) as medium_complexity,\r\n          SUM(CASE WHEN q.cyclomatic_complexity > 10 AND q.cyclomatic_complexity <= 20 THEN 1 ELSE 0 END) as high_complexity,\r\n          SUM(CASE WHEN q.cyclomatic_complexity > 20 THEN 1 ELSE 0 END) as very_high_complexity\r\n        FROM functions f\r\n        LEFT JOIN quality_metrics q ON f.id = q.function_id\r\n        WHERE f.snapshot_id = $1\r\n        `,\r\n        [snapshotId]\r\n      );\r\n\r\n      const row = result.rows[0] as {\r\n        total_functions: string;\r\n        avg_complexity: string;\r\n        max_complexity: string;\r\n        avg_lines: string;\r\n        total_lines: string;\r\n        low_complexity: string;\r\n        medium_complexity: string;\r\n        high_complexity: string;\r\n        very_high_complexity: string;\r\n      };\r\n      return {\r\n        totalFunctions: parseInt(row.total_functions) || 0,\r\n        avgComplexity: parseFloat(row.avg_complexity) || 0,\r\n        maxComplexity: parseInt(row.max_complexity) || 0,\r\n        avgLinesOfCode: parseFloat(row.avg_lines) || 0,\r\n        totalLinesOfCode: parseInt(row.total_lines) || 0,\r\n        complexityDistribution: {\r\n          low: parseInt(row.low_complexity) || 0,\r\n          medium: parseInt(row.medium_complexity) || 0,\r\n          high: parseInt(row.high_complexity) || 0,\r\n          veryHigh: parseInt(row.very_high_complexity) || 0,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get snapshot metrics: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 59,
          "totalLines": 65,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 13,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 19.67,
          "halsteadVolume": 751.2,
          "halsteadDifficulty": 6.04,
          "maintainabilityIndex": 23.04
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "90f4525c-1d4d-5599-99b2-8a61ab758c2d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1395692a7a907691aafdfcc377495dca4fa5966faeac992e0667d39150d6bf52",
        "contentId": "8c0abfb3112ae9de499a70cd4863c947d8dec16c6197e76d452c1e5919d01ae7",
        "name": "execGitCommandSync",
        "displayName": "NativeGitProvider.execGitCommandSync",
        "signature": "public NativeGitProvider.execGitCommandSync(command: string): string",
        "signatureHash": "45888ea3890557a29a0577b114c038e31a05cbdca78ce0dd1cf43964d0a4da63",
        "filePath": "/src/utils/git/native-git-provider.ts",
        "fileHash": "73c22b2a463d31eefddcdf3ecc7e8a8b",
        "startLine": 247,
        "endLine": 265,
        "startColumn": 2,
        "endColumn": 627,
        "astHash": "c4ff3a22a29ad757",
        "contextPath": [
          "NativeGitProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * ÂêåÊúüÁöÑ„Å´Git„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°åÔºà„É¨„Ç¨„Ç∑„Éº„Çµ„Éù„Éº„ÉàÁî®Ôºâ\n   */\n  execGitCommandSync(command: string): string {\n    try {\n      const result = execSync(command, {\n        cwd: this.config.cwd,\n        timeout: this.config.timeout,\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      return result;\n    } catch (error: unknown) {\n      if (error && typeof error === 'object' && 'status' in error && error.status === null) {\n        throw new GitTimeoutError(\n          `Git command timed out after ${this.config.timeout}ms: ${command}`,\n          this.config.timeout\n        );\n      }\n      throw this.createGitError(`Failed to execute git command: ${command}`, error);\n    }\n  }",
        "sourceFileRefId": "9c01ecb1-427b-40ec-a09b-8501a8c53fcd",
        "parameters": [
          {
            "name": "command",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 19,
          "totalLines": 25,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 6.33,
          "halsteadVolume": 239.75,
          "halsteadDifficulty": 4.86,
          "maintainabilityIndex": 59.7
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9bc76437-49c5-50c1-9372-48d649e219f7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3ba97ef03f1223910b7d1e3afe2e8104def57319b542589d2d4573f620030494",
        "contentId": "2c976121d4c18d533358a49c7694340a6ce20ed79bd80e049f29fb2e161ff4d4",
        "name": "createSampleConfig",
        "displayName": "CallbackConfigManager.createSampleConfig",
        "signature": "public CallbackConfigManager.createSampleConfig(outputPath: string): void",
        "signatureHash": "d5eca6437110bcd5fafffbfb158b27f4f827607b2171e79682b8ddc8e6016456",
        "filePath": "/src/config/callback-config.ts",
        "fileHash": "7fe35677951f085e04545ae537d36a75",
        "startLine": 248,
        "endLine": 285,
        "startColumn": 2,
        "endColumn": 1036,
        "astHash": "61ef438f3965d64a",
        "contextPath": [
          "CallbackConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Create a sample configuration file\n   */\n  createSampleConfig(outputPath: string): void {\n    const sampleConfig = {\n      enabled: true,\n      frameworks: {\n        commander: {\n          enabled: true,\n          triggerMethods: ['parse', 'parseAsync'],\n          registrationMethods: ['action', 'hook'],\n          defaultConfidence: 0.9\n        },\n        express: {\n          enabled: false,\n          triggerMethods: ['listen'],\n          registrationMethods: ['get', 'post', 'use'],\n          defaultConfidence: 0.85\n        }\n      },\n      options: {\n        maxDepth: 10,\n        includeLowConfidence: false,\n        minConfidence: 0.7\n      }\n    };\n\n    const yamlContent = yaml.dump(sampleConfig, {\n      indent: 2,\n      lineWidth: 100,\n      noRefs: true\n    });\n\n    const fullContent = `# funcqc callback registration analysis configuration\n# This file configures how funcqc detects and tracks callback registration patterns\n# in various frameworks like Commander.js, Express.js, etc.\n\n${yamlContent}`;\n\n    fs.writeFileSync(outputPath, fullContent, 'utf8');\n  }",
        "sourceFileRefId": "06b4d7d0-2d82-4c1d-a91a-5d86b15df5c3",
        "parameters": [
          {
            "name": "outputPath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 34,
          "totalLines": 43,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 11.33,
          "halsteadVolume": 285.79,
          "halsteadDifficulty": 1.23,
          "maintainabilityIndex": 45.93
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b3d08205-c7b4-5a35-a023-11933d28d96a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "32605d795584f3cb9280b3b4c165c3a169772f682f7bf2ad00b1a18cbdc25641",
        "contentId": "153cccd534f36e18b36f1de2b8f610c81f441d61639ef55e42fce95588370ad1",
        "name": "simulateError",
        "displayName": "MockGitProvider.simulateError",
        "signature": "public MockGitProvider.simulateError(method: keyof GitProvider, error: Error): void",
        "signatureHash": "d4e5499b45f26483665950ad85af92282bee6a3f020333826c5e0dc45d678e66",
        "filePath": "/src/utils/git/mock-git-provider.ts",
        "fileHash": "5ec98b4f67493090f9a3804e332283d9",
        "startLine": 249,
        "endLine": 260,
        "startColumn": 2,
        "endColumn": 370,
        "astHash": "865df7bf4d80e08a",
        "contextPath": [
          "MockGitProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * „Ç®„É©„Éº„Çí„Ç∑„Éü„É•„É¨„Éº„Éà\n   */\n  simulateError(method: keyof GitProvider, error: Error): void {\n    const originalMethod = this[method];\n    \n    (this as Record<string, unknown>)[method] = async () => {\n      throw error;\n    };\n\n    // ÂÖÉ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíÂæ©ÂÖÉ„Åô„Çã„Åü„ÇÅ„ÅÆ„Éò„É´„Éë„Éº\n    (this as Record<string, unknown>)[`restore${method}`] = () => {\n      (this as Record<string, unknown>)[method] = originalMethod;\n    };\n  }",
        "sourceFileRefId": "cab1f986-fe3d-49c2-a429-9f8e1fb6abbf",
        "parameters": [
          {
            "name": "method",
            "type": "keyof GitProvider",
            "typeSimple": "keyof GitProvider",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "error",
            "type": "Error",
            "typeSimple": "Error",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2.25,
          "halsteadVolume": 69.74,
          "halsteadDifficulty": 2.14,
          "maintainabilityIndex": 87.57
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "dc0a949e-911f-56d8-8a53-105d968e3a52",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1e56a9e30e4998cb444ce2b8ff311bceb2a7134e6828d6a09fde6b8b5f1e4d1f",
        "contentId": "2b9779e3f1dbecc322918e2f972d6f3fe3ba2e8a101867d7024d1bb25acc3238",
        "name": "resetDistributedCacheManager",
        "displayName": "resetDistributedCacheManager",
        "signature": "resetDistributedCacheManager(): void",
        "signatureHash": "53881b534084b10d559039131e7e7619cf118157fd739f63789baebd01d377b2",
        "filePath": "/src/utils/distributed-cache-manager.ts",
        "fileHash": "2fecef49e97fcd19dea7828071fa2edc",
        "startLine": 253,
        "endLine": 255,
        "startColumn": 0,
        "endColumn": 85,
        "astHash": "83a4520f04806fa8",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Reset the global cache manager (mainly for testing)\n */\nexport function resetDistributedCacheManager(): void {\n  globalCacheManager = null;\n}",
        "sourceFileRefId": "5e86d722-a217-4a9a-993d-7cc0f1464dd4",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 4.75,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bbd50568-bde8-5c0a-abc6-b82c9006d4ba",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0a4c15d73fa8d7d5efc8fc2f5d091384623e67838d3fbf46de50e1a86f2314d6",
        "contentId": "17ec24025359dd2d11b80ddd758419cd79adaca3223cd452203dac5435bcce2f",
        "name": "collectFunctionCall",
        "displayName": "OnePassASTVisitor.collectFunctionCall",
        "signature": "private OnePassASTVisitor.collectFunctionCall(node: CallExpression, ctx: ScanContext): void",
        "signatureHash": "ec03de96f4de25da5d457ead4f525e0f5a3ac75d6131fba4e35c8043739e87f4",
        "filePath": "/src/analyzers/shared/one-pass-visitor.ts",
        "fileHash": "a3e738d9114f8146ab99389bb7345be9",
        "startLine": 255,
        "endLine": 272,
        "startColumn": 2,
        "endColumn": 585,
        "astHash": "7f3954f2c74dc750",
        "contextPath": [
          "OnePassASTVisitor"
        ],
        "functionType": "method",
        "modifiers": [
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "private collectFunctionCall(node: CallExpression, ctx: ScanContext): void {\n    const func = this.findContainingFunction(node);\n    if (!func) return;\n    \n    const funcId = this.getFunctionId(func, ctx);\n    const calleeText = node.getExpression().getText();\n    const args = node.getArguments().map(arg => arg.getText());\n    \n    if (!ctx.usageData.functionCalls.has(funcId)) {\n      ctx.usageData.functionCalls.set(funcId, []);\n    }\n    \n    ctx.usageData.functionCalls.get(funcId)!.push({\n      callee: calleeText,\n      args,\n      line: node.getStartLineNumber()\n    });\n  }",
        "sourceFileRefId": "58489f52-f9a0-4d2a-94b8-0bdfed6aa1bc",
        "parameters": [
          {
            "name": "node",
            "type": "CallExpression",
            "typeSimple": "CallExpression",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "ctx",
            "type": "ScanContext",
            "typeSimple": "ScanContext",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 20,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 478.97,
          "halsteadDifficulty": 2.35,
          "maintainabilityIndex": 60.72
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "166bb0df-0fe9-5b0b-a9fd-0f9c2e5c454a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3039bf28e9bcc8fc17bb9274b41b98ba8ff19fe40dbad83e44695ac3780eb7c3",
        "contentId": "b8013e7a77ab0c403cfd020c9524dbb740376b71ccf0b88a824527650dec120a",
        "name": "parseNumericCondition",
        "displayName": "parseNumericCondition",
        "signature": "parseNumericCondition(condition: string): {\n  operator: '=' | '!=' | '>' | '>=' | '<' | '<=' | 'BETWEEN' | 'IN';\n  value: number | number[];\n} | null",
        "signatureHash": "9394c78a55b65b5d33c314710c5357f158afbaccb57be4f37fd9aa59c49ec3f0",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 257,
        "endLine": 277,
        "startColumn": 0,
        "endColumn": 626,
        "astHash": "0efee5979851748d",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Parse numeric condition string (e.g., \">5\", \"3..10\", \"1,2,3\")\n */\nexport function parseNumericCondition(condition: string): {\n  operator: '=' | '!=' | '>' | '>=' | '<' | '<=' | 'BETWEEN' | 'IN';\n  value: number | number[];\n} | null {\n  condition = condition.trim();\n\n  // Range: \"5..10\"\n  const rangeResult = parseRangeCondition(condition);\n  if (rangeResult) return rangeResult;\n\n  // Multiple values: \"1,2,3\"\n  const inResult = parseInCondition(condition);\n  if (inResult) return inResult;\n\n  // Comparison operators\n  const comparisonResult = parseComparisonCondition(condition);\n  if (comparisonResult) return comparisonResult;\n\n  // Exact match\n  return parseExactCondition(condition);\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "condition",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 26,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 4,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 1.86,
          "halsteadVolume": 201.74,
          "halsteadDifficulty": 2.64,
          "maintainabilityIndex": 70.32
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "26766eac-e36c-56f0-b261-706b35a32f88",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e8b8166372410799345c2f885b6c259818f692819915f5335f16aa20eb54f943",
        "contentId": "4dcfdf8c581ecaeb686ac3d882add3108ecad6738f96a786a7a1d7ac71c52fe7",
        "name": "merge",
        "displayName": "StreamingStats.merge",
        "signature": "public StreamingStats.merge(other: StreamingStats): void",
        "signatureHash": "902488dd70bc4966cb72d8dabc975842339bd9e276e45de8c2a22f7c042faeeb",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 258,
        "endLine": 289,
        "startColumn": 2,
        "endColumn": 1049,
        "astHash": "e3cdf37c42863e88",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Merge another StreamingStats instance into this one\n   *\n   * @param other The other StreamingStats instance to merge\n   */\n  merge(other: StreamingStats): void {\n    if (other.count === 0) return;\n\n    // Ensure configuration compatibility\n    if (this.config.trackVariance !== other.config.trackVariance) {\n      throw new Error('Cannot merge StreamingStats with different trackVariance settings');\n    }\n\n    if (this.count === 0) {\n      this.count = other.count;\n      this.mean = other.mean;\n      this.m2 = other.m2;\n      this.minValue = other.minValue;\n      this.maxValue = other.maxValue;\n      return;\n    }\n\n    // Merge using parallel algorithm\n    const newCount = this.count + other.count;\n    const delta = other.mean - this.mean;\n    const newMean = (this.count * this.mean + other.count * other.mean) / newCount;\n\n    if (this.config.trackVariance) {\n      const newM2 = this.m2 + other.m2 + (delta * delta * this.count * other.count) / newCount;\n      this.m2 = newM2;\n    }\n\n    this.count = newCount;\n    this.mean = newMean;\n    this.minValue = Math.min(this.minValue, other.minValue);\n    this.maxValue = Math.max(this.maxValue, other.maxValue);\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "other",
            "type": "StreamingStats",
            "typeSimple": "StreamingStats",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 25,
          "totalLines": 39,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 4,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 3.57,
          "halsteadVolume": 723.31,
          "halsteadDifficulty": 15.95,
          "maintainabilityIndex": 45.23
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9f4941f8-4973-5904-ad0c-0dc8c6518f46",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "32e04a8b82147c3b0f001a51c22d1b54aeac94ede3570e8ae2d64222477d144a",
        "contentId": "2585e0082012505f1c2962b1922c93765d66cfad56d6482ed1f8e1c97129f6e8",
        "name": "isFileSupported",
        "displayName": "FunctionAnalyzer.isFileSupported",
        "signature": "public FunctionAnalyzer.isFileSupported(filePath: string): boolean",
        "signatureHash": "5e878482dd26bb4280cbba96d154655cfb7e1a75737f7778aa27041263b2ec5b",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 259,
        "endLine": 261,
        "startColumn": 2,
        "endColumn": 105,
        "astHash": "9e1b200f6aae7634",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if a file is supported for analysis\n   */\n  isFileSupported(filePath: string): boolean {\n    return this.getAnalyzerForFile(filePath) !== null;\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 22.46,
          "halsteadDifficulty": 1.88,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b2cda9e8-d717-5d3d-a7b9-a9d92e4fcb8a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "1ec7c25fda48abacfcb0bc732a0a775f1663b6449741d980d4bc2fc4d608ec39",
        "contentId": "07f2cc788d7911a4a0efdac9830bac91a3ddc39c292a5d2ac4943fa0c988f2c6",
        "name": "getCochangeFrequency",
        "displayName": "GitCochangeProvider.getCochangeFrequency",
        "signature": "public async GitCochangeProvider.getCochangeFrequency(fileA: string, fileB: string, options: GitCochangeOptions): Promise<number>",
        "signatureHash": "9d5b6bf32d823df3502c16ee31f96d61206bd70abbabb4433398573c5c537b01",
        "filePath": "/src/analyzers/type-insights/git-cochange-provider.ts",
        "fileHash": "7af758c57709f5b11305695e6fa52504",
        "startLine": 262,
        "endLine": 290,
        "startColumn": 2,
        "endColumn": 883,
        "astHash": "b7e746c87ee10e9b",
        "contextPath": [
          "GitCochangeProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get co-change frequency between two files over time\n   */\n  async getCochangeFrequency(\n    fileA: string, \n    fileB: string, \n    options: GitCochangeOptions\n  ): Promise<number> {\n    try {\n      const commits = await this.getCommitHistory(options);\n      let cochangeCount = 0;\n\n      for (const commit of commits) {\n        const a = this.normalizeFilePath(fileA);\n        const b = this.normalizeFilePath(fileB);\n        const files = new Set(commit.changedFiles.map(f => this.normalizeFilePath(f)));\n        const hasFileA = files.has(a);\n        const hasFileB = files.has(b);\n\n        if (hasFileA && hasFileB) {\n          cochangeCount++;\n        }\n      }\n\n      return cochangeCount;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to calculate co-change frequency: ${error.message}`);\n      }\n      throw new Error(`Failed to calculate co-change frequency: ${String(error)}`);\n    }\n  }",
        "sourceFileRefId": "12866a76-6d42-49ab-8f8b-2d7fd8fcb1a0",
        "parameters": [
          {
            "name": "fileA",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "fileB",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "GitCochangeOptions",
            "typeSimple": "GitCochangeOptions",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 26,
          "totalLines": 34,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 3,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 8.67,
          "halsteadVolume": 389.83,
          "halsteadDifficulty": 4.67,
          "maintainabilityIndex": 48.72
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1ec77a07-c1a0-5132-8fef-0a3bfd1b732e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8f6bbc55916e2bcc8a2658e2ff61c50503d604863bb12395675fe2a36e9d1bcc",
        "contentId": "57582fb1a9c1667b725af6863fd870ba17792f70109843d45a627980cdf9a1ad",
        "name": "getCurrentMemoryUsage",
        "displayName": "SystemResourceManager.getCurrentMemoryUsage",
        "signature": "public SystemResourceManager.getCurrentMemoryUsage(): {\n    usedMemoryGB: number;\n    usedMemoryPercent: number;\n    recommendation: 'optimal' | 'warning' | 'critical';\n  }",
        "signatureHash": "56fd8cd46b3383a62d521a51d125b6ec177dc867eaa209dabf532a905e041d37",
        "filePath": "/src/utils/system-resource-manager.ts",
        "fileHash": "d8fea8b960d9f5f64c727085ce354eb1",
        "startLine": 263,
        "endLine": 286,
        "startColumn": 2,
        "endColumn": 714,
        "astHash": "44af19a57717d865",
        "contextPath": [
          "SystemResourceManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Monitor current memory usage and return recommendations\n   */\n  getCurrentMemoryUsage(): {\n    usedMemoryGB: number;\n    usedMemoryPercent: number;\n    recommendation: 'optimal' | 'warning' | 'critical';\n  } {\n    const resources = this.detectSystemResources();\n    const usedMemoryGB = resources.totalMemoryGB - resources.availableMemoryGB;\n    const usedMemoryPercent = (usedMemoryGB / resources.totalMemoryGB) * 100;\n    \n    let recommendation: 'optimal' | 'warning' | 'critical';\n    if (usedMemoryPercent < 70) {\n      recommendation = 'optimal';\n    } else if (usedMemoryPercent < 85) {\n      recommendation = 'warning';\n    } else {\n      recommendation = 'critical';\n    }\n    \n    return {\n      usedMemoryGB,\n      usedMemoryPercent,\n      recommendation\n    };\n  }",
        "sourceFileRefId": "db705e38-b87d-4442-a343-77c8db740bf8",
        "parameters": [],
        "metrics": {
          "linesOfCode": 22,
          "totalLines": 29,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 7.33,
          "halsteadVolume": 222.97,
          "halsteadDifficulty": 8.63,
          "maintainabilityIndex": 57.5
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fd9919d5-ccb1-5c2c-9d2c-1d5f2374e48b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8c7e06315af9f5584c99b7b3861c7c0202b25d1b0336a2659f99a44b5f950631",
        "contentId": "006ce45a97269bde359b3b280c9317f7e0910a1fec4042afb9fc7c508ab0e92e",
        "name": "simulateDelay",
        "displayName": "MockGitProvider.simulateDelay",
        "signature": "public MockGitProvider.simulateDelay(method: keyof GitProvider, delayMs: number): void",
        "signatureHash": "ecd063bd05d6476333d40b48c29e14f65be532eb38ce44a429d38b1a9061f698",
        "filePath": "/src/utils/git/mock-git-provider.ts",
        "fileHash": "5ec98b4f67493090f9a3804e332283d9",
        "startLine": 265,
        "endLine": 277,
        "startColumn": 2,
        "endColumn": 522,
        "astHash": "9cfce11aa9460e8b",
        "contextPath": [
          "MockGitProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * „É¨„Çπ„Éù„É≥„ÇπÈÅÖÂª∂„Çí„Ç∑„Éü„É•„É¨„Éº„Éà\n   */\n  simulateDelay(method: keyof GitProvider, delayMs: number): void {\n    const originalMethod = this[method];\n    \n    (this as Record<string, unknown>)[method] = async (...args: unknown[]) => {\n      await new Promise(resolve => setTimeout(resolve, delayMs));\n      return (originalMethod as (...args: unknown[]) => unknown).apply(this, args);\n    };\n\n    // ÂÖÉ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíÂæ©ÂÖÉ„Åô„Çã„Åü„ÇÅ„ÅÆ„Éò„É´„Éë„Éº\n    (this as Record<string, unknown>)[`restore${method}`] = () => {\n      (this as Record<string, unknown>)[method] = originalMethod;\n    };\n  }",
        "sourceFileRefId": "cab1f986-fe3d-49c2-a429-9f8e1fb6abbf",
        "parameters": [
          {
            "name": "method",
            "type": "keyof GitProvider",
            "typeSimple": "keyof GitProvider",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "delayMs",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 18,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2.5,
          "halsteadVolume": 140,
          "halsteadDifficulty": 4.17,
          "maintainabilityIndex": 79.88
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "44f15934-368b-5c9e-ab8e-5595c1c9335d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b4ec458ecd5b29d36978cb975f042a4c572e4e78c8a2b2d4d1a8411c7a6c5fd5",
        "contentId": "b535863fdfa182f74be3fe78a16defbca7fcc38595a489a965efc683a7154d84",
        "name": "getSupportedExtensions",
        "displayName": "FunctionAnalyzer.getSupportedExtensions",
        "signature": "public FunctionAnalyzer.getSupportedExtensions(): string[]",
        "signatureHash": "04bde1bf41895e8590c351f993d83b954c275fa40e8d56e0554466e4beaf233a",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 266,
        "endLine": 268,
        "startColumn": 2,
        "endColumn": 85,
        "astHash": "aa6fe482e441c55c",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get supported file extensions\n   */\n  getSupportedExtensions(): string[] {\n    return ['.ts', '.tsx', '.js', '.jsx'];\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 11.61,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "93f6dcbb-bade-550f-9243-79ff0ac48ea5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5bbca8954f3a5414b20b9137b2dff0e62ff62b3e0c890a1d01b1558c175a6f5c",
        "contentId": "c1c43dc95475d5eb236dbb5ff4bb13ff294366dd11fd76bc46bbeadb375e8a66",
        "name": "getGraphStatistics",
        "displayName": "StructuralAnalyzer.getGraphStatistics",
        "signature": "public StructuralAnalyzer.getGraphStatistics(): {\n    nodeCount: number;\n    edgeCount: number;\n    density: number;\n    averageClustering: number;\n    averagePathLength: number;\n    centralityDistribution: {\n      betweenness: { mean: number; std: number };\n      closeness: { mean: number; std: number };\n      pageRank: { mean: number; std: number };\n    };\n  }",
        "signatureHash": "a07faa7292369022805ccd327ff4eb708ca1ca6bbc0586d7e41ca5e1d71279ab",
        "filePath": "/src/utils/structural-analyzer.ts",
        "fileHash": "6d6375bfd3edefb744a0e7e170926ee6",
        "startLine": 266,
        "endLine": 306,
        "startColumn": 2,
        "endColumn": 1461,
        "astHash": "f07fb356afda8a5e",
        "contextPath": [
          "StructuralAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get summary statistics for the entire graph\n   */\n  getGraphStatistics(): {\n    nodeCount: number;\n    edgeCount: number;\n    density: number;\n    averageClustering: number;\n    averagePathLength: number;\n    centralityDistribution: {\n      betweenness: { mean: number; std: number };\n      closeness: { mean: number; std: number };\n      pageRank: { mean: number; std: number };\n    };\n  } {\n    const nodeCount = this.nodes.size;\n    const edgeCount = this.edges.length;\n    const density = nodeCount > 1 ? edgeCount / (nodeCount * (nodeCount - 1)) : 0;\n\n    // Calculate average clustering\n    let totalClustering = 0;\n    for (const nodeId of this.nodes.keys()) {\n      totalClustering += this.calculateClustering(nodeId);\n    }\n    const averageClustering = nodeCount > 0 ? totalClustering / nodeCount : 0;\n\n    // Calculate centrality statistics\n    const betweennessValues = Array.from(this.nodes.values()).map(n => n.betweenness);\n    const closenessValues = Array.from(this.nodes.values()).map(n => n.closeness);\n    const pageRankValues = Array.from(this.nodes.values()).map(n => n.pageRank);\n\n    return {\n      nodeCount,\n      edgeCount,\n      density,\n      averageClustering,\n      averagePathLength: this.calculateAveragePathLength(),\n      centralityDistribution: {\n        betweenness: this.calculateDistributionStats(betweennessValues),\n        closeness: this.calculateDistributionStats(closenessValues),\n        pageRank: this.calculateDistributionStats(pageRankValues),\n      },\n    };\n  }",
        "sourceFileRefId": "a0f4e9d4-bf70-4066-a23e-1d55f3d1d553",
        "parameters": [],
        "metrics": {
          "linesOfCode": 36,
          "totalLines": 46,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 5,
          "codeToCommentRatio": 7.2,
          "halsteadVolume": 828.53,
          "halsteadDifficulty": 9.15,
          "maintainabilityIndex": 35.92
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cff7ca10-1fe4-5d5e-a421-40d6ad8c8b86",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "646e39b964b58d7ac8c1c5ecb1b103354f3f4b59928bacf70aa7232a0920d77d",
        "contentId": "9d54539d9bcf888185bb300c3d2e7741519b772de1721e657bdaa222394b85d2",
        "name": "shouldConsiderForDeletion",
        "displayName": "DeadCodeAnalyzer.shouldConsiderForDeletion",
        "signature": "protected DeadCodeAnalyzer.shouldConsiderForDeletion(func: FunctionInfo, options: DeadCodeAnalysisOptions): boolean",
        "signatureHash": "96b05ac3112c8931e386b078a1ba46124ce7d5ddc98c581581056e7fb1463558",
        "filePath": "/src/analyzers/dead-code-analyzer.ts",
        "fileHash": "505419c2c91a952dc73f8984e033e5d4",
        "startLine": 269,
        "endLine": 302,
        "startColumn": 2,
        "endColumn": 910,
        "astHash": "3af61e4ec53b28ab",
        "contextPath": [
          "DeadCodeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "protected"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if a function should be considered for deletion\n   * This method can be overridden by subclasses for specific deletion criteria\n   */\n  protected shouldConsiderForDeletion(\n    func: FunctionInfo,\n    options: DeadCodeAnalysisOptions\n  ): boolean {\n    // Base implementation applies common filters\n    const metadata = FunctionClassifier.getMetadata(func);\n\n    // Export „ÅØ„Éá„Éï„Ç©„É´„Éà„ÅßÈô§Â§ñ„ÄÇincludeExports=true „ÅßÊòéÁ§∫ÁöÑ„Å´Âê´„ÇÅ„Çã\n    if (metadata.isExported && !options.includeExports) {\n      return false;\n    }\n\n    // Exclude test functions if requested\n    if (options.excludeTests && metadata.isTest) {\n      return false;\n    }\n\n    // Exclude static methods unless explicitly included\n    if (!options.includeStaticMethods && metadata.isStaticMethod) {\n      return false;\n    }\n\n    // Exclude handlers if requested\n    if (options.excludeHandlers && metadata.isHandler) {\n      return false;\n    }\n\n    // Exclude constructors if requested\n    if (options.excludeConstructors && metadata.isConstructor) {\n      return false;\n    }\n\n    return true;\n  }",
        "sourceFileRefId": "974d2de6-e87b-472e-bfa8-9d184761e200",
        "parameters": [
          {
            "name": "func",
            "type": "FunctionInfo",
            "typeSimple": "FunctionInfo",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "DeadCodeAnalysisOptions",
            "typeSimple": "DeadCodeAnalysisOptions",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 22,
          "totalLines": 40,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 11,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 6,
          "branchCount": 5,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 10,
          "codeToCommentRatio": 2.2,
          "halsteadVolume": 221.65,
          "halsteadDifficulty": 3.16,
          "maintainabilityIndex": 55.71
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "eca26ada-6ad1-5737-bb12-5f1c0bd80ffd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "92987c6a11c00014616c5c31c6eafd164c06f3e7e8d089e784996a3f2a4a667e",
        "contentId": "824be17ee7e527cdae0ab9ced5ebbee502777db66997750526fb126c6315e405",
        "name": "calculateProjectScore",
        "displayName": "QualityScorer.calculateProjectScore",
        "signature": "public QualityScorer.calculateProjectScore(functions: FunctionInfo[]): ProjectQualityScore",
        "signatureHash": "1a17ba7a2cd3a7a1a24eec38153e9d4a531deb1d3f898a37524c22f220b08c2b",
        "filePath": "/src/utils/quality-scorer.ts",
        "fileHash": "ace79fcfaef5b23f03b0a388387c3265",
        "startLine": 271,
        "endLine": 330,
        "startColumn": 2,
        "endColumn": 2166,
        "astHash": "e2b2a7a883a0730e",
        "contextPath": [
          "QualityScorer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "calculateProjectScore(functions: FunctionInfo[]): ProjectQualityScore {\n    if (functions.length === 0) {\n      return {\n        overallGrade: 'A',\n        score: 100,\n        complexityScore: 100,\n        maintainabilityScore: 100,\n        sizeScore: 100,\n        codeQualityScore: 100,\n        totalFunctions: 0,\n        highRiskFunctions: 0,\n        topProblematicFunctions: [],\n      };\n    }\n\n    const scores = {\n      complexity: this.calculateComplexityScore(functions),\n      maintainability: this.calculateMaintainabilityScore(functions),\n      size: this.calculateSizeScore(functions),\n      codeQuality: this.calculateCodeQualityScore(functions),\n    };\n\n    // Configurable weighted average with boundary protection\n    const weights = this.getQualityWeights();\n    \n    // Validate all scores are within expected bounds\n    const scoreEntries = Object.entries(scores);\n    for (const [key, score] of scoreEntries) {\n      if (!Number.isFinite(score) || score < 0 || score > 100) {\n        console.warn(`Invalid ${key} score: ${score}. Clamping to valid range.`);\n        scores[key as keyof typeof scores] = Math.max(0, Math.min(100, score || 0));\n      }\n    }\n    \n    const weightedSum = \n      scores.complexity * weights.complexity +\n      scores.maintainability * weights.maintainability +\n      scores.size * weights.size +\n      scores.codeQuality * weights.codeQuality;\n    \n    // Ensure final score is within bounds and properly rounded\n    const overallScore = Math.round(Math.max(0, Math.min(100, weightedSum)));\n\n    const overallGrade = this.scoreToGrade(overallScore);\n    const highRiskFunctions = this.countHighRiskFunctions(functions);\n    const topProblematicFunctions = this.getTopProblematicFunctions(functions);\n\n    return {\n      overallGrade,\n      score: overallScore,\n      complexityScore: scores.complexity,\n      maintainabilityScore: scores.maintainability,\n      sizeScore: scores.size,\n      codeQualityScore: scores.codeQuality,\n      totalFunctions: functions.length,\n      highRiskFunctions,\n      topProblematicFunctions,\n      weights: this.getQualityWeights(), // Include weights used in calculation\n    };\n  }",
        "sourceFileRefId": "8c1af3a0-de1e-4fa1-a1a3-f2332638929c",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 50,
          "totalLines": 62,
          "cyclomaticComplexity": 7,
          "cognitiveComplexity": 7,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 16.67,
          "halsteadVolume": 1268.76,
          "halsteadDifficulty": 13.33,
          "maintainabilityIndex": 24.35
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "952d7c89-4745-5ba2-a71d-faee0f082322",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7cd26aae95138ec5688d222c004466aea03e4471345a5fdd8765e2efafebf332",
        "contentId": "4df6ccc069087a0059da3940e6fb804bac1cfe47b2731a75efcfb1da4e7e085e",
        "name": "generateExecutionTrace",
        "displayName": "RuntimeTraceIntegrator.generateExecutionTrace",
        "signature": "public RuntimeTraceIntegrator.generateExecutionTrace(callerFunctionId: string, calleeFunctionId: string, callerDepth?: number, calleeDepth?: number): void",
        "signatureHash": "fb0035c952370c69ce2fe6b486884d326df5c38b87bf8c6dfa1d15622be7d8f0",
        "filePath": "/src/analyzers/runtime-trace-integrator.ts",
        "fileHash": "c394dab5dbdc120b943182efb7ab5c0e",
        "startLine": 273,
        "endLine": 307,
        "startColumn": 2,
        "endColumn": 1284,
        "astHash": "3ce46d966f0d8f56",
        "contextPath": [
          "RuntimeTraceIntegrator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate execution trace for future use with optional depth information\n   */\n  generateExecutionTrace(\n    callerFunctionId: string, \n    calleeFunctionId: string,\n    callerDepth?: number,\n    calleeDepth?: number\n  ): void {\n    const traceKey = `${callerFunctionId}->${calleeFunctionId}`;\n    const existingTrace = this.executionTraceIndex.get(traceKey);\n    \n    if (existingTrace) {\n      existingTrace.count++;\n      existingTrace.lastSeen = new Date().toISOString();\n      \n      // Update depth information if provided\n      if (callerDepth !== undefined && calleeDepth !== undefined) {\n        existingTrace.callerDepth = callerDepth;\n        existingTrace.calleeDepth = calleeDepth;\n        existingTrace.directionVerified = callerDepth < calleeDepth;\n      }\n    } else {\n      const newTrace: ExecutionTrace = {\n        caller: callerFunctionId,\n        callee: calleeFunctionId,\n        count: 1,\n        firstSeen: new Date().toISOString(),\n        lastSeen: new Date().toISOString(),\n        ...(callerDepth !== undefined && { callerDepth }),\n        ...(calleeDepth !== undefined && { calleeDepth }),\n        ...(callerDepth !== undefined && calleeDepth !== undefined && { directionVerified: callerDepth < calleeDepth })\n      };\n      \n      this.executionTraces.push(newTrace);\n      this.executionTraceIndex.set(traceKey, newTrace);\n    }\n  }",
        "sourceFileRefId": "9ac702b1-4937-421b-83d1-9c50652a401a",
        "parameters": [
          {
            "name": "callerFunctionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "calleeFunctionId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "callerDepth",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "calleeDepth",
            "type": "number",
            "typeSimple": "number",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 31,
          "totalLines": 40,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 2,
          "parameterCount": 4,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 7.75,
          "halsteadVolume": 569.35,
          "halsteadDifficulty": 9.13,
          "maintainabilityIndex": 41.31
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9db63654-5c1c-5b04-9dda-86c3454710a8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2a28bac11c51f91f6fdf925a0f404a4013b784111a7f362c6581fa6f1353ddb1",
        "contentId": "3482c4aeaece2a94fe523d2cbae85c03cbd0b911191df878172d777ff9161ae6",
        "name": "analyzeContent",
        "displayName": "TypeScriptAnalyzer.analyzeContent",
        "signature": "public async TypeScriptAnalyzer.analyzeContent(content: string, virtualPath: string, snapshotId?: string, env?: import('../types/environment').CommandEnvironment): Promise<FunctionInfo[]>",
        "signatureHash": "d735b0ac384aacd6ca58f0c65de4ec16444a8ac8b79295490e1f90db993c1f67",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 273,
        "endLine": 353,
        "startColumn": 2,
        "endColumn": 3523,
        "astHash": "8ebe53958efc8eaf",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze TypeScript content from string instead of file\n   * Used for analyzing stored file content with shared virtual project\n   */\n  async analyzeContent(content: string, virtualPath: string, snapshotId?: string, env?: import('../types/environment').CommandEnvironment): Promise<FunctionInfo[]> {\n    const functions: FunctionInfo[] = [];\n    \n    try {\n      // Use shared project if available for this snapshot, otherwise use default project\n      let targetProject = this.project;\n      let isUsingSharedProject = false;\n      \n      if (snapshotId) {\n        // CRITICAL FIX: For single file analysis, prioritize cache lookup without creating new project\n        if (env?.projectManager) {\n          const cachedProject = env.projectManager.getCachedProject(snapshotId);\n          if (cachedProject) {\n            targetProject = cachedProject;\n            isUsingSharedProject = true;\n          } else {\n            this.logger.warn(`No cached shared project for snapshot ${snapshotId}. Falling back to local project.`);\n          }\n        } else {\n          this.logger.warn(`Project manager not available in env. Falling back to local project.`);\n        }\n      }\n      \n      // Normalize once and use as the single key for the virtual file\n      const unifiedPath = toUnifiedProjectPath(virtualPath);\n      // Prefer reusing existing SourceFile when using shared project to avoid reparsing\n      let sourceFile = targetProject.getSourceFile(unifiedPath);\n      if (!sourceFile) {\n        sourceFile = targetProject.createSourceFile(unifiedPath, content, { overwrite: true });\n      } else if (isUsingSharedProject && sourceFile.getFullText() !== content) {\n        // Keep AST identity but refresh text when content differs\n        sourceFile.replaceWithText(content);\n      }\n      // Use unified path consistently downstream\n      const relativePath = unifiedPath;\n      const fileHash = this.calculateFileHash(content);\n      \n      // Extract all function types\n      for (const func of sourceFile.getDescendantsOfKind(SyntaxKind.FunctionDeclaration)) {\n        const info = await this.extractFunctionInfo(func, relativePath, fileHash, sourceFile, snapshotId || 'unknown');\n        if (info) functions.push(info);\n      }\n      \n      for (const method of sourceFile.getDescendantsOfKind(SyntaxKind.MethodDeclaration)) {\n        const info = await this.extractMethodInfo(method, relativePath, fileHash, sourceFile, snapshotId || 'unknown');\n        if (info) functions.push(info);\n      }\n      \n      for (const classDecl of sourceFile.getClasses()) {\n        for (const constructor of classDecl.getConstructors()) {\n          const info = await this.extractConstructorInfo(\n            constructor,\n            relativePath,\n            fileHash,\n            sourceFile,\n            snapshotId || 'unknown'\n          );\n          if (info) functions.push(info);\n        }\n      }\n      \n      // Arrow functions and function expressions\n      const variableFunctions = await this.extractVariableFunctions(sourceFile, relativePath, fileHash, content, snapshotId || 'unknown');\n      for (const info of variableFunctions) {\n        functions.push(info);\n      }\n      \n      // CRITICAL FIX: Only clean up if not using shared project\n      // Shared projects should preserve files for reuse across analyses\n      if (!isUsingSharedProject) {\n        targetProject.removeSourceFile(sourceFile);\n        this.manageMemory();\n      }\n      \n      return functions;\n    } catch (error) {\n      throw new Error(\n        `Failed to analyze content for ${virtualPath}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [
          {
            "name": "content",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "virtualPath",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 2,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "env",
            "type": "import('../types/environment').CommandEnvironment",
            "typeSimple": "import('../types/environment').CommandEnvironment",
            "position": 3,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 62,
          "totalLines": 88,
          "cyclomaticComplexity": 22,
          "cognitiveComplexity": 22,
          "maxNestingLevel": 4,
          "parameterCount": 4,
          "returnStatementCount": 1,
          "branchCount": 10,
          "loopCount": 5,
          "tryCatchCount": 1,
          "asyncAwaitCount": 4,
          "callbackCount": 0,
          "commentLines": 14,
          "codeToCommentRatio": 4.43,
          "halsteadVolume": 1437.26,
          "halsteadDifficulty": 9.13,
          "maintainabilityIndex": 14.94
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7c2fabf4-73ba-5e16-a1ea-ffdd4984b9bd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f0a264b021d278ec3853fded16749f56b41943a04517a52e46eb8221931cf265",
        "contentId": "15770a4e96c4b1e870f9fb13f16096bf46104f443cbea02040c79ce6611f5e65",
        "name": "validateFunction",
        "displayName": "FunctionAnalyzer.validateFunction",
        "signature": "public FunctionAnalyzer.validateFunction(func: FunctionInfo): string[]",
        "signatureHash": "65aa912bb3ad979502939a8a081a2758909fa3604c2b45914c81b06b89c88f8b",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 273,
        "endLine": 330,
        "startColumn": 2,
        "endColumn": 1472,
        "astHash": "a904e639d6b797d4",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Validate function data consistency\n   */\n  validateFunction(func: FunctionInfo): string[] {\n    const issues: string[] = [];\n\n    // Basic validation\n    if (!func.name || func.name.trim() === '') {\n      issues.push('Function name is missing or empty');\n    }\n\n    if (!func.filePath) {\n      issues.push('File path is missing');\n    }\n\n    if (func.startLine <= 0) {\n      issues.push('Invalid start line number');\n    }\n\n    if (func.endLine < func.startLine) {\n      issues.push('End line is before start line');\n    }\n\n    if (!func.signature) {\n      issues.push('Function signature is missing');\n    }\n\n    if (!func.astHash) {\n      issues.push('AST hash is missing');\n    }\n\n    // Parameter validation\n    if (func.parameters) {\n      func.parameters.forEach((param, index) => {\n        if (!param.name) {\n          issues.push(`Parameter at position ${index} has no name`);\n        }\n\n        if (param.position !== index) {\n          issues.push(`Parameter position mismatch at index ${index}`);\n        }\n      });\n    }\n\n    // Metrics validation\n    if (func.metrics) {\n      if (func.metrics.cyclomaticComplexity < 1) {\n        issues.push('Cyclomatic complexity cannot be less than 1');\n      }\n\n      if (func.metrics.linesOfCode < 0) {\n        issues.push('Lines of code cannot be negative');\n      }\n\n      if (func.metrics.parameterCount !== func.parameters.length) {\n        issues.push('Parameter count mismatch between metrics and actual parameters');\n      }\n    }\n\n    return issues;\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [
          {
            "name": "func",
            "type": "FunctionInfo",
            "typeSimple": "FunctionInfo",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 43,
          "totalLines": 63,
          "cyclomaticComplexity": 15,
          "cognitiveComplexity": 15,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 13,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 6,
          "codeToCommentRatio": 7.17,
          "halsteadVolume": 867.71,
          "halsteadDifficulty": 10.59,
          "maintainabilityIndex": 28.89
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d1d1191e-010c-5a37-802a-c2a1492d592f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2aceb46da83ba2a8bdcac3b740978493cf53747f5d9f6d01c613c5da238c2e2b",
        "contentId": "a1783fc6a7e1e30c5abd81e3f45c0fc5a9356eed728dfad71220e13fda8c5f25",
        "name": "collectCouplingData",
        "displayName": "OnePassASTVisitor.collectCouplingData",
        "signature": "private OnePassASTVisitor.collectCouplingData(node: PropertyAccessExpression | Node, ctx: ScanContext): void",
        "signatureHash": "61923f19b5e75c00f1d3c7340b67dd069bab001267ee4d42cba7d7d715d0d498",
        "filePath": "/src/analyzers/shared/one-pass-visitor.ts",
        "fileHash": "a3e738d9114f8146ab99389bb7345be9",
        "startLine": 274,
        "endLine": 321,
        "startColumn": 2,
        "endColumn": 1768,
        "astHash": "77a448b83d99f560",
        "contextPath": [
          "OnePassASTVisitor"
        ],
        "functionType": "method",
        "modifiers": [
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "private collectCouplingData(node: PropertyAccessExpression | Node, ctx: ScanContext): void {\n    const func = this.findContainingFunction(node);\n    if (!func) return;\n    \n    const funcId = this.getFunctionId(func, ctx);\n    const expression = Node.isPropertyAccessExpression(node) ? node.getExpression() : \n                       Node.isElementAccessExpression(node) ? node.getExpression() : null;\n    const propertyName = Node.isPropertyAccessExpression(node) ? node.getName() : \n                        Node.isElementAccessExpression(node) ? this.getElementAccessName(node) : 'unknown';\n    \n    if (!expression || !propertyName || propertyName === 'unknown') return;\n    \n    const paramMap = this.getOrCreateParamTypeMap(func, ctx);\n    \n    // Fixed: Properly extract parameter name from expression\n    let paramName: string | null = null;\n    if (Node.isIdentifier(expression)) {\n      paramName = expression.getText();\n    } else if (Node.isThisExpression(expression)) {\n      paramName = 'this';\n    }\n    \n    // `this` „ÅØ„Éë„É©„É°„Éº„Çø„Éû„ÉÉ„Éó„Å´Â≠òÂú®„Åó„Å™„ÅÑ„Åü„ÇÅÂûãÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶ÁôªÈå≤\n    if (paramName === 'this' && !paramMap.has('this')) {\n      try {\n        const thisType = ctx.checker.getTypeAtLocation(expression);\n        paramMap.set('this', thisType);\n      } catch {\n        return;\n      }\n    }\n    \n    if (!paramName || !paramMap.has(paramName)) {\n      return;\n    }\n    \n    // Store parameter usage for coupling analysis\n    if (!ctx.couplingData.parameterUsage.has(funcId)) {\n      ctx.couplingData.parameterUsage.set(funcId, new Map());\n    }\n    \n    const funcCoupling = ctx.couplingData.parameterUsage.get(funcId)!;\n    if (!funcCoupling.has(paramName)) {\n      funcCoupling.set(paramName, new Set());\n    }\n    \n    funcCoupling.get(paramName)!.add(propertyName);\n  }",
        "sourceFileRefId": "58489f52-f9a0-4d2a-94b8-0bdfed6aa1bc",
        "parameters": [
          {
            "name": "node",
            "type": "PropertyAccessExpression | Node",
            "typeSimple": "PropertyAccessExpression | Node",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "ctx",
            "type": "ScanContext",
            "typeSimple": "ScanContext",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 36,
          "totalLines": 50,
          "cyclomaticComplexity": 18,
          "cognitiveComplexity": 18,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 4,
          "branchCount": 12,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 12,
          "halsteadVolume": 1216.52,
          "halsteadDifficulty": 7.78,
          "maintainabilityIndex": 29.81
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bc456e90-bcb3-5ad9-adde-27fc9f9cfeb8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2d98ef2f50da75c7cbd372b1b8967fbd322623b6dd5f7463a8fd5bbce136cc80",
        "contentId": "1b61de1b0b35a8570d69bb86072121388a56c864bd7d8253fd0574dca4a9f704",
        "name": "cleanupOldBackups",
        "displayName": "BackupManager.cleanupOldBackups",
        "signature": "public async BackupManager.cleanupOldBackups(): Promise<{\n    removed: number;\n    freed: string;\n  }>",
        "signatureHash": "857a75503ad1a18dc2f17529097d528db89417d63e2457df1f3a08d9b90c7e50",
        "filePath": "/src/storage/backup/backup-manager.ts",
        "fileHash": "748a6130e6dd5bb0f1dbd00637b85426",
        "startLine": 282,
        "endLine": 326,
        "startColumn": 2,
        "endColumn": 1249,
        "astHash": "df44d5acb27e61f2",
        "contextPath": [
          "BackupManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clean up old backups according to retention policy\n   */\n  async cleanupOldBackups(): Promise<{\n    removed: number;\n    freed: string;\n  }> {\n    if (!this.backupConfig.retention.autoCleanup) {\n      return { removed: 0, freed: '0 B' };\n    }\n\n    const backups = await this.listBackups();\n    const maxBackups = this.backupConfig.retention.maxBackups;\n    const maxAge = this.parseMaxAge(this.backupConfig.retention.maxAge);\n    \n    let removed = 0;\n    let freedBytes = 0;\n\n    // Remove by count limit\n    if (backups.length > maxBackups) {\n      const toRemove = backups.slice(maxBackups);\n      \n      for (const backup of toRemove) {\n        const size = await this.calculateBackupSize(backup.path);\n        await fs.rm(backup.path, { recursive: true });\n        removed++;\n        freedBytes += size;\n      }\n    }\n\n    // Remove by age limit\n    const now = new Date();\n    for (const backup of backups) {\n      const backupAge = now.getTime() - new Date(backup.manifest.createdAt).getTime();\n      \n      if (backupAge > maxAge) {\n        const size = await this.calculateBackupSize(backup.path);\n        await fs.rm(backup.path, { recursive: true });\n        removed++;\n        freedBytes += size;\n      }\n    }\n\n    return {\n      removed,\n      freed: this.formatBytes(freedBytes),\n    };\n  }",
        "sourceFileRefId": "caf2d76a-686c-4197-8dec-fa3aebeff876",
        "parameters": [],
        "metrics": {
          "linesOfCode": 36,
          "totalLines": 50,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 5,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 7.2,
          "halsteadVolume": 727.65,
          "halsteadDifficulty": 7.61,
          "maintainabilityIndex": 36.43
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0970429e-809d-5236-b021-85d5c1af5ba7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "be2f66aaa2325ea76380bcf91b54869a8049db6087785639407a40233a89a7f2",
        "contentId": "3f785b3b74e037925fa69f263723699f0e8dd01d765e74bd5c646d9bdb26da76",
        "name": "displayBanner",
        "displayName": "displayBanner",
        "signature": "displayBanner(version: string): void",
        "signatureHash": "9dec55fbe1452ebd2fbac48369e90b085e08521eebc667791eeb9737a0836d1a",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 284,
        "endLine": 297,
        "startColumn": 0,
        "endColumn": 523,
        "astHash": "cb19e6168421865d",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Display a banner with version and info\n */\nexport function displayBanner(version: string): void {\n  const banner = `\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     \n‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñÑ‚ñÑ ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     \n‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ñÄ‚ñÄ‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n                                                     \nFunction Quality Control v${version}\n`;\n\n  console.log(chalk.cyan(banner));\n}",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "version",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 19,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4,
          "halsteadVolume": 51.89,
          "halsteadDifficulty": 1.22,
          "maintainabilityIndex": 83.07
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d4ce06c5-14ac-5f69-96fb-080d2092d964",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "32c48c706b09ffd785c7da4849672568e0f7f84f7527c250603182c0556f0886",
        "contentId": "2ee27397e19db3acc20c7797599f985934066d2dc9e3be75f4e1703da9bd4dd4",
        "name": "determineViolationLevel",
        "displayName": "StatisticalEvaluator.determineViolationLevel",
        "signature": "public StatisticalEvaluator.determineViolationLevel(value: number, warningThreshold?: ThresholdValue, errorThreshold?: ThresholdValue, criticalThreshold?: ThresholdValue, statistics?: MetricStatistics): ViolationLevel | null",
        "signatureHash": "7236de3bb76dafc89998ee3e9c5bf971356bf3cc80643727f03c736d6549649f",
        "filePath": "/src/utils/statistical-evaluator.ts",
        "fileHash": "549ef6b986550669bc74d8507dda7866",
        "startLine": 290,
        "endLine": 311,
        "startColumn": 2,
        "endColumn": 516,
        "astHash": "c57d15a3b35924fe",
        "contextPath": [
          "StatisticalEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Determine violation level based on which thresholds are exceeded\n   */\n  determineViolationLevel(\n    value: number,\n    warningThreshold?: ThresholdValue,\n    errorThreshold?: ThresholdValue,\n    criticalThreshold?: ThresholdValue,\n    statistics?: MetricStatistics\n  ): ViolationLevel | null {\n    this.validateStatisticalRequirements(\n      warningThreshold,\n      errorThreshold,\n      criticalThreshold,\n      statistics\n    );\n\n    return this.checkThresholdViolations(\n      value,\n      warningThreshold,\n      errorThreshold,\n      criticalThreshold,\n      statistics\n    );\n  }",
        "sourceFileRefId": "e938a961-f1c2-4ca7-8975-3189b0847384",
        "parameters": [
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "warningThreshold",
            "type": "ThresholdValue",
            "typeSimple": "ThresholdValue",
            "position": 1,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "errorThreshold",
            "type": "ThresholdValue",
            "typeSimple": "ThresholdValue",
            "position": 2,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "criticalThreshold",
            "type": "ThresholdValue",
            "typeSimple": "ThresholdValue",
            "position": 3,
            "isOptional": true,
            "isRest": false
          },
          {
            "name": "statistics",
            "type": "MetricStatistics",
            "typeSimple": "MetricStatistics",
            "position": 4,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 21,
          "totalLines": 27,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 5,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 7,
          "halsteadVolume": 109.39,
          "halsteadDifficulty": 1.85,
          "maintainabilityIndex": 64.39
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5cb8d1ac-e857-5b48-877c-53d919240965",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "41cc36aebcddfdab0695735188479125c3a358a609f8822704cbb5bc4575a8c4",
        "contentId": "aa4cfbc71db17395e184a9b9ae512a8f35e939285e01f3afc199113e50c4adba",
        "name": "generateSchemaSummary",
        "displayName": "SchemaAnalyzer.generateSchemaSummary",
        "signature": "public async SchemaAnalyzer.generateSchemaSummary(): Promise<{\n    hash: string;\n    version: string;\n    tableCount: number;\n    hasCircularDeps: boolean;\n    lastModified: Date;\n  }>",
        "signatureHash": "68f089de66d126c952d00c5d1450c0d1ca9a0c8f340df86fd17e5e6dcc5a0323",
        "filePath": "/src/storage/backup/schema-analyzer.ts",
        "fileHash": "261ace910283f8ff6fdbf401748bed95",
        "startLine": 292,
        "endLine": 316,
        "startColumn": 2,
        "endColumn": 619,
        "astHash": "40639d6a51ba706d",
        "contextPath": [
          "SchemaAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate schema summary for manifest\n   */\n  async generateSchemaSummary(): Promise<{\n    hash: string;\n    version: string;\n    tableCount: number;\n    hasCircularDeps: boolean;\n    lastModified: Date;\n  }> {\n    const analysis = await this.analyzeSchema();\n    \n    let lastModified: Date;\n    try {\n      const stats = await fs.stat(this.schemaPath);\n      lastModified = stats.mtime;\n    } catch {\n      lastModified = new Date();\n    }\n    \n    return {\n      hash: analysis.schemaHash,\n      version: analysis.version,\n      tableCount: analysis.tables.length,\n      hasCircularDeps: analysis.circularDependencies.length > 0,\n      lastModified,\n    };\n  }",
        "sourceFileRefId": "b0abafee-1f3c-4695-bf54-2dc57463c174",
        "parameters": [],
        "metrics": {
          "linesOfCode": 23,
          "totalLines": 30,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 7.67,
          "halsteadVolume": 253.82,
          "halsteadDifficulty": 3.55,
          "maintainabilityIndex": 55.72
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6a8a38ac-3666-587a-bc15-ed272d4fafbf",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f4151b2ad30d488c834758b62aaf75ad240e91a9ab2c6f1a2d0b0ed51c25d744",
        "contentId": "cefcaa9816294f79fc088d1614c08628f21dcc60fb3fe6e10d8d8946064fd726",
        "name": "getSize",
        "displayName": "HashCache.getSize",
        "signature": "public HashCache.getSize(): { entries: number; maxEntries: number }",
        "signatureHash": "33a47f4c27c4bcbe0acd8e1273736f919771a59288b2b05b0a180b91d0213954",
        "filePath": "/src/utils/hash-cache.ts",
        "fileHash": "09cb591e00bf504fc928cda190a25fc7",
        "startLine": 292,
        "endLine": 298,
        "startColumn": 2,
        "endColumn": 178,
        "astHash": "31f6d7a6a22da686",
        "contextPath": [
          "HashCache"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cache size information\n   */\n  getSize(): { entries: number; maxEntries: number } {\n    const stats = this.cache.getStats();\n    return {\n      entries: stats.size,\n      maxEntries: stats.maxSize\n    };\n  }",
        "sourceFileRefId": "af98a9b9-999d-4973-b0bf-32d5d754478d",
        "parameters": [],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 62.27,
          "halsteadDifficulty": 1.44,
          "maintainabilityIndex": 94.3
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2213c444-0615-58f2-976b-318c548524b6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a879c0c67f6b41d5743a6e84c85c7b7f149b9101fa75df26800219b931fdb102",
        "contentId": "36cc7e873c9163aeccebca5d5c02e0b461f8c7191ad196fba802711dcb0e1732",
        "name": "export",
        "displayName": "StreamingStats.export",
        "signature": "public StreamingStats.export(): Record<string, unknown>",
        "signatureHash": "6720ee715daf7e6be099a68e2cd1fe87529dd0ea1548cbc304aa112b42d6b883",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 294,
        "endLine": 303,
        "startColumn": 2,
        "endColumn": 321,
        "astHash": "38e6eba099c70b2d",
        "contextPath": [
          "StreamingStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Export state for serialization\n   */\n  export(): Record<string, unknown> {\n    return {\n      count: this.count,\n      mean: this.mean,\n      m2: this.m2,\n      minValue: this.minValue === Number.POSITIVE_INFINITY ? null : this.minValue,\n      maxValue: this.maxValue === Number.NEGATIVE_INFINITY ? null : this.maxValue,\n      config: this.config,\n    };\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 118.41,
          "halsteadDifficulty": 1.82,
          "maintainabilityIndex": 80.68
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "05411185-0b7f-51d1-97bb-2885ff53f9c8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5eb9b73a8c50b78e5c75bb6a32fa0413abae35c142f4dfa977cf8ab8862333d5",
        "contentId": "b7f691bb6848c5451542cb0e66b95c09370de1253958289983ed5eea0f34b027",
        "name": "validateTypeMethodLinks",
        "displayName": "TypeFunctionLinker.validateTypeMethodLinks",
        "signature": "public TypeFunctionLinker.validateTypeMethodLinks(types: TypeDefinition[], functions: FunctionMetadata[]): ValidationResult[]",
        "signatureHash": "3d6a8dacdeb03c554304b271ff3120c05e3252c65f70b82db13ee3eee44921a1",
        "filePath": "/src/analyzers/type-function-linker.ts",
        "fileHash": "a7102bbbac7a916310c7908bcf7170c8",
        "startLine": 298,
        "endLine": 318,
        "startColumn": 2,
        "endColumn": 717,
        "astHash": "fa4f312a344ad6d1",
        "contextPath": [
          "TypeFunctionLinker"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Validate that type method declarations have corresponding function implementations\n   */\n  validateTypeMethodLinks(types: TypeDefinition[], functions: FunctionMetadata[]): ValidationResult[] {\n    const results: ValidationResult[] = [];\n    const crossRefs = this.linkTypesAndFunctions(types, functions);\n    \n    // Group cross-references by type\n    const refsByType = new Map<string, CrossReference[]>();\n    for (const ref of crossRefs) {\n      if (!refsByType.has(ref.typeId)) {\n        refsByType.set(ref.typeId, []);\n      }\n      refsByType.get(ref.typeId)!.push(ref);\n    }\n    \n    for (const type of types) {\n      const typeRefs = refsByType.get(type.id) || [];\n      const validation = this.validateSingleType(type, typeRefs);\n      results.push(validation);\n    }\n    \n    return results;\n  }",
        "sourceFileRefId": "d8feac5f-6614-4757-9623-b078f52b6d70",
        "parameters": [
          {
            "name": "types",
            "type": "TypeDefinition[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionMetadata[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 26,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4.25,
          "halsteadVolume": 386.65,
          "halsteadDifficulty": 3.6,
          "maintainabilityIndex": 58.94
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3531625c-551e-56bf-9469-899f0e7f50fe",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0a490f8e0d9f4e7b1f7137fac9c576d3dfe81a7b45270393f331555e4669fa78",
        "contentId": "476d510e241b91d92aefff231efa7cd24b2d7c7022f625e15f40398741be55be",
        "name": "getStatus",
        "displayName": "GracefulShutdown.getStatus",
        "signature": "public GracefulShutdown.getStatus(): void",
        "signatureHash": "6430d70feb13be44638d2dc4d3c5f01beb2dfce78ca483d9e8dbc52f95d81bde",
        "filePath": "/src/utils/graceful-shutdown.ts",
        "fileHash": "11a7a9685e56eccff04242557a840f62",
        "startLine": 300,
        "endLine": 307,
        "startColumn": 2,
        "endColumn": 242,
        "astHash": "bd7cb0290e3e1ae9",
        "contextPath": [
          "GracefulShutdown"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get shutdown status for monitoring\n   */\n  getStatus() {\n    return {\n      isShuttingDown: this.isShuttingDown,\n      activeTransactions: this.getTransactionStatus(),\n      cleanupHandlers: this.cleanupHandlers.size,\n      storageConnections: this.storageConnections.size\n    };\n  }",
        "sourceFileRefId": "ccb30b80-4951-451a-9d5f-610e31c2c7b8",
        "parameters": [],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 63.12,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 91.07
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7671edfd-8245-5f80-916c-164de7fefcf8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "aad11297a71265b0e772544507ba951a860f555780cf9c0a0a880a7752ba219f",
        "contentId": "d876862df34243270a84964e3a5218989b751dd14a57bd4d15167ca291bd3c97",
        "name": "isValidDate",
        "displayName": "UtilityOperations.isValidDate",
        "signature": "public UtilityOperations.isValidDate(date: unknown): date is Date",
        "signatureHash": "fbbed064c2156509c6e429094dc785e2985e6c1895ca1812d53caab8decefb13",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 301,
        "endLine": 303,
        "startColumn": 2,
        "endColumn": 109,
        "astHash": "1d65d2d65e23357b",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Check if a value is a valid date\r\n   */\r\n  isValidDate(date: unknown): date is Date {\r\n    return date instanceof Date && !isNaN(date.getTime());\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "date",
            "type": "unknown",
            "typeSimple": "unknown",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 58.81,
          "halsteadDifficulty": 4.58,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "53e7bf2f-e8c7-52f8-bebe-8bec128e9a92",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "43d211eb9c5d060df42b8678f6fe4d0d0ed9f0cfa7260c409a1756d61a9917ec",
        "contentId": "9924481100c95dbe9f176a6412d50abc9fac069015b469bb5185c0dcf12c2df2",
        "name": "getConfigManager",
        "displayName": "CallbackRegistrationAnalysisStage.getConfigManager",
        "signature": "public CallbackRegistrationAnalysisStage.getConfigManager(): CallbackConfigManager",
        "signatureHash": "3eae7b189558985f36da030016c64e09c4558ed9fccb0a76d7fb9f6ed041b88e",
        "filePath": "/src/analyzers/callback-registration/callback-registration-stage.ts",
        "fileHash": "4ee5d8718e40c6daf6a91e8f1b9a47a6",
        "startLine": 302,
        "endLine": 304,
        "startColumn": 2,
        "endColumn": 80,
        "astHash": "eb4f4c4701495257",
        "contextPath": [
          "CallbackRegistrationAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get configuration manager (for testing or external use)\n   */\n  getConfigManager(): CallbackConfigManager {\n    return this.configManager;\n  }",
        "sourceFileRefId": "7c6ab425-e8ef-4125-9d56-a128951d7c79",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f19058c9-a53d-5866-9c8c-caa9d91f9c50",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "06df51c46f2074eb717c4e982efc45d11e14b11fd6093d0b24fe46008284843a",
        "contentId": "9d54a6cbed184f59239a475ed96d76f0bd236b24a3a146a2b619af91efeec87c",
        "name": "formatHelp",
        "displayName": "formatHelp",
        "signature": "formatHelp(sections: {\n    title: string;\n    content: string;\n  }[]): string",
        "signatureHash": "6ae3305aab4ee263871a1714374aba5521357586a9b9ed94c1d538319ad6e7a1",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 302,
        "endLine": 313,
        "startColumn": 0,
        "endColumn": 239,
        "astHash": "da16b096c4643001",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Format command help text\n */\nexport function formatHelp(\n  sections: {\n    title: string;\n    content: string;\n  }[]\n): string {\n  return sections\n    .map(section => {\n      return `${chalk.yellow.bold(section.title)}\\n${section.content}`;\n    })\n    .join('\\n\\n');\n}",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "sections",
            "type": "{\n    title: string;\n    content: string;\n  }[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 17,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 4,
          "halsteadVolume": 112,
          "halsteadDifficulty": 1.36,
          "maintainabilityIndex": 77.3
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5ebcb50f-d2ec-5bb2-bb7a-5a296327f123",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d88e6ebc62768e6e39d8af564897392c56575c3289be9f04ad1ae6c26299966f",
        "contentId": "79f66be48f971735afa75f0f87b3b3b483e049d32f2a8c12bbf5415608949085",
        "name": "getLayerDistribution",
        "displayName": "ArchitectureLayerDetector.getLayerDistribution",
        "signature": "public ArchitectureLayerDetector.getLayerDistribution(functions: FunctionInfo[]): Record<ArchitecturalLayer, number>",
        "signatureHash": "c6b830c1bd2504db9b0328cb0afa9950360d6adb754899cd5fb45b698d54e9c0",
        "filePath": "/src/analyzers/architecture-layer-detector.ts",
        "fileHash": "e9d2cbb4480855fb4a0b7744fb514c9d",
        "startLine": 302,
        "endLine": 318,
        "startColumn": 2,
        "endColumn": 437,
        "astHash": "4fddd3c621e7524f",
        "contextPath": [
          "ArchitectureLayerDetector"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get layer distribution statistics\n   */\n  getLayerDistribution(functions: FunctionInfo[]): Record<ArchitecturalLayer, number> {\n    const distribution: Record<ArchitecturalLayer, number> = {\n      presentation: 0,\n      business: 0,\n      data: 0,\n      utility: 0,\n      infrastructure: 0,\n      unknown: 0\n    };\n    \n    for (const func of functions) {\n      const layer = this.detectLayer(func.filePath);\n      distribution[layer]++;\n    }\n    \n    return distribution;\n  }",
        "sourceFileRefId": "17199480-c4b0-4762-8a40-cd2237dceffd",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 22,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5,
          "halsteadVolume": 156.08,
          "halsteadDifficulty": 3.33,
          "maintainabilityIndex": 69.36
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8cd370c5-cd87-51eb-8dee-4713e19f3244",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f1d7efc43ccaa75cfff61af73fed01c898f0dceeca203e060595773ba667a39b",
        "contentId": "a487aa490d50ba1771df90bf578ed9c01d48809bf07425c76175d96d4d7cc7bb",
        "name": "isGitRepository",
        "displayName": "GitCochangeProvider.isGitRepository",
        "signature": "public async GitCochangeProvider.isGitRepository(): Promise<boolean>",
        "signatureHash": "244df95e1e6b7b8f7b7002d8f0ad88f8291fa5ade361456268ae53c0ab194bcf",
        "filePath": "/src/analyzers/type-insights/git-cochange-provider.ts",
        "fileHash": "7af758c57709f5b11305695e6fa52504",
        "startLine": 307,
        "endLine": 314,
        "startColumn": 2,
        "endColumn": 210,
        "astHash": "f001325923cadaca",
        "contextPath": [
          "GitCochangeProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if the current directory is a Git repository\n   */\n  async isGitRepository(): Promise<boolean> {\n    try {\n      this.runGit(['rev-parse', '--git-dir'], { cwd: this.repositoryRoot, timeout: 5000 });\n      return true;\n    } catch {\n      return false;\n    }\n  }",
        "sourceFileRefId": "12866a76-6d42-49ab-8f8b-2d7fd8fcb1a0",
        "parameters": [],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 2,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 46.6,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 93.12
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3cf71c3e-33a1-52ed-84d1-62537b39cb14",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "dce525859a3c3cb32ef14417a08f30d6398d3ef6911312c1a9e9300a9e2d9bd0",
        "contentId": "50318d07ecadbbfbd84084a969516143187851fcdbc3998a48646d22c73a1f6f",
        "name": "formatDuration",
        "displayName": "UtilityOperations.formatDuration",
        "signature": "public UtilityOperations.formatDuration(ms: number): string",
        "signatureHash": "aa9d3d0d14d34a296f4f3c44e72ce783bf096c76e8fb829ff6cff8d5a70c924a",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 308,
        "endLine": 329,
        "startColumn": 2,
        "endColumn": 604,
        "astHash": "d5a32fd03719583a",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Format duration in milliseconds to human readable format\r\n   */\r\n  formatDuration(ms: number): string {\r\n    if (ms < 1000) {\r\n      return `${ms}ms`;\r\n    }\r\n\r\n    const seconds = Math.floor(ms / 1000);\r\n    if (seconds < 60) {\r\n      return `${seconds}s`;\r\n    }\r\n\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    \r\n    if (minutes < 60) {\r\n      return remainingSeconds > 0 ? `${minutes}m ${remainingSeconds}s` : `${minutes}m`;\r\n    }\r\n\r\n    const hours = Math.floor(minutes / 60);\r\n    const remainingMinutes = minutes % 60;\r\n    \r\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "ms",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 27,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 4,
          "branchCount": 5,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 5.67,
          "halsteadVolume": 254.88,
          "halsteadDifficulty": 10.15,
          "maintainabilityIndex": 61.84
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "75c6aeb7-fec8-567e-8c29-09d418e84da0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ead6261cf61f9299292d22b7a919d8c7dca7325866f01b29e00865e205d20e21",
        "contentId": "9e4f97084f1c660a0623d10e6fc998d1540e2d965fc9db9aac55a03fff85f5df",
        "name": "findByMetricThresholds",
        "displayName": "MetricsOperations.findByMetricThresholds",
        "signature": "public async MetricsOperations.findByMetricThresholds(options: {\r\n    snapshotId?: string;\r\n    minComplexity?: number;\r\n    maxComplexity?: number;\r\n    minLines?: number;\r\n    maxLines?: number;\r\n    minMaintainability?: number;\r\n    maxMaintainability?: number;\r\n  }): Promise<string[]>",
        "signatureHash": "15d3197dd2d2492c6984d4d47698026959c18009e098da55380678840163ca21",
        "filePath": "/src/storage/modules/metrics-operations.ts",
        "fileHash": "2620508de29711f2ef03855848d4fa9a",
        "startLine": 309,
        "endLine": 379,
        "startColumn": 2,
        "endColumn": 2300,
        "astHash": "749dbf38a8f07e44",
        "contextPath": [
          "MetricsOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Find functions by metric thresholds\r\n   */\r\n  async findByMetricThresholds(options: {\r\n    snapshotId?: string;\r\n    minComplexity?: number;\r\n    maxComplexity?: number;\r\n    minLines?: number;\r\n    maxLines?: number;\r\n    minMaintainability?: number;\r\n    maxMaintainability?: number;\r\n  }): Promise<string[]> {\r\n    try {\r\n      const conditions: string[] = [];\r\n      const params: unknown[] = [];\r\n      let paramIndex = 1;\r\n\r\n      if (options.snapshotId) {\r\n        conditions.push(`f.snapshot_id = $${paramIndex++}`);\r\n        params.push(options.snapshotId);\r\n      }\r\n\r\n      if (options.minComplexity !== undefined) {\r\n        conditions.push(`q.cyclomatic_complexity >= $${paramIndex++}`);\r\n        params.push(options.minComplexity);\r\n      }\r\n\r\n      if (options.maxComplexity !== undefined) {\r\n        conditions.push(`q.cyclomatic_complexity <= $${paramIndex++}`);\r\n        params.push(options.maxComplexity);\r\n      }\r\n\r\n      if (options.minLines !== undefined) {\r\n        conditions.push(`q.lines_of_code >= $${paramIndex++}`);\r\n        params.push(options.minLines);\r\n      }\r\n\r\n      if (options.maxLines !== undefined) {\r\n        conditions.push(`q.lines_of_code <= $${paramIndex++}`);\r\n        params.push(options.maxLines);\r\n      }\r\n\r\n      if (options.minMaintainability !== undefined) {\r\n        conditions.push(`q.maintainability_index >= $${paramIndex++}`);\r\n        params.push(options.minMaintainability);\r\n      }\r\n\r\n      if (options.maxMaintainability !== undefined) {\r\n        conditions.push(`q.maintainability_index <= $${paramIndex++}`);\r\n        params.push(options.maxMaintainability);\r\n      }\r\n\r\n      const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\r\n\r\n      const result = await this.db.query(\r\n        `\r\n        SELECT f.id\r\n        FROM functions f\r\n        JOIN quality_metrics q ON f.id = q.function_id\r\n        ${whereClause}\r\n        ORDER BY q.cyclomatic_complexity DESC\r\n        `,\r\n        params\r\n      );\r\n\r\n      return result.rows.map(row => (row as { id: string }).id);\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to find functions by metric thresholds: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "7c8852b8-bf68-4c55-9416-894c208c0f70",
        "parameters": [
          {
            "name": "options",
            "type": "{\r\n    snapshotId?: string;\r\n    minComplexity?: number;\r\n    maxComplexity?: number;\r\n    minLines?: number;\r\n    maxLines?: number;\r\n    minMaintainability?: number;\r\n    maxMaintainability?: number;\r\n  }",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 61,
          "totalLines": 76,
          "cyclomaticComplexity": 12,
          "cognitiveComplexity": 12,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 10,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 20.33,
          "halsteadVolume": 1144.25,
          "halsteadDifficulty": 9.88,
          "maintainabilityIndex": 19.33
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ca679ba3-71bf-55e0-b19b-ae020ca8a265",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0cd3fc144599324405eb38ba5d475960a113d9ac36c9ae894b2b1274c9ccfac1",
        "contentId": "efef82158e9f06df4aa22a404aaa7656bdae3ef6c74780e673b2c94259bb37b8",
        "name": "getAnalyzers",
        "displayName": "CallbackRegistrationAnalysisStage.getAnalyzers",
        "signature": "public CallbackRegistrationAnalysisStage.getAnalyzers(): Map<string, FrameworkCallbackAnalyzer>",
        "signatureHash": "4201bf3d20a6c68fbb3e61d3e573f86fd5151cf108d5fac03928dbf43d55c602",
        "filePath": "/src/analyzers/callback-registration/callback-registration-stage.ts",
        "fileHash": "4ee5d8718e40c6daf6a91e8f1b9a47a6",
        "startLine": 309,
        "endLine": 311,
        "startColumn": 2,
        "endColumn": 89,
        "astHash": "8a1749ba0efd5161",
        "contextPath": [
          "CallbackRegistrationAnalysisStage"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get registered analyzers (for testing or external use)\n   */\n  getAnalyzers(): Map<string, FrameworkCallbackAnalyzer> {\n    return this.analyzers;\n  }",
        "sourceFileRefId": "7c6ab425-e8ef-4125-9d56-a128951d7c79",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 11.61,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "668a14ca-21fe-5310-a9fd-49abcbd9f08a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "06951e6e7b01a20141083f06b25eb2befa264ac7e732a365fdf4e3f80a90a211",
        "contentId": "4f8962f9a6ff4aafbecae8a6d5a40e3de98aacfe330ddf9cfecad30e0a73dec1",
        "name": "getBaseline",
        "displayName": "RealTimeQualityGate.getBaseline",
        "signature": "public RealTimeQualityGate.getBaseline(): ProjectBaseline",
        "signatureHash": "7547b05f193f6c94c2e31c81852e01cade0c9129884f953cdb5f21a60230f550",
        "filePath": "/src/core/realtime-quality-gate.ts",
        "fileHash": "c6a9533f9391983a2614c325322811d2",
        "startLine": 310,
        "endLine": 315,
        "startColumn": 2,
        "endColumn": 129,
        "astHash": "792ae71dfe7d75eb",
        "contextPath": [
          "RealTimeQualityGate"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get current project baseline\n   */\n  getBaseline(): ProjectBaseline {\n    return {\n      ...this.baseline,\n      metrics: new Map(this.baseline.metrics),\n    };\n  }",
        "sourceFileRefId": "91be600e-f05a-4386-a6c7-c250eea441f9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 25.85,
          "halsteadDifficulty": 0.7,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c6eb2066-cfd0-59e8-a381-18088c856f64",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "eea7850ef055f06f329f2a71125c20f8f8bad2501dcf65e49d422eca891dd9c5",
        "contentId": "393806affe17ae6c99b538c7d29a401efabdba4a25800331ce32454a100fc2cd",
        "name": "saveExecutionTraces",
        "displayName": "RuntimeTraceIntegrator.saveExecutionTraces",
        "signature": "public async RuntimeTraceIntegrator.saveExecutionTraces(): Promise<void>",
        "signatureHash": "09d1a3803fc3b79e79deaf5182440af0a9bdd286931b8ceef1882aa324416d3f",
        "filePath": "/src/analyzers/runtime-trace-integrator.ts",
        "fileHash": "c394dab5dbdc120b943182efb7ab5c0e",
        "startLine": 312,
        "endLine": 330,
        "startColumn": 2,
        "endColumn": 722,
        "astHash": "f47c8569859d20fc",
        "contextPath": [
          "RuntimeTraceIntegrator"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Save execution traces to file (async optimized with atomic writes)\n   */\n  async saveExecutionTraces(): Promise<void> {\n    try {\n      const traceDir = '.funcqc';\n      if (!fs.existsSync(traceDir)) {\n        await fs.promises.mkdir(traceDir, { recursive: true });\n      }\n      \n      const tracePath = path.join(traceDir, 'execution-traces.json');\n      const tempPath = `${tracePath}.tmp`;\n      \n      // Write to temp file first, then atomically rename\n      await fs.promises.writeFile(tempPath, JSON.stringify(this.executionTraces, null, 2));\n      await fs.promises.rename(tempPath, tracePath);\n      \n      console.log(`   üíæ Saved ${this.executionTraces.length} execution traces`);\n    } catch (error) {\n      console.log(`   ‚ö†Ô∏è  Failed to save execution traces: ${error}`);\n    }\n  }",
        "sourceFileRefId": "9ac702b1-4937-421b-83d1-9c50652a401a",
        "parameters": [],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 24,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 3,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 3.75,
          "halsteadVolume": 361.21,
          "halsteadDifficulty": 2.32,
          "maintainabilityIndex": 62.84
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9d927e92-b101-5473-88cf-63aea111c34d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bcee24a81443bfc8a08f8dbfc90d085982dbf0ba04c594bacf139864916af708",
        "contentId": "7bfcd79402625204ba6103b3135242fdb2fdb811697c8ae634d6f61ef0b16d6f",
        "name": "createLazyAnalysisMessage",
        "displayName": "createLazyAnalysisMessage",
        "signature": "createLazyAnalysisMessage(commandName: string, isRequired: boolean): string",
        "signatureHash": "540f015740c931096903e3441d97c75e1e62d990ea4fdf7f6640ff7a1768570c",
        "filePath": "/src/utils/lazy-analysis.ts",
        "fileHash": "0e2bd56d39b2fe9a3599b4ccc03f6569",
        "startLine": 316,
        "endLine": 329,
        "startColumn": 0,
        "endColumn": 345,
        "astHash": "f3b6a3989197db00",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Create a progress message for lazy analysis\n */\nexport function createLazyAnalysisMessage(\n  commandName: string,\n  isRequired: boolean\n): string {\n  if (isRequired) {\n    return chalk.blue(\n      `üîç ${commandName} requires call graph analysis. Performing analysis now...`\n    );\n  } else {\n    return chalk.gray(\n      `üìä Loading existing call graph data for ${commandName}...`\n    );\n  }\n}",
        "sourceFileRefId": "c86f55b0-c39a-4d86-9351-1a2cffeeefa5",
        "parameters": [
          {
            "name": "commandName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "isRequired",
            "type": "boolean",
            "typeSimple": "boolean",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 19,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 4.67,
          "halsteadVolume": 53.15,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 79.05
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "192cb386-086f-578b-9549-66552dff561f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6b1e5bcfd9fc534d2b3fbf795d6012d3ed526e714bc7aa22dba31d8dc81586ce",
        "contentId": "f03b421020d7110fec7ea6e2f601807123334382f025a6404f88c65574d052c6",
        "name": "exitWithError",
        "displayName": "exitWithError",
        "signature": "exitWithError(message: string, code: number = 1): never",
        "signatureHash": "c37c91c7789556cd16dcee973630a35b9ef0367f40e74e7f6f58f5f32e5f5559",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 318,
        "endLine": 321,
        "startColumn": 0,
        "endColumn": 144,
        "astHash": "a920811c4de7623a",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Exit process with proper error code\n */\nexport function exitWithError(message: string, code: number = 1): never {\n  console.error(chalk.red('Error:'), message);\n  process.exit(code);\n}",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [
          {
            "name": "message",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "code",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "1"
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 88,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1ad45ef3-4343-50c2-a36d-29aef3ce2109",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c296ab92b2d6b045f9890f15da3002def5b5f52530c2eea7807f8a8edd909f54",
        "contentId": "47a46a4e684c5f511e8b56a8cab2739ea0e60713ba24ee971b7a8be738768f81",
        "name": "validateTableOrder",
        "displayName": "SchemaAnalyzer.validateTableOrder",
        "signature": "public SchemaAnalyzer.validateTableOrder(tableOrder: string[], dependencies: TableDependency[]): {\n    isValid: boolean;\n    violations: string[];\n  }",
        "signatureHash": "9474ee84793fa6b04eee6052abe85d7e54b3f87433ddbf609faa4dea91d6e4fb",
        "filePath": "/src/storage/backup/schema-analyzer.ts",
        "fileHash": "261ace910283f8ff6fdbf401748bed95",
        "startLine": 321,
        "endLine": 346,
        "startColumn": 2,
        "endColumn": 720,
        "astHash": "7614815134ef9bda",
        "contextPath": [
          "SchemaAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Validate table order against dependencies\n   */\n  validateTableOrder(tableOrder: string[], dependencies: TableDependency[]): {\n    isValid: boolean;\n    violations: string[];\n  } {\n    const violations: string[] = [];\n    const processed = new Set<string>();\n    \n    for (const tableName of tableOrder) {\n      const tableDeps = dependencies.find(d => d.tableName === tableName);\n      \n      if (tableDeps) {\n        for (const dep of tableDeps.dependencies) {\n          if (!processed.has(dep)) {\n            violations.push(`Table '${tableName}' depends on '${dep}' but '${dep}' comes later in order`);\n          }\n        }\n      }\n      \n      processed.add(tableName);\n    }\n    \n    return {\n      isValid: violations.length === 0,\n      violations,\n    };\n  }",
        "sourceFileRefId": "b0abafee-1f3c-4695-bf54-2dc57463c174",
        "parameters": [
          {
            "name": "tableOrder",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "dependencies",
            "type": "TableDependency[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 22,
          "totalLines": 31,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 4,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 2,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 7.33,
          "halsteadVolume": 263.22,
          "halsteadDifficulty": 3.82,
          "maintainabilityIndex": 55.8
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "fc625536-2967-57f4-8eb2-034cd3186bac",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8deb47d2d406f462a6fd4d01ccc9146dd38d821ca09f87fac716224a80dcfbbc",
        "contentId": "f35400a9473222b11fe755616e8a4179bf8362742bc45e467b5a011f430a2624",
        "name": "getFunctionById",
        "displayName": "FunctionRegistry.getFunctionById",
        "signature": "public FunctionRegistry.getFunctionById(id: string): FunctionMetadata | undefined",
        "signatureHash": "73460bf0be9b1587f6ab7e354cec9505bcc9b44f037fe22d547383ef1611e2ff",
        "filePath": "/src/analyzers/function-registry.ts",
        "fileHash": "342a1924c6421d65430e9ea4f71936b1",
        "startLine": 321,
        "endLine": 323,
        "startColumn": 2,
        "endColumn": 102,
        "astHash": "ba3d68290982f61f",
        "contextPath": [
          "FunctionRegistry"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get function metadata by ID\n   */\n  getFunctionById(id: string): FunctionMetadata | undefined {\n    return this.functionMap.get(id);\n  }",
        "sourceFileRefId": "35714751-b780-4a4a-a49c-dd9f9d12e454",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 30,
          "halsteadDifficulty": 1.17,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2c10c73a-b915-5943-b0c7-553edca35fbc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d7f37cd43f832847e31a9b995b95a772f2420f4b4cece3b495134a80cda76c37",
        "contentId": "b60ac8d2ff6ad1a239c922b43b71d7c4827856a5231de9fbeb39a8117a207167",
        "name": "enrichFunctionWithTypeInfo",
        "displayName": "TypeFunctionLinker.enrichFunctionWithTypeInfo",
        "signature": "public TypeFunctionLinker.enrichFunctionWithTypeInfo(functionMeta: FunctionMetadata, types: TypeDefinition[]): EnrichedFunctionInfo",
        "signatureHash": "10e2331b8039b383f20ec716b46ae0eec615d92d91ab3fa72cca0fef34b62c81",
        "filePath": "/src/analyzers/type-function-linker.ts",
        "fileHash": "a7102bbbac7a916310c7908bcf7170c8",
        "startLine": 323,
        "endLine": 345,
        "startColumn": 2,
        "endColumn": 804,
        "astHash": "b467094127ff69ab",
        "contextPath": [
          "TypeFunctionLinker"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Enrich function metadata with type context information\n   */\n  enrichFunctionWithTypeInfo(\n    functionMeta: FunctionMetadata, \n    types: TypeDefinition[]\n  ): EnrichedFunctionInfo {\n    const enriched: EnrichedFunctionInfo = { ...functionMeta };\n    \n    // Find the type that contains this function (if any)\n    const containingType = this.findContainingType(functionMeta, types);\n    \n    if (containingType) {\n      const accessModifier = this.extractAccessModifier(functionMeta);\n      enriched.typeContext = {\n        typeId: containingType.id,\n        typeName: containingType.name,\n        memberKind: this.determineMemberKind(functionMeta),\n        isClassMethod: containingType.kind === 'class',\n        isInterfaceMethod: containingType.kind === 'interface',\n        ...(accessModifier && { accessModifier })\n      };\n    }\n    \n    return enriched;\n  }",
        "sourceFileRefId": "d8feac5f-6614-4757-9623-b078f52b6d70",
        "parameters": [
          {
            "name": "functionMeta",
            "type": "FunctionMetadata",
            "typeSimple": "FunctionMetadata",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "types",
            "type": "TypeDefinition[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 19,
          "totalLines": 28,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4.75,
          "halsteadVolume": 282.39,
          "halsteadDifficulty": 4.04,
          "maintainabilityIndex": 59.16
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9853d60d-3b84-5d1a-8a39-079aa7531af4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "283eae2697dc8fa62ad779490957305ddfa636f0bc1e582a24b9f52712a56ee1",
        "contentId": "15e9d41886269c948bd95d0a12215f388daccae24c42cf68abf8b94c943444bc",
        "name": "collectCohesionData",
        "displayName": "OnePassASTVisitor.collectCohesionData",
        "signature": "private OnePassASTVisitor.collectCohesionData(node: PropertyAccessExpression | Node, ctx: ScanContext): void",
        "signatureHash": "8f592a9b82b3efde4c0ad0124982f7450b6544ab6c78b67e8a28a11b78fbfdd1",
        "filePath": "/src/analyzers/shared/one-pass-visitor.ts",
        "fileHash": "a3e738d9114f8146ab99389bb7345be9",
        "startLine": 323,
        "endLine": 366,
        "startColumn": 2,
        "endColumn": 1663,
        "astHash": "9200141fe5480ab9",
        "contextPath": [
          "OnePassASTVisitor"
        ],
        "functionType": "method",
        "modifiers": [
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "private collectCohesionData(node: PropertyAccessExpression | Node, ctx: ScanContext): void {\n    const func = this.findContainingFunction(node);\n    if (!func) return;\n    \n    const funcId = this.getFunctionId(func, ctx);\n    const propertyName = Node.isPropertyAccessExpression(node)\n      ? node.getName()\n      : Node.isElementAccessExpression(node)\n        ? (this.getElementAccessName(node) ?? '[computed]')\n        : 'unknown';\n    if (!propertyName || propertyName === 'unknown') return;\n    \n    // 1-pass cohesion collection (performance optimization)\n    if (!ctx.cohesionTempData.has(funcId)) {\n      ctx.cohesionTempData.set(funcId, new Set());\n    }\n    \n    const currentProps = ctx.cohesionTempData.get(funcId)!;\n    \n    // Track property co-access patterns for cohesion analysis\n    if (!ctx.cohesionData.propertyGroups.has(funcId)) {\n      ctx.cohesionData.propertyGroups.set(funcId, new Map());\n    }\n    \n    const propertyGroups = ctx.cohesionData.propertyGroups.get(funcId)!;\n    if (!propertyGroups.has(propertyName)) {\n      propertyGroups.set(propertyName, new Set());\n    }\n    \n    // Add bidirectional co-occurrence with all previously seen properties in this function\n    for (const existingProp of currentProps) {\n      if (existingProp !== propertyName) {\n        // Add bidirectional edges\n        if (!propertyGroups.has(existingProp)) {\n          propertyGroups.set(existingProp, new Set());\n        }\n        propertyGroups.get(propertyName)!.add(existingProp);\n        propertyGroups.get(existingProp)!.add(propertyName);\n      }\n    }\n    \n    // Add current property to the seen set\n    currentProps.add(propertyName);\n  }",
        "sourceFileRefId": "58489f52-f9a0-4d2a-94b8-0bdfed6aa1bc",
        "parameters": [
          {
            "name": "node",
            "type": "PropertyAccessExpression | Node",
            "typeSimple": "PropertyAccessExpression | Node",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "ctx",
            "type": "ScanContext",
            "typeSimple": "ScanContext",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 32,
          "totalLines": 46,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 13,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 9,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 6.4,
          "halsteadVolume": 996.66,
          "halsteadDifficulty": 8.6,
          "maintainabilityIndex": 35.21
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a82d4443-1e28-55cb-812b-9a8b0e388987",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "861be9ca3b7a9c949ac8247b30e28af8ccfd4b7332d394b2dcd218f2124cf9bf",
        "contentId": "4e7a465e3acfd0f86872e1f1b29fc395d1cd3e2a5e8f07488fb66d2dd53b92ce",
        "name": "validatePatterns",
        "displayName": "ArchitectureLayerDetector.validatePatterns",
        "signature": "public ArchitectureLayerDetector.validatePatterns(testPaths: string[]): Record<string, ArchitecturalLayer>",
        "signatureHash": "4aa96fc4e08b780bfa1b3b98979092970be0537f227807c8b52be5821263278d",
        "filePath": "/src/analyzers/architecture-layer-detector.ts",
        "fileHash": "e9d2cbb4480855fb4a0b7744fb514c9d",
        "startLine": 323,
        "endLine": 331,
        "startColumn": 2,
        "endColumn": 271,
        "astHash": "8a19b126a2ffe66d",
        "contextPath": [
          "ArchitectureLayerDetector"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Validate layer detection patterns\n   */\n  validatePatterns(testPaths: string[]): Record<string, ArchitecturalLayer> {\n    const results: Record<string, ArchitecturalLayer> = {};\n    \n    for (const testPath of testPaths) {\n      results[testPath] = this.detectLayer(testPath);\n    }\n    \n    return results;\n  }",
        "sourceFileRefId": "17199480-c4b0-4762-8a40-cd2237dceffd",
        "parameters": [
          {
            "name": "testPaths",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 14,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 68.11,
          "halsteadDifficulty": 3.75,
          "maintainabilityIndex": 93.39
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1acc27b1-6cb8-55e7-9dff-336a67d7e395",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fea61d77536bd59c2faa01c05c395e45027a4d88058315f8a221f57b40e87ccd",
        "contentId": "843ea40cba5007a91efbcb8f043422433011e1ee48596d41bbe3eeea59a7eca3",
        "name": "setupErrorHandling",
        "displayName": "setupErrorHandling",
        "signature": "setupErrorHandling(): void",
        "signatureHash": "c9df178e560cb13d9be5a470d02198371495e27ae081831eb1bdf7e9467ce5f5",
        "filePath": "/src/utils/cli-utils.ts",
        "fileHash": "9847c33eefbb7c8962c8a8d7159e6121",
        "startLine": 326,
        "endLine": 354,
        "startColumn": 0,
        "endColumn": 871,
        "astHash": "9c8d73f49c0d7e90",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Handle uncaught exceptions gracefully\n */\nexport function setupErrorHandling(): void {\n  process.on('uncaughtException', error => {\n    console.error(chalk.red('Uncaught Exception:'), error.message);\n    if (process.env['NODE_ENV'] === 'development') {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  });\n\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error(chalk.red('Unhandled Rejection at:'), promise, 'reason:', reason);\n    if (process.env['NODE_ENV'] === 'development') {\n      console.error((reason as Error).stack);\n    }\n    process.exit(1);\n  });\n\n  // Handle SIGINT (Ctrl+C) gracefully\n  process.on('SIGINT', () => {\n    console.log(chalk.yellow('\\n‚ö†Ô∏è  Process interrupted by user'));\n    process.exit(0);\n  });\n\n  // Handle SIGTERM gracefully\n  process.on('SIGTERM', () => {\n    console.log(chalk.yellow('\\n‚ö†Ô∏è  Process terminated'));\n    process.exit(0);\n  });\n}",
        "sourceFileRefId": "74abb00e-302e-409a-9269-9f38fabeeeed",
        "parameters": [],
        "metrics": {
          "linesOfCode": 24,
          "totalLines": 34,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 4,
          "commentLines": 5,
          "codeToCommentRatio": 4.8,
          "halsteadVolume": 702.96,
          "halsteadDifficulty": 5.03,
          "maintainabilityIndex": 46.86
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "dbf5abeb-7ab1-54a8-93da-a4ac57a941e1",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "13cfcd90f7aa7616be5d1970dfea4e3cf2437ba3ba754cc375d0cf4b5fef9099",
        "contentId": "aaa212ddfb62ba1b76129d8671932c930d2062692015b769c9f5a7ad34b087a0",
        "name": "resolvePath",
        "displayName": "ConfigManager.resolvePath",
        "signature": "public ConfigManager.resolvePath(relativePath: string): string",
        "signatureHash": "ab6f9aeadf606d8606e7a907486c342366aa0cb7967640c992f85f4032d9476c",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 327,
        "endLine": 336,
        "startColumn": 2,
        "endColumn": 289,
        "astHash": "476a43e4f2c87df4",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Resolve a path relative to the config file location\n   */\n  resolvePath(relativePath: string): string {\n    const result = this.explorer.search();\n\n    if (result?.filepath) {\n      const configDir = path.dirname(result.filepath);\n      return path.resolve(configDir, relativePath);\n    }\n\n    return path.resolve(process.cwd(), relativePath);\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [
          {
            "name": "relativePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 15,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 162.63,
          "halsteadDifficulty": 1.63,
          "maintainabilityIndex": 83.74
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "117f69f0-b848-5971-897c-e480330ce4bf",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "22eb9de5f56945e98c3ff12aa752b8906ab959862dccd900a99039aff724ca4e",
        "contentId": "130f2addbb6042ca2ebeccd4762dd8b7d0e718fdc579e2e069f88c247c452e0f",
        "name": "getAllFunctions",
        "displayName": "FunctionRegistry.getAllFunctions",
        "signature": "public FunctionRegistry.getAllFunctions(): Map<string, FunctionMetadata>",
        "signatureHash": "a6c9d951e65b8fc3b394f1dbd43913bce4b85c83680af67a22565c9d3de207cf",
        "filePath": "/src/analyzers/function-registry.ts",
        "fileHash": "342a1924c6421d65430e9ea4f71936b1",
        "startLine": 328,
        "endLine": 330,
        "startColumn": 2,
        "endColumn": 85,
        "astHash": "bc71f1a23fb4807c",
        "contextPath": [
          "FunctionRegistry"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get all functions\n   */\n  getAllFunctions(): Map<string, FunctionMetadata> {\n    return this.functionMap;\n  }",
        "sourceFileRefId": "35714751-b780-4a4a-a49c-dd9f9d12e454",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 11.61,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2b0cb9b7-af23-503c-8a25-b9ee61e00134",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5362c24bef60df92c8eb1e237a97b46eb48cc7a06dcda29ff09767917df89ba3",
        "contentId": "219a9c265501baabf1321ae7797a770daaae7704a73efe6b27d9b3e871b6acb6",
        "name": "constructor",
        "displayName": "MultiMetricStats.constructor",
        "signature": "public MultiMetricStats(config: Partial<StreamingStatsConfig> = {})",
        "signatureHash": "0554f9d470ff24d888ed57b589521ba1c7f08679515790d4fd4f689d936f83d1",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 329,
        "endLine": 336,
        "startColumn": 2,
        "endColumn": 185,
        "astHash": "9afebb57bc98c928",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": true,
        "isStatic": false,
        "sourceCode": "constructor(config: Partial<StreamingStatsConfig> = {}) {\n    this.config = {\n      minSamples: 10,\n      anomalyThreshold: 2.0,\n      trackVariance: true,\n      ...config,\n    };\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "config",
            "type": "Partial<StreamingStatsConfig>",
            "typeSimple": "Partial<StreamingStatsConfig>",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 10,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 39.86,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 94.52
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ea5d733a-3d13-5065-b7c7-f3bd12c9cd2c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ba8aa6ab8f7de70831f52fbb0d9921e979946cc8f0b8f692c008a86c5922d666",
        "contentId": "3dcaf5a5706d66f44e2f1a4750af34ff113036e4685e27bb9bb7901c3c5b5500",
        "name": "generateRecommendedActions",
        "displayName": "generateRecommendedActions",
        "signature": "generateRecommendedActions(riskAssessments: FunctionRiskAssessment[], functions: FunctionInfo[]): RecommendedAction[]",
        "signatureHash": "5d5c858aa3792eccfb7295ade34c91b08caed09239f2d96c52c37d4be3cd1ccb",
        "filePath": "/src/domain/health-analysis-logic.ts",
        "fileHash": "4fcd4ad8c78b7ccec2b4ad1238625a1b",
        "startLine": 330,
        "endLine": 365,
        "startColumn": 0,
        "endColumn": 1258,
        "astHash": "cac2bd188bf54aa3",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Generate recommended actions based on risk assessments\n */\nexport function generateRecommendedActions(\n  riskAssessments: FunctionRiskAssessment[], \n  functions: FunctionInfo[]\n): RecommendedAction[] {\n  // È´ò„É™„Çπ„ÇØÈñ¢Êï∞„ÅÆ„Åø„ÇíÂØæË±°„Å®„Åó„Å¶„ÄÅÊúÄÂ§ß10‰ª∂„Åæ„Åß\n  const highRiskAssessments = riskAssessments\n    .filter(assessment => assessment.riskLevel === 'high')\n    .sort((a, b) => b.riskScore - a.riskScore)\n    .slice(0, 10);\n    \n  return highRiskAssessments.map((assessment, index) => {\n    const func = functions.find(f => f.id === assessment.functionId);\n    if (!func) {\n      throw new Error(`Function not found for assessment: ${assessment.functionId}`);\n    }\n    const endLine = func.endLine ?? func.startLine + (func.metrics?.linesOfCode || 10);\n    \n    // „Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™Êé®Â•®‰∫ãÈ†Ö„ÅÆÁîüÊàêÔºàÂº∑ÂåñÁâàÔºâ\n    const suggestions = generateEnhancedSuggestions(func, func.metrics);\n    \n    return {\n      priority: index + 1,\n      functionName: func.displayName,\n      filePath: func.filePath,\n      startLine: func.startLine,\n      endLine: endLine,\n      riskScore: Math.round(assessment.riskScore),\n      action: \"General refactoring to improve maintainability\",\n      suggestions: suggestions,\n      metrics: {\n        cyclomaticComplexity: func.metrics?.cyclomaticComplexity || 0,\n        linesOfCode: func.metrics?.linesOfCode || 0,\n      },\n    };\n  });\n}",
        "sourceFileRefId": "0f4e7213-0373-44eb-a352-5dacb79a318e",
        "parameters": [
          {
            "name": "riskAssessments",
            "type": "FunctionRiskAssessment[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 31,
          "totalLines": 41,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 4,
          "commentLines": 5,
          "codeToCommentRatio": 6.2,
          "halsteadVolume": 789.8,
          "halsteadDifficulty": 7.83,
          "maintainabilityIndex": 39.31
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e34eea54-f36a-5897-9eac-e06b3e0b64eb",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "af3f6a28652a7803abb7bb8b7fe7dc78e6c1143dc563698ccb41c05fc385f920",
        "contentId": "6fae1697e76fc0a5bd78fa6cc9c449b89a211162a4c779edc0efd0283d73ebcf",
        "name": "formatDependencyRiskAnalysis",
        "displayName": "DependencyRiskAnalyzer.formatDependencyRiskAnalysis",
        "signature": "public DependencyRiskAnalyzer.formatDependencyRiskAnalysis(analysis: DependencyRiskAnalysis): string",
        "signatureHash": "a9280ea10940df5c794bdc3226ede6133e370250d4511669ed269850e96bbef2",
        "filePath": "/src/analyzers/type-insights/dependency-risk.ts",
        "fileHash": "63ed40f5838bb60b46eccfeaa4ce2ce6",
        "startLine": 332,
        "endLine": 386,
        "startColumn": 2,
        "endColumn": 2236,
        "astHash": "b9d52a32e5a5440b",
        "contextPath": [
          "DependencyRiskAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Format dependency risk analysis for display\n   */\n  formatDependencyRiskAnalysis(analysis: DependencyRiskAnalysis): string {\n    const lines: string[] = [];\n    \n    lines.push(`\\n‚ö†Ô∏è  Dependency Risk Analysis for '${analysis.typeName}'\\n`);\n    \n    // Risk overview\n    const riskIcon = this.getRiskIcon(analysis.riskFactors.overallRisk);\n    lines.push(`${riskIcon} Overall Risk: ${analysis.riskFactors.overallRisk}`);\n    lines.push('');\n\n    // Dependencies\n    lines.push('üîó Dependency Information:');\n    lines.push(`  Fan-in: ${analysis.dependencyInfo.fanIn} types depend on this`);\n    lines.push(`  Fan-out: ${analysis.dependencyInfo.fanOut} types this depends on`);\n    lines.push(`  Impact Radius: ~${analysis.impactRadius} components affected by changes`);\n    lines.push('');\n\n    // Churn information\n    lines.push('üìà Change Pattern:');\n    lines.push(`  Recent Changes: ${analysis.churn.changes30d} (30d), ${analysis.churn.changes90d} (90d)`);\n    lines.push(`  Change Velocity: ${analysis.churn.changeVelocity}`);\n    lines.push(`  Avg Days Between: ${analysis.churn.avgDaysBetween}`);\n    lines.push('');\n\n    // Risk breakdown\n    lines.push('üìä Risk Factors:');\n    lines.push(`  Centrality: ${Math.round(analysis.riskFactors.centralityScore * 100)}% (fan-in based)`);\n    lines.push(`  Volatility: ${Math.round(analysis.riskFactors.volatilityScore * 100)}% (change frequency)`);\n    lines.push(`  Coupling: ${Math.round(analysis.riskFactors.couplingScore * 100)}% (total connections)`);\n    lines.push('');\n\n    // Top dependents\n    if (analysis.dependencyInfo.dependents.length > 0) {\n      lines.push('üë• Key Dependents:');\n      const topDependents = analysis.dependencyInfo.dependents.slice(0, 5);\n      topDependents.forEach(dependent => {\n        lines.push(`  ‚Ä¢ ${dependent}`);\n      });\n      if (analysis.dependencyInfo.dependents.length > 5) {\n        lines.push(`  ...and ${analysis.dependencyInfo.dependents.length - 5} more`);\n      }\n      lines.push('');\n    }\n\n    // Recommendations\n    if (analysis.recommendations.length > 0) {\n      lines.push('üí° Risk Mitigation:');\n      analysis.recommendations.forEach((rec, index) => {\n        lines.push(`  ${index + 1}. ${rec}`);\n      });\n      lines.push('');\n    }\n\n    return lines.join('\\n');\n  }",
        "sourceFileRefId": "7bbc26e7-2833-43d2-b002-0f271371388b",
        "parameters": [
          {
            "name": "analysis",
            "type": "DependencyRiskAnalysis",
            "typeSimple": "DependencyRiskAnalysis",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 41,
          "totalLines": 60,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 2,
          "commentLines": 9,
          "codeToCommentRatio": 4.56,
          "halsteadVolume": 1757.39,
          "halsteadDifficulty": 10.85,
          "maintainabilityIndex": 27.24
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7870441d-9a57-509e-a994-5cf599e0b3cf",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e4390b956f6d988e54efe712f627f35d63d43033ed883a7c8f6933971b1dad33",
        "contentId": "1e0ff57227a9c620fb4d495bd1ea421c327153cf11f820989a8e670e8e4d9870",
        "name": "saveFunctions",
        "displayName": "PGLiteStorageAdapter.saveFunctions",
        "signature": "public async PGLiteStorageAdapter.saveFunctions(snapshotId: string, functions: FunctionInfo[]): Promise<void>",
        "signatureHash": "02dae6c041f41a7fb4e1fbc786f8aadbb79aa2ba0e7c042d70bd590b7be3c76e",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 332,
        "endLine": 335,
        "startColumn": 2,
        "endColumn": 194,
        "astHash": "9642c77ca893387c",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async saveFunctions(snapshotId: string, functions: FunctionInfo[]): Promise<void> {\r\n    await this.ensureInitialized();\r\n    return this.functionOps.saveFunctions(snapshotId, functions);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 58.81,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a401f4dd-bf14-5ea5-885b-5b261148aa72",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a311b129522199f36ecc39e75c361778a219d2d50af351aaeef67f6fc16559e1",
        "contentId": "8ce543a88c97e354533b98936a0681694541ba4675c3c02de4c63bb2fbdb8afa",
        "name": "calculateFileHash",
        "displayName": "calculateFileHash",
        "signature": "async calculateFileHash(filePath: string): Promise<string>",
        "signatureHash": "3fc6f266d9c8152938d3c5c7d64b0822eccfa0b2de653d9f46f8198dee1e580d",
        "filePath": "/src/utils/file-utils.ts",
        "fileHash": "967e7f40ae7791fb1ef2d48e372fa251",
        "startLine": 334,
        "endLine": 343,
        "startColumn": 0,
        "endColumn": 365,
        "astHash": "fb830a14e41f216d",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Calculate file hash using MD5\n */\nexport async function calculateFileHash(filePath: string): Promise<string> {\n  try {\n    const content = await fs.readFile(filePath);\n    return crypto.createHash('sha256').update(content).digest('hex');\n  } catch (error) {\n    throw new Error(\n      `Failed to calculate hash for ${filePath}: ${error instanceof Error ? error.message : String(error)}`\n    );\n  }\n}",
        "sourceFileRefId": "7418c1bd-edc4-40f3-b8ab-7f55f3b1cad6",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 15,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 176.42,
          "halsteadDifficulty": 2.1,
          "maintainabilityIndex": 77.69
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cf6527ed-93bf-5f05-b3de-24d7a9e515a6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "14249561300d1c3bb123555ea670c8ee8652b3c4e1e5ee07d52766ffd800cbee",
        "contentId": "81fd324e94e8a858a384fa0d3d2bafe245251edbb2b2cc52e00fd857fea0e0e6",
        "name": "getRepositoryStats",
        "displayName": "GitCochangeProvider.getRepositoryStats",
        "signature": "public async GitCochangeProvider.getRepositoryStats(options: GitCochangeOptions): Promise<{\n    totalCommits: number;\n    analyzedCommits: number;\n    timeSpan: string;\n    oldestCommit: Date | null;\n    newestCommit: Date | null;\n  }>",
        "signatureHash": "6aec2c6453796370866e31d94ab1cd578204dfa0efa1453ea1d649aaf3dea006",
        "filePath": "/src/analyzers/type-insights/git-cochange-provider.ts",
        "fileHash": "7af758c57709f5b11305695e6fa52504",
        "startLine": 334,
        "endLine": 377,
        "startColumn": 2,
        "endColumn": 1439,
        "astHash": "4695acc2e02d468b",
        "contextPath": [
          "GitCochangeProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get basic statistics about the repository\n   */\n  async getRepositoryStats(options: GitCochangeOptions): Promise<{\n    totalCommits: number;\n    analyzedCommits: number;\n    timeSpan: string;\n    oldestCommit: Date | null;\n    newestCommit: Date | null;\n  }> {\n    try {\n      // Normalize monthsBack for display purposes\n      const monthsBack = Number.isFinite(options.monthsBack)\n        ? Math.max(0, Math.floor(options.monthsBack))\n        : 0;\n        \n      const commits = await this.getCommitHistory(options);\n      \n      let oldestCommit: Date | null = null;\n      let newestCommit: Date | null = null;\n      \n      if (commits.length > 0) {\n        const dates = commits.map(c => c.date).sort((a, b) => a.getTime() - b.getTime());\n        oldestCommit = dates[0] ?? null;\n        newestCommit = dates[dates.length - 1] ?? null;\n      }\n\n      // Get total commit count\n      const totalCommitsOutput = this.runGit(['rev-list', '--count', 'HEAD'], {\n        cwd: this.repositoryRoot,\n        timeout: this.timeout\n      });\n      \n      return {\n        totalCommits: parseInt(totalCommitsOutput.trim(), 10) || 0,\n        analyzedCommits: commits.length,\n        timeSpan: `${monthsBack} months`,\n        oldestCommit,\n        newestCommit\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to get repository stats: ${error.message}`);\n      }\n      throw new Error(`Failed to get repository stats: ${String(error)}`);\n    }\n  }",
        "sourceFileRefId": "12866a76-6d42-49ab-8f8b-2d7fd8fcb1a0",
        "parameters": [
          {
            "name": "options",
            "type": "GitCochangeOptions",
            "typeSimple": "GitCochangeOptions",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 37,
          "totalLines": 49,
          "cyclomaticComplexity": 8,
          "cognitiveComplexity": 8,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 2,
          "commentLines": 5,
          "codeToCommentRatio": 7.4,
          "halsteadVolume": 836.82,
          "halsteadDifficulty": 8.17,
          "maintainabilityIndex": 34.28
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5237739a-1594-5c80-92fc-96224fb25e2b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "455488b1ca2c2000311338fe7fe5be01bafae5d45b8e88fea295663902dee12a",
        "contentId": "4f5d7b58295de99c898d608addec51001f4f424868279bfada8924100802812d",
        "name": "debounce",
        "displayName": "UtilityOperations.debounce",
        "signature": "public UtilityOperations.debounce(func: T, wait: number): (...args: Parameters<T>) => void",
        "signatureHash": "cb06dcdb529caf09a9a00ae330b702dca34613b1660f2f37fc828ac8cd7e2dc8",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 334,
        "endLine": 344,
        "startColumn": 2,
        "endColumn": 317,
        "astHash": "aa25a5195984c097",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Create a debounced version of a function\r\n   */\r\n  debounce<T extends (...args: unknown[]) => unknown>(\r\n    func: T,\r\n    wait: number\r\n  ): (...args: Parameters<T>) => void {\r\n    let timeout: NodeJS.Timeout;\r\n    \r\n    return (...args: Parameters<T>) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func.apply(this, args), wait);\r\n    };\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "func",
            "type": "T",
            "typeSimple": "T",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "wait",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 124,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 80.79
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "17c36aba-dae7-59dd-9416-53640e3dfffe",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a498fc52f38e0af62133d3c6310a25bfbafdb1970b308ddc18c7b049879dba40",
        "contentId": "2dec3741655033263e7a488e7e90d0035fea2fe5494c3475b296f06e22b31e73",
        "name": "clear",
        "displayName": "FunctionRegistry.clear",
        "signature": "public FunctionRegistry.clear(): void",
        "signatureHash": "f5240e1f70ed6f6e3af88c124a3b308053debca168abeb8d3ffadcfbbf824f39",
        "filePath": "/src/analyzers/function-registry.ts",
        "fileHash": "342a1924c6421d65430e9ea4f71936b1",
        "startLine": 335,
        "endLine": 337,
        "startColumn": 2,
        "endColumn": 51,
        "astHash": "86cfcd3adc32fcb0",
        "contextPath": [
          "FunctionRegistry"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear registry\n   */\n  clear(): void {\n    this.functionMap.clear();\n  }",
        "sourceFileRefId": "35714751-b780-4a4a-a49c-dd9f9d12e454",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 16.25,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "faa76ba4-f0c5-5f86-956b-71faeadf38d5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a6227b8f8817add067f5af2cd56deb1d7a5c28bdc12731c8949e763b1bf25342",
        "contentId": "5a958f639215d9f376efa9e5c990abe5d4506a9e30ab453cbdc72f0ac8f1b714",
        "name": "generateFunctionId",
        "displayName": "FunctionAnalyzer.generateFunctionId",
        "signature": "public FunctionAnalyzer.generateFunctionId(func: Partial<FunctionInfo>): string",
        "signatureHash": "b8888619579ffa7da8acf0c091e92923d6234e8f38ec2c29564109d483f04a33",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 335,
        "endLine": 346,
        "startColumn": 2,
        "endColumn": 332,
        "astHash": "f5c879f071b6e6e7",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate a unique ID for a function based on its characteristics\n   */\n  generateFunctionId(func: Partial<FunctionInfo>): string {\n    const components = [\n      func.filePath,\n      func.name,\n      func.startLine,\n      func.astHash || func.signature,\n    ].filter(Boolean);\n\n    // Create a simple hash of the components\n    const combined = components.join('|');\n    return simpleHash(combined);\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [
          {
            "name": "func",
            "type": "Partial<FunctionInfo>",
            "typeSimple": "Partial<FunctionInfo>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 17,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2.5,
          "halsteadVolume": 162.52,
          "halsteadDifficulty": 2.17,
          "maintainabilityIndex": 78.53
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5bf1f602-c59c-5019-a10a-79ee171be4d0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e2ce6ec4a6d4b0d8b0207ad09e86b39ce13a588f50a954680665f51a97b9abbc",
        "contentId": "613390a4ec5a4e844803e3e2e8d3f7a46806775679390b575b3c78dd48ec8b5e",
        "name": "detectAdvancedEntryPoints",
        "displayName": "EntryPointDetector.detectAdvancedEntryPoints",
        "signature": "public EntryPointDetector.detectAdvancedEntryPoints(sourceFile: SourceFile, functions: Map<string, FunctionInfo>): EntryPoint[]",
        "signatureHash": "a2aad1984a630c21ef4c6826e0ea08171f9f061a3d565017a8f6c5395bd8a054",
        "filePath": "/src/analyzers/entry-point-detector.ts",
        "fileHash": "a854c8eb3d975b2592a2dd930260f58f",
        "startLine": 336,
        "endLine": 403,
        "startColumn": 2,
        "endColumn": 2345,
        "astHash": "e36186a77d604368",
        "contextPath": [
          "EntryPointDetector"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Advanced entry point detection using AST analysis\n   * This can detect callbacks, event handlers, and other patterns\n   */\n  detectAdvancedEntryPoints(\n    sourceFile: SourceFile,\n    functions: Map<string, FunctionInfo>\n  ): EntryPoint[] {\n    const advancedEntryPoints: EntryPoint[] = [];\n\n    // Detect functions passed as callbacks to external libraries\n    sourceFile.forEachDescendant((node) => {\n      if (Node.isCallExpression(node)) {\n        const expression = node.getExpression();\n        \n        // Check for common patterns like addEventListener, app.get, etc.\n        if (Node.isPropertyAccessExpression(expression)) {\n          const propertyName = expression.getName();\n          if (!propertyName) return;\n          const objectName = expression.getExpression().getText();\n\n          // Event listeners\n          if (propertyName === 'addEventListener' || propertyName === 'on') {\n            const args = node.getArguments();\n            if (args.length >= 2) {\n              const callbackArg = args[1];\n              const functionId = this.extractFunctionId(callbackArg, functions);\n              if (functionId) {\n                advancedEntryPoints.push({\n                  functionId,\n                  reason: 'handler',\n                });\n              }\n            }\n          }\n\n          // Express/HTTP handlers\n          if (this.httpMethods.includes(propertyName) &&\n              this.httpObjects.includes(objectName)) {\n            const args = node.getArguments();\n            // Find callback arguments (usually the last one or multiple)\n            for (let i = 1; i < args.length; i++) {\n              const functionId = this.extractFunctionId(args[i], functions);\n              if (functionId) {\n                advancedEntryPoints.push({\n                  functionId,\n                  reason: 'handler',\n                });\n              }\n            }\n          }\n        }\n\n        // setTimeout, setInterval\n        const callName = expression.getText();\n        if (callName === 'setTimeout' || callName === 'setInterval') {\n          const args = node.getArguments();\n          if (args.length >= 1) {\n            const functionId = this.extractFunctionId(args[0], functions);\n            if (functionId) {\n              advancedEntryPoints.push({\n                functionId,\n                reason: 'handler',\n              });\n            }\n          }\n        }\n      }\n    });\n\n    return advancedEntryPoints;\n  }",
        "sourceFileRefId": "29791a75-ce61-4d05-86b6-0474ea5170c2",
        "parameters": [
          {
            "name": "sourceFile",
            "type": "SourceFile",
            "typeSimple": "SourceFile",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "Map<string, FunctionInfo>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 56,
          "totalLines": 74,
          "cyclomaticComplexity": 16,
          "cognitiveComplexity": 16,
          "maxNestingLevel": 5,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 11,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 10,
          "codeToCommentRatio": 5.6,
          "halsteadVolume": 1075.91,
          "halsteadDifficulty": 11.51,
          "maintainabilityIndex": 20.87
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "04e99b31-3a73-5ff6-a1e1-5ae94b0adebd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e1ad654a10354d8515df88a1eddf320ec52ddb7a03859e433733485a25a8c998",
        "contentId": "f7e353866707b462f044cfb6940f2886cae1001939d28fdef7b1b4c644bbf81a",
        "name": "updateMetric",
        "displayName": "MultiMetricStats.updateMetric",
        "signature": "public MultiMetricStats.updateMetric(metricName: string, value: number): void",
        "signatureHash": "cdbbdd0ee40206c62425977b489f862dd88cac9f9233c7afef97a50b57624cd0",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 341,
        "endLine": 346,
        "startColumn": 2,
        "endColumn": 218,
        "astHash": "d8a54228ed32d1d0",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Update statistics for a specific metric\n   */\n  updateMetric(metricName: string, value: number): void {\n    if (!this.stats.has(metricName)) {\n      this.stats.set(metricName, new StreamingStats(this.config));\n    }\n    this.stats.get(metricName)!.push(value);\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "metricName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "value",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 134.89,
          "halsteadDifficulty": 2.14,
          "maintainabilityIndex": 91.87
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4b4fc74c-468b-5355-8596-1b93b9b316ae",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "84e38f452caf7cae5dacb26671ca66f6ddff04410de866b07270d875d78de1bb",
        "contentId": "8a191c6cd24afc2eba3b5d686ecedeb917571b6716faf0b394666d506ee62d82",
        "name": "throttle",
        "displayName": "UtilityOperations.throttle",
        "signature": "public UtilityOperations.throttle(func: T, limit: number): (...args: Parameters<T>) => void",
        "signatureHash": "f38685ce02b85030e26a9503b19fc8d03f9f53995eb16bd8f9513ff1c95c2451",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 349,
        "endLine": 362,
        "startColumn": 2,
        "endColumn": 369,
        "astHash": "fab9ce419022cc02",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Throttle function execution\r\n   */\r\n  throttle<T extends (...args: unknown[]) => unknown>(\r\n    func: T,\r\n    limit: number\r\n  ): (...args: Parameters<T>) => void {\r\n    let inThrottle: boolean;\r\n    \r\n    return (...args: Parameters<T>) => {\r\n      if (!inThrottle) {\r\n        func.apply(this, args);\r\n        inThrottle = true;\r\n        setTimeout(() => inThrottle = false, limit);\r\n      }\r\n    };\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "func",
            "type": "T",
            "typeSimple": "T",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "limit",
            "type": "number",
            "typeSimple": "number",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 19,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 4.33,
          "halsteadVolume": 110.41,
          "halsteadDifficulty": 4.6,
          "maintainabilityIndex": 75.3
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5f439910-15af-59da-82a7-25245065a6fa",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "33e07a6174fa3b5480bb53e8a3705f4c798e54c189c0f2f813d30f453592503a",
        "contentId": "2903bd5a519ff11a30f694272a35b65a0f4253317a399b13437452e304148db9",
        "name": "enrichTypeWithFunctionInfo",
        "displayName": "TypeFunctionLinker.enrichTypeWithFunctionInfo",
        "signature": "public async TypeFunctionLinker.enrichTypeWithFunctionInfo(type: TypeDefinition, functions: FunctionMetadata[]): Promise<EnrichedTypeInfo>",
        "signatureHash": "6e235e342444abbba1ecbba39f1fa6d51752355bc1df769c2a3c69ea14f2604a",
        "filePath": "/src/analyzers/type-function-linker.ts",
        "fileHash": "a7102bbbac7a916310c7908bcf7170c8",
        "startLine": 350,
        "endLine": 362,
        "startColumn": 2,
        "endColumn": 431,
        "astHash": "f49d2b7441731406",
        "contextPath": [
          "TypeFunctionLinker"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Enrich type definition with function implementation quality metrics\n   */\n  async enrichTypeWithFunctionInfo(\n    type: TypeDefinition, \n    functions: FunctionMetadata[]\n  ): Promise<EnrichedTypeInfo> {\n    const enriched: EnrichedTypeInfo = { ...type };\n    \n    if (type.kind === 'class' || type.kind === 'interface') {\n      const typeMethods = this.findMethodsForType(type, functions);\n      enriched.methodQuality = await this.calculateMethodQuality(typeMethods);\n    }\n    \n    return enriched;\n  }",
        "sourceFileRefId": "d8feac5f-6614-4757-9623-b078f52b6d70",
        "parameters": [
          {
            "name": "type",
            "type": "TypeDefinition",
            "typeSimple": "TypeDefinition",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionMetadata[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 18,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 169.46,
          "halsteadDifficulty": 3.97,
          "maintainabilityIndex": 75.76
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b6dfae91-2686-5dad-ad3b-788dcffd61b1",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3b8f4d99f9c2f5f6a787c8d567083c583446e298b389cf9b149c2f70fc226100",
        "contentId": "b981334c7248159bc185921cf1aca921d49d12fcd6abc88b6ca46e2a360ebf18",
        "name": "compareFunctions",
        "displayName": "FunctionAnalyzer.compareFunctions",
        "signature": "public FunctionAnalyzer.compareFunctions(func1: FunctionInfo, func2: FunctionInfo): number",
        "signatureHash": "5d5c254f9c50d7b049033080b0819990f404b5243cb387096b9a7d6a09a6df12",
        "filePath": "/src/core/analyzer.ts",
        "fileHash": "39c854c60d120365091dba65617f7cf3",
        "startLine": 351,
        "endLine": 392,
        "startColumn": 2,
        "endColumn": 1226,
        "astHash": "28daefd04429ea4a",
        "contextPath": [
          "FunctionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Compare two functions for similarity (basic structural comparison)\n   */\n  compareFunctions(func1: FunctionInfo, func2: FunctionInfo): number {\n    let similarity = 0;\n    let factors = 0;\n\n    // Name similarity\n    if (func1.name === func2.name) {\n      similarity += 1;\n    }\n    factors++;\n\n    // Parameter count similarity\n    const paramDiff = Math.abs(func1.parameters.length - func2.parameters.length);\n    similarity += Math.max(\n      0,\n      1 - paramDiff / Math.max(func1.parameters.length, func2.parameters.length, 1)\n    );\n    factors++;\n\n    // AST similarity (exact match)\n    if (func1.astHash === func2.astHash) {\n      similarity += 1;\n    }\n    factors++;\n\n    // Metrics similarity\n    if (func1.metrics && func2.metrics) {\n      const complexityDiff = Math.abs(\n        func1.metrics.cyclomaticComplexity - func2.metrics.cyclomaticComplexity\n      );\n      similarity += Math.max(0, 1 - complexityDiff / 10); // Normalize by max expected complexity\n      factors++;\n\n      const linesDiff = Math.abs(func1.metrics.linesOfCode - func2.metrics.linesOfCode);\n      similarity += Math.max(\n        0,\n        1 - linesDiff / Math.max(func1.metrics.linesOfCode, func2.metrics.linesOfCode, 1)\n      );\n      factors++;\n    }\n\n    return factors > 0 ? similarity / factors : 0;\n  }",
        "sourceFileRefId": "5aa2bda4-0a3b-4e95-8d0f-8a5aaa89ac7a",
        "parameters": [
          {
            "name": "func1",
            "type": "FunctionInfo",
            "typeSimple": "FunctionInfo",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "func2",
            "type": "FunctionInfo",
            "typeSimple": "FunctionInfo",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 32,
          "totalLines": 47,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 4,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 4.57,
          "halsteadVolume": 872.68,
          "halsteadDifficulty": 20.06,
          "maintainabilityIndex": 37.82
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "57b7c743-4886-584d-abc5-c4b5181897f7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3bdd60febd07b7073491acabab0422a7781b4d0e2fdc73494bb1cbe71ca831e6",
        "contentId": "7ed749ca6820c09f5deeddf2d1497c14ab734969a8cf3c3a65edc8a975e22b47",
        "name": "getMetricStats",
        "displayName": "MultiMetricStats.getMetricStats",
        "signature": "public MultiMetricStats.getMetricStats(metricName: string): StreamingStats | undefined",
        "signatureHash": "cb2e665e69fee908a51cfeffd6778fb3c81a801cfede224ac4bbd7623221792b",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 351,
        "endLine": 353,
        "startColumn": 2,
        "endColumn": 109,
        "astHash": "da7326d7b4ff0649",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get statistics for a specific metric\n   */\n  getMetricStats(metricName: string): StreamingStats | undefined {\n    return this.stats.get(metricName);\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "metricName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 30,
          "halsteadDifficulty": 1.17,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6dabcbd9-273f-5b02-b6cb-682ce7dd36b2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "dcc24fb7aaa6a537cf0b1749cabceca97413d7fc236f03397ee72119f9a47162",
        "contentId": "5e7318d34a7b3168742438b94c0fab74b1b7141286d6b37268ac8f8e45cf3413",
        "name": "getSourceFilesBySnapshot",
        "displayName": "SourceContentOperations.getSourceFilesBySnapshot",
        "signature": "public async SourceContentOperations.getSourceFilesBySnapshot(snapshotId: string): Promise<import('../../types').SourceFile[]>",
        "signatureHash": "cd93118bc50287a61c95446fb2e02303a7d0aff8e96d0a5a24922298ca121014",
        "filePath": "/src/storage/modules/source-content-operations.ts",
        "fileHash": "9b800827fad246d1ade5a6363dc2dff9",
        "startLine": 357,
        "endLine": 397,
        "startColumn": 2,
        "endColumn": 1579,
        "astHash": "ad2737fd68a3be94",
        "contextPath": [
          "SourceContentOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get source files for a snapshot using N:1 design\n   */\n  async getSourceFilesBySnapshot(snapshotId: string): Promise<import('../../types').SourceFile[]> {\n    const result = await this.kysely\n      .selectFrom('source_file_refs')\n      .innerJoin('source_contents', 'source_file_refs.content_id', 'source_contents.id')\n      .select([\n        'source_file_refs.id',\n        'source_file_refs.snapshot_id',\n        'source_file_refs.file_path',\n        'source_file_refs.function_count',\n        'source_file_refs.file_modified_time',\n        'source_file_refs.created_at as ref_created_at',\n        'source_contents.content as file_content',\n        'source_contents.file_hash',\n        'source_contents.file_size_bytes',\n        'source_contents.line_count',\n        'source_contents.language',\n        'source_contents.encoding',\n        'source_contents.export_count',\n        'source_contents.import_count'\n      ])\n      .where('source_file_refs.snapshot_id', '=', snapshotId)\n      .orderBy('source_file_refs.file_path')\n      .execute();\n\n    return result.map(row => ({\n      id: row.id,\n      snapshotId: row.snapshot_id,\n      filePath: row.file_path,\n      fileContent: row.file_content,\n      fileHash: row.file_hash,\n      encoding: row.encoding,\n      fileSizeBytes: row.file_size_bytes,\n      lineCount: row.line_count,\n      language: row.language,\n      functionCount: row.function_count,\n      exportCount: row.export_count,\n      importCount: row.import_count,\n      fileModifiedTime: row.file_modified_time ? new Date(row.file_modified_time) : new Date(),\n      createdAt: new Date(row.ref_created_at)\n    }));\n  }",
        "sourceFileRefId": "5f183e5e-8193-4211-839a-513bae82c70b",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 40,
          "totalLines": 46,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 13.33,
          "halsteadVolume": 742.67,
          "halsteadDifficulty": 1.39,
          "maintainabilityIndex": 34.73
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "2a2705fb-9d1e-5723-b6eb-9dc5317eb390",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d9af1847c024911cce4e4ef8f4f2547dde57911663ceb7608b99c5637b911be3",
        "contentId": "cd6930bf8cd5f2eeb25b53063f2b85ecabca4e431ae69f79562eb0cfff233222",
        "name": "detectAnomalies",
        "displayName": "MultiMetricStats.detectAnomalies",
        "signature": "public MultiMetricStats.detectAnomalies(values: Record<string, number>): Record<string, AnomalyResult>",
        "signatureHash": "aec5e6e0546de4a59bb2362ba8acf8ee6135d32498d3ed03d57b0bdeff5a74ac",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 358,
        "endLine": 369,
        "startColumn": 2,
        "endColumn": 366,
        "astHash": "c051d4c8d10c4176",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Detect anomalies across all metrics\n   */\n  detectAnomalies(values: Record<string, number>): Record<string, AnomalyResult> {\n    const results: Record<string, AnomalyResult> = {};\n\n    for (const [metricName, value] of Object.entries(values)) {\n      const stats = this.stats.get(metricName);\n      if (stats) {\n        results[metricName] = stats.detectAnomaly(value);\n      }\n    }\n\n    return results;\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [
          {
            "name": "values",
            "type": "Record<string, number>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 17,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3.33,
          "halsteadVolume": 152.93,
          "halsteadDifficulty": 3.6,
          "maintainabilityIndex": 78.76
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b87d9e9f-0c3f-52f0-acc4-123d29ed9584",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b9b358282d7b62750f75105976ba6befd4803663232e93c38c83cecaf834194a",
        "contentId": "5ed228ac31e368a1c7038807be49cfcd6d1f4004027af0b6f046663330bda867",
        "name": "getQualityThresholds",
        "displayName": "ConfigManager.getQualityThresholds",
        "signature": "public ConfigManager.getQualityThresholds(): QualityScorerThresholds",
        "signatureHash": "d71979247b7bc8f835d582529b2fd228b47df8e1de8169bedc4330a99fd64ef7",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 358,
        "endLine": 360,
        "startColumn": 2,
        "endColumn": 117,
        "astHash": "2ea9b362e42f84e7",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get quality scorer thresholds configuration\n   */\n  getQualityThresholds(): QualityScorerThresholds {\n    return this.getThresholdManager().getQualityThresholds();\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 28.07,
          "halsteadDifficulty": 1.2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9b1fb430-9e24-50fd-9e82-e31f0eff8e7f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "622a1034584eb7c723f9cccabf95c68d1d714517261630f0667f8512e7838aaf",
        "contentId": "f1f38b4e39470c9497ab90f3513aa955c147bf57ce5ef56c73322b079452416e",
        "name": "updateQualityThresholds",
        "displayName": "ConfigManager.updateQualityThresholds",
        "signature": "public ConfigManager.updateQualityThresholds(thresholds: Partial<QualityScorerThresholds>): void",
        "signatureHash": "70e8f6c0c8dbfc2c59ca91fb89210fd4afeddf95aeb318e0e0a7d531ffe1ef0c",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 365,
        "endLine": 378,
        "startColumn": 2,
        "endColumn": 463,
        "astHash": "cbdb872fe9ff5318",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Update quality scorer thresholds configuration\n   */\n  updateQualityThresholds(thresholds: Partial<QualityScorerThresholds>): void {\n    this.getThresholdManager().updateThresholds(thresholds);\n\n    // Update the cached config as well\n    if (this.config) {\n      if (!this.config.funcqcThresholds) {\n        this.config.funcqcThresholds = {};\n      }\n      this.config.funcqcThresholds.quality = {\n        ...this.config.funcqcThresholds.quality,\n        ...thresholds,\n      } as QualityScorerThresholds;\n    }\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [
          {
            "name": "thresholds",
            "type": "Partial<QualityScorerThresholds>",
            "typeSimple": "Partial<QualityScorerThresholds>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 12,
          "totalLines": 19,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 3,
          "halsteadVolume": 156.28,
          "halsteadDifficulty": 4,
          "maintainabilityIndex": 74.34
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "eaed52e8-fd59-5d2d-8090-d4e57a8d07f8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b48d5361ddd354fdcc8363193c2ed3049fbfa790d945a02db91b71343ac63d2c",
        "contentId": "c91d0cc871511d02573d50139c425f95cb1a629f286a5e53f128174e5cd9e18a",
        "name": "saveSourceFiles",
        "displayName": "UtilityOperations.saveSourceFiles",
        "signature": "public async UtilityOperations.saveSourceFiles(sourceFiles: Array<{\r\n    id: string;\r\n    filePath: string;\r\n    content: string;\r\n    hash: string;\r\n    encoding?: string;\r\n    size: number;\r\n    lineCount?: number;\r\n    language?: string;\r\n    functionCount: number;\r\n    exportCount?: number;\r\n    importCount?: number;\r\n    fileModifiedTime?: Date;\r\n    createdAt?: Date;\r\n  }>, snapshotId: string): Promise<Map<string, string>>",
        "signatureHash": "c491e6939a5c776c206289d6bf984c23615b7b2d050eff520595ade74160e514",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 368,
        "endLine": 430,
        "startColumn": 2,
        "endColumn": 2468,
        "astHash": "371999a73669bbb5",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// ========================================\r\n  // SOURCE FILE OPERATIONS\r\n  // ========================================\r\n\r\n  async saveSourceFiles(sourceFiles: Array<{\r\n    id: string;\r\n    filePath: string;\r\n    content: string;\r\n    hash: string;\r\n    encoding?: string;\r\n    size: number;\r\n    lineCount?: number;\r\n    language?: string;\r\n    functionCount: number;\r\n    exportCount?: number;\r\n    importCount?: number;\r\n    fileModifiedTime?: Date;\r\n    createdAt?: Date;\r\n  }>, snapshotId: string): Promise<Map<string, string>> {\r\n    if (sourceFiles.length === 0) return new Map();\r\n\r\n    const rows = sourceFiles.map(file => ({\r\n      id: file.id,\r\n      snapshot_id: snapshotId,\r\n      file_path: file.filePath,\r\n      content: file.content,\r\n      hash: file.hash,\r\n      encoding: file.encoding || 'utf-8',\r\n      size: file.size,\r\n      line_count: file.lineCount || 0,\r\n      language: file.language || 'typescript',\r\n      function_count: file.functionCount || 0,\r\n      export_count: file.exportCount || 0,\r\n      import_count: file.importCount || 0,\r\n      file_modified_time: file.fileModifiedTime ? file.fileModifiedTime.toISOString() : new Date().toISOString(),\r\n      created_at: new Date().toISOString()\r\n    }));\r\n\r\n    const resultMap = new Map<string, string>();\r\n    \r\n    // Insert source files using composite ID (already deduplicated at scan level)\r\n    for (const row of rows) {\r\n      try {\r\n        await this.db.query(`\r\n          INSERT INTO source_files (id, snapshot_id, file_path, file_content, file_hash, encoding, file_size_bytes, line_count, language, function_count, export_count, import_count, file_modified_time, created_at)\r\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\r\n        `, [\r\n          row.id, row.snapshot_id, row.file_path, row.content, row.hash, \r\n          row.encoding, row.size, row.line_count, row.language, row.function_count, \r\n          row.export_count, row.import_count, row.file_modified_time, row.created_at\r\n        ]);\r\n        \r\n        resultMap.set(row.file_path, row.id);\r\n        this.logger?.log(`Inserted new source file: ${row.file_path}`);\r\n      } catch (error) {\r\n        // This should not happen with composite ID, but handle gracefully\r\n        if (error instanceof Error && error.message.includes('duplicate key')) {\r\n          this.logger?.warn(`Unexpected duplicate key for file ${row.file_path}, using existing entry`);\r\n          resultMap.set(row.file_path, row.id);\r\n          continue;\r\n        }\r\n        throw error;\r\n      }\r\n    }\r\n    \r\n    return resultMap;\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "sourceFiles",
            "type": "Array<{\r\n    id: string;\r\n    filePath: string;\r\n    content: string;\r\n    hash: string;\r\n    encoding?: string;\r\n    size: number;\r\n    lineCount?: number;\r\n    language?: string;\r\n    functionCount: number;\r\n    exportCount?: number;\r\n    importCount?: number;\r\n    fileModifiedTime?: Date;\r\n    createdAt?: Date;\r\n  }>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 56,
          "totalLines": 69,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 13,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 5,
          "codeToCommentRatio": 11.2,
          "halsteadVolume": 1332,
          "halsteadDifficulty": 8.02,
          "maintainabilityIndex": 19.96
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "09dbf895-b7b7-5d18-8626-0afbc8b1d279",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5aff7765146696c55fe3f97da13cb0f1bf0f8bd03e0d8ce65b6ca7d1d183fa26",
        "contentId": "a0dd053b5cc28c983e10baeebb02e0027a131d2dc4bbf4da328a5fd833b82d5c",
        "name": "evaluateRiskConditions",
        "displayName": "ThresholdEvaluator.evaluateRiskConditions",
        "signature": "public ThresholdEvaluator.evaluateRiskConditions(metrics: QualityMetrics, conditions: RiskCondition[], projectStatistics: ProjectStatistics): boolean",
        "signatureHash": "ad260a0f22c8aaf1fd610046732b9ecc762a86d86071357bedccdded3ed10d05",
        "filePath": "/src/utils/threshold-evaluator.ts",
        "fileHash": "6d7018b3b2a13b67bcc1a023d0912607",
        "startLine": 369,
        "endLine": 408,
        "startColumn": 2,
        "endColumn": 1224,
        "astHash": "e1aed6b292ccd7e8",
        "contextPath": [
          "ThresholdEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Evaluate custom risk conditions\n   */\n  evaluateRiskConditions(\n    metrics: QualityMetrics,\n    conditions: RiskCondition[],\n    projectStatistics: ProjectStatistics\n  ): boolean {\n    return conditions.some(condition => {\n      const value = metrics[condition.metric];\n      if (value === undefined) return false;\n\n      const metricStats = projectStatistics.metrics[condition.metric];\n      if (!metricStats) return false;\n\n      const evaluation = this.statisticalEvaluator.evaluateThreshold(\n        value,\n        condition.threshold,\n        metricStats\n      );\n\n      const operator = condition.operator ?? '>';\n      switch (operator) {\n        case '>':\n          return value > evaluation.threshold;\n        case '>=':\n          return value >= evaluation.threshold;\n        case '<':\n          return value < evaluation.threshold;\n        case '<=':\n          return value <= evaluation.threshold;\n        case '==':\n          return value === evaluation.threshold;\n        case '!=':\n          return value !== evaluation.threshold;\n        default:\n          console.warn(\n            `Invalid operator \"${operator}\" in risk condition for metric \"${condition.metric}\". Defaulting to false.`\n          );\n          return false;\n      }\n    });\n  }",
        "sourceFileRefId": "0b4dfca5-28d2-40b1-90d2-3058fabc8ca5",
        "parameters": [
          {
            "name": "metrics",
            "type": "QualityMetrics",
            "typeSimple": "QualityMetrics",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "conditions",
            "type": "RiskCondition[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "projectStatistics",
            "type": "ProjectStatistics",
            "typeSimple": "ProjectStatistics",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 37,
          "totalLines": 45,
          "cyclomaticComplexity": 11,
          "cognitiveComplexity": 11,
          "maxNestingLevel": 1,
          "parameterCount": 3,
          "returnStatementCount": 10,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 12.33,
          "halsteadVolume": 510.91,
          "halsteadDifficulty": 12.52,
          "maintainabilityIndex": 37.29
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d3a18353-5743-5e9c-a5c9-146cf9e42385",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d86fb57ef26d1582b7b809d1b6030d0780f60bb76a82df6ed29304360ec7d531",
        "contentId": "160890a562cc36eb7e3643c8ba0f960c7d3be0f54c3f1dce7ffccc5baf6d63bc",
        "name": "getAllSummaries",
        "displayName": "MultiMetricStats.getAllSummaries",
        "signature": "public MultiMetricStats.getAllSummaries(): Record<string, StatsSummary>",
        "signatureHash": "d0970557c27d1ec7bad35fe8cc7324d45c9dede3071a019dbfdf4b6cf28b9f15",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 374,
        "endLine": 382,
        "startColumn": 2,
        "endColumn": 243,
        "astHash": "be6251ec966614a0",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get summary for all tracked metrics\n   */\n  getAllSummaries(): Record<string, StatsSummary> {\n    const summaries: Record<string, StatsSummary> = {};\n\n    for (const [metricName, stats] of this.stats) {\n      summaries[metricName] = stats.getSummary();\n    }\n\n    return summaries;\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 14,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 71.7,
          "halsteadDifficulty": 3.75,
          "maintainabilityIndex": 93.01
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e7fd6e37-8177-5c96-9111-2da889d05412",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "90feb41b0da9835a9f443f8c8fa4b0c9f8af4854e2c1d70ee294752496fb1441",
        "contentId": "d53b5bef957f102c09462eb41426e1adad503a1dd2c69731613b093c8e591024",
        "name": "formatOptimizationAnalysis",
        "displayName": "ApiOptimizer.formatOptimizationAnalysis",
        "signature": "public ApiOptimizer.formatOptimizationAnalysis(analysis: ApiOptimizationAnalysis): string",
        "signatureHash": "b906253fad9c758c5c36f850da16eeb898ae69a34ae09b0d1d450d3bad94e91e",
        "filePath": "/src/analyzers/type-insights/api-optimizer.ts",
        "fileHash": "32ae16bf79df54f328b96194b744a7b9",
        "startLine": 380,
        "endLine": 436,
        "startColumn": 2,
        "endColumn": 1968,
        "astHash": "87171271d7e2e42b",
        "contextPath": [
          "ApiOptimizer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Format API optimization analysis for display\n   */\n  formatOptimizationAnalysis(analysis: ApiOptimizationAnalysis): string {\n    const lines: string[] = [];\n    \n    lines.push(`\\nüéØ API Optimization for type '${analysis.typeName}'\\n`);\n    \n    // Surface area\n    lines.push('üìä API Surface Area:');\n    lines.push(`  Methods: ${analysis.surfaceArea.methods} (${analysis.surfaceArea.overloads} overloads)`);\n    lines.push(`  Properties: ${analysis.surfaceArea.properties}`);\n    lines.push(`  Constructors: ${analysis.surfaceArea.constructors}`);\n    lines.push(`  Accessors: ${analysis.surfaceArea.accessors}`);\n    lines.push('');\n\n    // Unused overloads\n    if (analysis.unusedOverloads.length > 0) {\n      lines.push('üö´ Unused Overloads:');\n      for (const overload of analysis.unusedOverloads.slice(0, 5)) {\n        lines.push(`  ${overload.methodName}: ${overload.signature} (0 calls)`);\n      }\n      lines.push('');\n    }\n\n    // Unused setters\n    if (analysis.unusedSetters.length > 0) {\n      lines.push('üîí Unused Setters:');\n      for (const setter of analysis.unusedSetters.slice(0, 5)) {\n        lines.push(`  ${setter.propertyName}: ${setter.getterUsage} reads, 0 writes`);\n      }\n      lines.push('');\n    }\n\n    // Readonly candidates\n    if (analysis.readonlyCandidates.length > 0) {\n      lines.push('üìñ Readonly Candidates:');\n      for (const candidate of analysis.readonlyCandidates.slice(0, 5)) {\n        lines.push(`  ${candidate.propertyName}: ${candidate.reason}`);\n      }\n      lines.push('');\n    }\n\n    // Excessive methods warning\n    if (analysis.excessiveMethods) {\n      lines.push('‚ö†Ô∏è  Large API Surface: Consider splitting into smaller interfaces');\n      lines.push('');\n    }\n\n    // Recommendations\n    if (analysis.recommendations.length > 0) {\n      lines.push('üí° Optimization Opportunities:');\n      analysis.recommendations.forEach((rec, index) => {\n        lines.push(`  ${index + 1}. ${rec}`);\n      });\n      lines.push('');\n    }\n\n    return lines.join('\\n');\n  }",
        "sourceFileRefId": "940cf273-9443-4fd1-a10b-e643c3e00982",
        "parameters": [
          {
            "name": "analysis",
            "type": "ApiOptimizationAnalysis",
            "typeSimple": "ApiOptimizationAnalysis",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 43,
          "totalLines": 62,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 5,
          "loopCount": 3,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 9,
          "codeToCommentRatio": 4.78,
          "halsteadVolume": 1408.01,
          "halsteadDifficulty": 6.67,
          "maintainabilityIndex": 26.64
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "242edbbc-63df-5237-89dc-9ac5d9827b2c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b9f59387fd95989d3d76575d52365b62ee386e831bd0f8c8c400ac1c15a944f4",
        "contentId": "c198ea300630aac1307b41b1867d8f671f6b8a3dd71fe137b7ffa4c7860198e3",
        "name": "setRepositoryRoot",
        "displayName": "GitCochangeProvider.setRepositoryRoot",
        "signature": "public GitCochangeProvider.setRepositoryRoot(rootPath: string): void",
        "signatureHash": "b4c78f4f4a1008e1e680fdae87082a62753087efa95dd16625ff9c021541429b",
        "filePath": "/src/analyzers/type-insights/git-cochange-provider.ts",
        "fileHash": "7af758c57709f5b11305695e6fa52504",
        "startLine": 382,
        "endLine": 384,
        "startColumn": 2,
        "endColumn": 85,
        "astHash": "b26ce2adb84e1925",
        "contextPath": [
          "GitCochangeProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Set the repository root directory\n   */\n  setRepositoryRoot(rootPath: string): void {\n    this.repositoryRoot = rootPath;\n  }",
        "sourceFileRefId": "12866a76-6d42-49ab-8f8b-2d7fd8fcb1a0",
        "parameters": [
          {
            "name": "rootPath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 13.93,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "82a8779e-25ff-5f99-8dca-c20e80e0dcb9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f4571340f65732c7292f519be42b0d4351310cdbf857cd34010b1d1af61078b7",
        "contentId": "96f6e8256ff6594d3736329bd3f1082abddd45418d60118dc83efdd8ae211aca",
        "name": "getMetricNames",
        "displayName": "MultiMetricStats.getMetricNames",
        "signature": "public MultiMetricStats.getMetricNames(): string[]",
        "signatureHash": "82deb2df3d8d9d322ec115e86be3eceaf6bbac494d2b3e9c7eba8e9aa6225dc7",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 387,
        "endLine": 389,
        "startColumn": 2,
        "endColumn": 76,
        "astHash": "f4f82a48641adbc8",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get list of tracked metric names\n   */\n  getMetricNames(): string[] {\n    return Array.from(this.stats.keys());\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 38.04,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a89f763b-016d-51da-905f-47166ccfbb36",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fcda287a914cabd1681dce3c0d63731a80f27d4b4dc4f4edb470620d6e4c37b5",
        "contentId": "852bc59001a9b6a1ba42f04e97c0babc2140108b9653b4c740818d76a2ced82d",
        "name": "setTimeout",
        "displayName": "GitCochangeProvider.setTimeout",
        "signature": "public GitCochangeProvider.setTimeout(timeoutMs: number): void",
        "signatureHash": "c9e265afc645de690d8a860a7088f114e45faa245362793410348a82e0824aef",
        "filePath": "/src/analyzers/type-insights/git-cochange-provider.ts",
        "fileHash": "7af758c57709f5b11305695e6fa52504",
        "startLine": 389,
        "endLine": 391,
        "startColumn": 2,
        "endColumn": 73,
        "astHash": "8a3093387e8145ea",
        "contextPath": [
          "GitCochangeProvider"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Set timeout for Git operations\n   */\n  setTimeout(timeoutMs: number): void {\n    this.timeout = timeoutMs;\n  }",
        "sourceFileRefId": "12866a76-6d42-49ab-8f8b-2d7fd8fcb1a0",
        "parameters": [
          {
            "name": "timeoutMs",
            "type": "number",
            "typeSimple": "number",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 13.93,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "503132de-9556-5eef-b2c1-bcd013a4fa80",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "424af7337ca1d3f8810eebd708371b090935b3eccdc612d23674b9d778ebf722",
        "contentId": "c5000af43894d97c596537582de8a7c810c32f85d6ae7a0d9fda18aaeb0d5f74",
        "name": "getDetailedResults",
        "displayName": "StructuralSubsumptionAnalyzer.getDetailedResults",
        "signature": "public async StructuralSubsumptionAnalyzer.getDetailedResults(snapshotId?: string): Promise<SubsumptionRelationship[]>",
        "signatureHash": "b5fa128b078738fa3e91c6002b4d9ab42006bfe8686fe28c0886a8181da2ff52",
        "filePath": "/src/analyzers/type-insights/structural-subsumption-analyzer.ts",
        "fileHash": "99a4696b3af6215ca8f2519df114e179",
        "startLine": 392,
        "endLine": 399,
        "startColumn": 2,
        "endColumn": 380,
        "astHash": "d61be191ef3233e3",
        "contextPath": [
          "StructuralSubsumptionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get detailed subsumption results (used by CLI)\n   */\n  async getDetailedResults(snapshotId?: string): Promise<SubsumptionRelationship[]> {\n    try {\n      const types = await this.loadTypeInformation(snapshotId);\n      return await this.findSubsumptionRelationships(types);\n    } catch (error) {\n      throw new Error(`Failed to get detailed subsumption results: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "d4d6887a-8149-4ea9-8881-f1d90fa69020",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 108,
          "halsteadDifficulty": 2.31,
          "maintainabilityIndex": 86.58
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0745a67b-9292-565c-ba75-f7b8a454d7db",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "14e82f06cefa230ae53ef8a2b5936708518e4c4299a0a0f00d0986e678f52603",
        "contentId": "5afa0576864c9188448ded1f925a54a74a08198b407579f860c0cf18cf5e2a90",
        "name": "resetAll",
        "displayName": "MultiMetricStats.resetAll",
        "signature": "public MultiMetricStats.resetAll(): void",
        "signatureHash": "5a7717aec99c4c61c0e77f2e3066626e6eb63626ab7ee93da1ecad29cfed6302",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 394,
        "endLine": 398,
        "startColumn": 2,
        "endColumn": 98,
        "astHash": "099ae783fa89eddd",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Reset statistics for all metrics\n   */\n  resetAll(): void {\n    for (const stats of this.stats.values()) {\n      stats.reset();\n    }\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 10,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.67,
          "halsteadVolume": 39,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "99fff37f-bbf4-5f32-888c-bf01387275b8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0385272882f15cd59a1d712f3459391a29d08ded1fd3099e02c429f3921daa85",
        "contentId": "8afa34943f0e440699f247ede2e2604c1836ef3fb3c088c485a3c8df09911cc9",
        "name": "getProjectStats",
        "displayName": "SafeFunctionDeleter.getProjectStats",
        "signature": "public SafeFunctionDeleter.getProjectStats(): void",
        "signatureHash": "31ce255b9edb25f3f3a5700893edadd417e454a7596217bff15149accdc497db",
        "filePath": "/src/tools/function-deleter.ts",
        "fileHash": "8fc397ad4e051e3a8cc198b6b43e69ae",
        "startLine": 402,
        "endLine": 407,
        "startColumn": 2,
        "endColumn": 161,
        "astHash": "62ee5a95b3910f7d",
        "contextPath": [
          "SafeFunctionDeleter"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get project statistics\n   */\n  getProjectStats() {\n    return {\n      sourceFiles: this.project.getSourceFiles().length,\n      filesInMemory: this.project.getSourceFiles().length,\n    };\n  }",
        "sourceFileRefId": "b377269f-af90-4054-bdd2-8550779283ca",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 60.23,
          "halsteadDifficulty": 1.57,
          "maintainabilityIndex": 98.15
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f820660b-1672-51d9-878a-fc399f4ee6ee",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "80d9bf599a5cdd48e1cd1ea2a4fcd5334ca7c31ac0edf29b9b1583f9aa50fa97",
        "contentId": "49d14b1affaea2dc78156e04541774f579b9bf0095f5d98162ccb63ea29a066e",
        "name": "clear",
        "displayName": "MultiMetricStats.clear",
        "signature": "public MultiMetricStats.clear(): void",
        "signatureHash": "06fb5d527e654ea0766bc3826d05f3af89cd230a6da4ef68015fc5cb0e5cdd9c",
        "filePath": "/src/utils/streaming-stats.ts",
        "fileHash": "e0ee09f17668fa50ce64f577ab1dfa8f",
        "startLine": 403,
        "endLine": 405,
        "startColumn": 2,
        "endColumn": 45,
        "astHash": "6adf946e78ede535",
        "contextPath": [
          "MultiMetricStats"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear all tracked metrics\n   */\n  clear(): void {\n    this.stats.clear();\n  }",
        "sourceFileRefId": "140b76e8-5e9a-4b12-9108-b8d0cef28de9",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 16.25,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7d1d356b-694f-5cc3-af69-07555846266a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "f69db3abd1bdb1bfb4bf4bc2062c13d890d82338d0d20444d1152312d0401e68",
        "contentId": "2849ef6599011d8f661726eeba4bf06056c2377b2dfe78d4fa970a321f8dc63f",
        "name": "getSubsumptionConfiguration",
        "displayName": "StructuralSubsumptionAnalyzer.getSubsumptionConfiguration",
        "signature": "public StructuralSubsumptionAnalyzer.getSubsumptionConfiguration(): StructuralSubsumptionOptions",
        "signatureHash": "e7626326d3794928ba34f438b0ec2e9867d3f7b7f0e8a038ba5f332eb6d513f7",
        "filePath": "/src/analyzers/type-insights/structural-subsumption-analyzer.ts",
        "fileHash": "99a4696b3af6215ca8f2519df114e179",
        "startLine": 404,
        "endLine": 406,
        "startColumn": 2,
        "endColumn": 110,
        "astHash": "2125f8858894b3c3",
        "contextPath": [
          "StructuralSubsumptionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get configuration specific to subsumption analysis\n   */\n  getSubsumptionConfiguration(): StructuralSubsumptionOptions {\n    return { ...this.subsumptionOptions };\n  }",
        "sourceFileRefId": "d4d6887a-8149-4ea9-8881-f1d90fa69020",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "deb612e1-9d15-5a55-affe-9d02d93b7ab9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d312a79f0aca3c98a3406c962194ddad4c78ec919bd46bc654b78ff524768de3",
        "contentId": "8ebdbe444079212cc65292bdd778941372b6399bad0c4d46684f451209dbecf1",
        "name": "updateSubsumptionConfiguration",
        "displayName": "StructuralSubsumptionAnalyzer.updateSubsumptionConfiguration",
        "signature": "public StructuralSubsumptionAnalyzer.updateSubsumptionConfiguration(newOptions: Partial<StructuralSubsumptionOptions>): void",
        "signatureHash": "72c7f1980c6930cb3c546250e5def0c4f10daaaeb022024e633dc26a43c13b78",
        "filePath": "/src/analyzers/type-insights/structural-subsumption-analyzer.ts",
        "fileHash": "99a4696b3af6215ca8f2519df114e179",
        "startLine": 411,
        "endLine": 414,
        "startColumn": 2,
        "endColumn": 214,
        "astHash": "5e12649617e9afb8",
        "contextPath": [
          "StructuralSubsumptionAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Update subsumption-specific configuration\n   */\n  updateSubsumptionConfiguration(newOptions: Partial<StructuralSubsumptionOptions>): void {\n    this.subsumptionOptions = { ...this.subsumptionOptions, ...newOptions };\n    this.updateConfiguration(newOptions);\n  }",
        "sourceFileRefId": "d4d6887a-8149-4ea9-8881-f1d90fa69020",
        "parameters": [
          {
            "name": "newOptions",
            "type": "Partial<StructuralSubsumptionOptions>",
            "typeSimple": "Partial<StructuralSubsumptionOptions>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 2.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d7cc9649-62e0-57bb-a1d6-658692e88e4f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "930be1a6433b993afc11a5cc7b05dc94da1a4883ff9e90dc3c27b8c70afda79a",
        "contentId": "fba27dd32107820fa4e8f2096df25da86590c18fbda4f6f81390d67bdc23e3a1",
        "name": "clearCache",
        "displayName": "ArchitectureConfigManager.clearCache",
        "signature": "public ArchitectureConfigManager.clearCache(): void",
        "signatureHash": "4045540a76c05a68e253feb4168e76a35b6790302bd6df2fb01e6bd54ad85203",
        "filePath": "/src/config/architecture-config.ts",
        "fileHash": "d7125880e3c2350cec41bae9ec342d7c",
        "startLine": 411,
        "endLine": 414,
        "startColumn": 2,
        "endColumn": 88,
        "astHash": "46878f4f52a89721",
        "contextPath": [
          "ArchitectureConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear cached configuration (for testing)\n   */\n  clearCache(): void {\n    this.config = undefined;\n    this.explorer.clearCaches();\n  }",
        "sourceFileRefId": "da56c761-051a-4bdf-b8cf-c38011c06739",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 34.87,
          "halsteadDifficulty": 1.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "650c47bb-74d5-526f-bff3-f4637e8de1a9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "467c1104b15a2fcdcce4204841a70f91494e7bb709b74d166f39064e85f784a7",
        "contentId": "074fa1f37c07c17da80471af6179421cec33139b2a7b4821b210083dc9e39278",
        "name": "analyzeFile",
        "displayName": "CallGraphAnalyzer.analyzeFile",
        "signature": "public async CallGraphAnalyzer.analyzeFile(filePath: string, functionMap: Map<string, { id: string; name: string; startLine: number; endLine: number }>, getFunctionIdByDeclaration?: (decl: Node) => string | undefined): Promise<CallEdge[]>",
        "signatureHash": "5b9cea9b02f335f2b84c12093e853a29bd897c344e762c95f0d2da349560ba5e",
        "filePath": "/src/analyzers/call-graph-analyzer.ts",
        "fileHash": "425b4f65c7ee6eb33c8ff53b7bd12548",
        "startLine": 411,
        "endLine": 415,
        "startColumn": 2,
        "endColumn": 232,
        "astHash": "96ba8adeb5e87650",
        "contextPath": [
          "CallGraphAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// Backward compatibility overload - uses local function map as allowed set\n  async analyzeFile(\n    filePath: string,\n    functionMap: Map<string, { id: string; name: string; startLine: number; endLine: number }>,\n    getFunctionIdByDeclaration?: (decl: Node) => string | undefined\n  ): Promise<CallEdge[]>;",
        "sourceFileRefId": "780ad702-d34e-42a7-ba49-155fe3627ccd",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functionMap",
            "type": "Map<string, { id: string; name: string; startLine: number; endLine: number }>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "getFunctionIdByDeclaration",
            "type": "(decl: Node) => string | undefined",
            "typeSimple": "string",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 5,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 5,
          "halsteadVolume": 48.11,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1a6a1ac3-bc3a-54eb-9eda-128bd64e3b10",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8fdb55759bdeee5dc5b4ddccfff940c6835533103052f0c0ef7ee7e78fb99e37",
        "contentId": "a2a1ab03092d64a795f4d702b47d4024bf4af4ccd7bec7193578963b1d8b9c2f",
        "name": "clear",
        "displayName": "LocalSimilarityService.clear",
        "signature": "public LocalSimilarityService.clear(): void",
        "signatureHash": "c79d9ff9cbb8a696554b55ac47565eeb048cfc35efe819c8251f8cd43c56d10d",
        "filePath": "/src/services/local-similarity-service.ts",
        "fileHash": "4408dd85ea4a7654b2a23e51c3b5a98f",
        "startLine": 412,
        "endLine": 415,
        "startColumn": 2,
        "endColumn": 79,
        "astHash": "291af275f1fc5f82",
        "contextPath": [
          "LocalSimilarityService"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear all indexed documents\n   */\n  clear(): void {\n    this.documents.clear();\n    this.tfidfMetrics = null;\n  }",
        "sourceFileRefId": "cf78aff8-46ae-4755-963f-1c96050974e0",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 28.07,
          "halsteadDifficulty": 1.88,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cb984444-034e-5bc6-b8fd-299618591f91",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "13b60e953b104df0df86c1cd60a0b5eb99d5507115f76b19e17de8ca41a36ceb",
        "contentId": "99c3ac616535fdc6ee26252675ef87a160318f49134fbd3bcfb8a62d4930878c",
        "name": "generateProjectRiskAssessment",
        "displayName": "ThresholdEvaluator.generateProjectRiskAssessment",
        "signature": "public ThresholdEvaluator.generateProjectRiskAssessment(functionAssessments: FunctionRiskAssessment[], projectStatistics: ProjectStatistics, configuredThresholds: QualityThresholds): ProjectRiskAssessment",
        "signatureHash": "8bcfd334e540a3c22f74420d0fbfe27c9c0a9dec2456125bed039c3f2585229b",
        "filePath": "/src/utils/threshold-evaluator.ts",
        "fileHash": "6d7018b3b2a13b67bcc1a023d0912607",
        "startLine": 413,
        "endLine": 446,
        "startColumn": 2,
        "endColumn": 1152,
        "astHash": "de6f2c0a262d22f4",
        "contextPath": [
          "ThresholdEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Generate project-wide risk assessment\n   */\n  generateProjectRiskAssessment(\n    functionAssessments: FunctionRiskAssessment[],\n    projectStatistics: ProjectStatistics,\n    configuredThresholds: QualityThresholds\n  ): ProjectRiskAssessment {\n    // Calculate risk distribution\n    const riskDistribution = functionAssessments.reduce(\n      (dist, assessment) => {\n        dist[assessment.riskLevel]++;\n        return dist;\n      },\n      { low: 0, medium: 0, high: 0, critical: 0 }\n    );\n\n    // Find top violations across all functions\n    const allViolations = functionAssessments.flatMap(a => a.violations);\n    const topViolations = allViolations.sort((a, b) => b.excess - a.excess).slice(0, 10);\n\n    // Find worst functions by risk score\n    const worstFunctions = functionAssessments\n      .filter(a => a.riskLevel === 'high' || a.totalViolations > 0)\n      .sort((a, b) => b.riskScore - a.riskScore)\n      .slice(0, 10);\n\n    return {\n      totalFunctions: projectStatistics.totalFunctions,\n      assessedFunctions: functionAssessments.length,\n      riskDistribution,\n      topViolations,\n      worstFunctions,\n      statistics: projectStatistics,\n      configuredThresholds,\n    };\n  }",
        "sourceFileRefId": "0b4dfca5-28d2-40b1-90d2-3058fabc8ca5",
        "parameters": [
          {
            "name": "functionAssessments",
            "type": "FunctionRiskAssessment[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "projectStatistics",
            "type": "ProjectStatistics",
            "typeSimple": "ProjectStatistics",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "configuredThresholds",
            "type": "QualityThresholds",
            "typeSimple": "QualityThresholds",
            "position": 2,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 28,
          "totalLines": 39,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 2,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 5,
          "commentLines": 6,
          "codeToCommentRatio": 4.67,
          "halsteadVolume": 644.15,
          "halsteadDifficulty": 7.45,
          "maintainabilityIndex": 44.14
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3497ebae-f168-5dfb-a2dc-23979d256aff",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2e6cb03f101150677dcf00170e5b3068c53779eb28bfee7e176351ab7bb042eb",
        "contentId": "9ef3040598eee88d9512efbf98a7f27c6b4267560b82c8c8d0455eebf2543650",
        "name": "createSampleConfig",
        "displayName": "ArchitectureConfigManager.createSampleConfig",
        "signature": "public ArchitectureConfigManager.createSampleConfig(outputPath: string): void",
        "signatureHash": "09cec62bb588f8320788b3c23a0e5f4ba75776023b83325c41a124b31c81de2b",
        "filePath": "/src/config/architecture-config.ts",
        "fileHash": "d7125880e3c2350cec41bae9ec342d7c",
        "startLine": 419,
        "endLine": 459,
        "startColumn": 2,
        "endColumn": 1052,
        "astHash": "25ad848734ffcc12",
        "contextPath": [
          "ArchitectureConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Create a sample configuration file\n   */\n  createSampleConfig(outputPath: string): void {\n    const sampleConfig = {\n      layers: {\n        app: ['src/app/**'],\n        core: ['src/core/**'],\n        infra: ['src/infra/**'],\n        utils: ['src/utils/**'],\n      },\n      rules: [\n        {\n          forbid: 'core -> infra',\n          description: 'Core layer should not depend on infrastructure',\n          severity: 'error',\n        },\n        {\n          forbid: 'infra -> app',\n          description: 'Infrastructure should not depend on application layer',\n          severity: 'error',\n        },\n        {\n          forbid: 'utils -> *',\n          description: 'Utilities should be dependency-free',\n          severity: 'warning',\n        },\n      ],\n      settings: {\n        allowSameLayer: true,\n        strictMode: false,\n        defaultSeverity: 'error',\n        ignoreExternal: true,\n      },\n    };\n\n    const yamlContent = yaml.dump(sampleConfig, {\n      indent: 2,\n      noRefs: true,\n      sortKeys: false,\n    });\n\n    fs.writeFileSync(outputPath, yamlContent, 'utf8');\n  }",
        "sourceFileRefId": "da56c761-051a-4bdf-b8cf-c38011c06739",
        "parameters": [
          {
            "name": "outputPath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 39,
          "totalLines": 46,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 13,
          "halsteadVolume": 303.87,
          "halsteadDifficulty": 1.27,
          "maintainabilityIndex": 42.26
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5bb2f123-d6b7-5b2e-b165-92479905f729",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3e68f25375542030d32cc95900b99022cc1071bb0539d46ececef1f36b045bab",
        "contentId": "16c9b4b97bc141bdf32a13eaeb61a595a1d5a5a20c8146f19146ac4198a142f9",
        "name": "deleteFunctionsSafely",
        "displayName": "deleteFunctionsSafely",
        "signature": "async deleteFunctionsSafely(functions: FunctionInfo[], options: FunctionDeletionOptions & { tsConfigPath?: string } = {}): Promise<DeletionResult>",
        "signatureHash": "6f8e30f5c7ee049af58baaa589733239c338d35922cacefd25566f66d237b403",
        "filePath": "/src/tools/function-deleter.ts",
        "fileHash": "8fc397ad4e051e3a8cc198b6b43e69ae",
        "startLine": 421,
        "endLine": 441,
        "startColumn": 0,
        "endColumn": 603,
        "astHash": "2d4f4da43a60c91a",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Utility function to create a deleter and delete functions in one call\n */\nexport async function deleteFunctionsSafely(\n  functions: FunctionInfo[],\n  options: FunctionDeletionOptions & { tsConfigPath?: string } = {}\n): Promise<DeletionResult> {\n  const deleterOptions: { tsConfigPath?: string; verbose?: boolean } = {};\n  \n  if (options.tsConfigPath) {\n    deleterOptions.tsConfigPath = options.tsConfigPath;\n  }\n  if (options.verbose !== undefined) {\n    deleterOptions.verbose = options.verbose;\n  }\n  \n  const deleter = new SafeFunctionDeleter(deleterOptions);\n\n  try {\n    return await deleter.deleteFunctions(functions, options);\n  } finally {\n    deleter.dispose();\n  }\n}",
        "sourceFileRefId": "b377269f-af90-4054-bdd2-8550779283ca",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "FunctionDeletionOptions & { tsConfigPath?: string }",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 18,
          "totalLines": 26,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 6,
          "halsteadVolume": 210.83,
          "halsteadDifficulty": 4.12,
          "maintainabilityIndex": 62.61
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "02c58e07-91c9-5762-ac7f-31a721107ba4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "98da47dfc69db955e5bbcc87362901d157699f3b571e11a5aa07da56b03ebb0e",
        "contentId": "5738a6be57c94b6725d759780e3bd9305f7a910422596f8f3bc6b2c515a70509",
        "name": "getAvailableScopes",
        "displayName": "ConfigManager.getAvailableScopes",
        "signature": "public ConfigManager.getAvailableScopes(): string[]",
        "signatureHash": "841d35d48dba3f9953b641acce1c6b45c4e09959db16f36a66a0b38baa62ff52",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 439,
        "endLine": 442,
        "startColumn": 2,
        "endColumn": 146,
        "astHash": "64f1d5d0471de301",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get available scope names\n   */\n  getAvailableScopes(): string[] {\n    const config = this.config || this.getDefaults();\n    return Object.keys(config.scopes || { src: {} });\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 68.11,
          "halsteadDifficulty": 1.83,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9e412f29-2c1e-52a5-a2b5-2ba2c505f164",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "08a261792f5eb7162ba1becaba63a818e6f4ac196a4d7ab770118bb140b2afdf",
        "contentId": "37fb3ea2c8b31fb51b4a72778f5258fd4fd945dd393c745c0672ce45e8a76440",
        "name": "clearCache",
        "displayName": "ConfigManager.clearCache",
        "signature": "public ConfigManager.clearCache(): void",
        "signatureHash": "14483820067e0bfcb25acc03651ebfc2d9830ad83a82ff3d8cc617364b858758",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 447,
        "endLine": 452,
        "startColumn": 2,
        "endColumn": 194,
        "astHash": "58c011ccff687ca6",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Invalidate cached config (for testing)\n   */\n  clearCache(): void {\n    this.config = undefined;\n    this.explorer.clearCaches();\n    this.thresholdManager = new ThresholdConfigManager();\n    ConfigManager.lightweightCache = undefined;\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 74.01,
          "halsteadDifficulty": 1.65,
          "maintainabilityIndex": 96.6
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cad702ed-2c8a-5543-beb8-d226e47d899f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bacf747f01c7b47eacdfc9718a72c7de99b3738e56ed2ee8d4f7806bacc1e956",
        "contentId": "2aaa99ee04bbe98bba94d66f7f8df112629238226038ed71c8e5a926261a041f",
        "name": "formatClusteringAnalysis",
        "displayName": "PropertyClusteringAnalyzer.formatClusteringAnalysis",
        "signature": "public PropertyClusteringAnalyzer.formatClusteringAnalysis(analysis: ClusteringAnalysis): string",
        "signatureHash": "f4c9d3841117fa1be19530db98adc2ef5eafcfd5a880c3a46757fcf95c5bc6c4",
        "filePath": "/src/analyzers/type-insights/property-clustering.ts",
        "fileHash": "f7996eb9f71334e448377adca30eebcf",
        "startLine": 448,
        "endLine": 488,
        "startColumn": 2,
        "endColumn": 1486,
        "astHash": "bcf5d2d8e8f79d05",
        "contextPath": [
          "PropertyClusteringAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Format clustering analysis for display\n   */\n  formatClusteringAnalysis(analysis: ClusteringAnalysis): string {\n    const lines: string[] = [];\n    \n    lines.push(`\\nüéØ Property Clustering Analysis for '${analysis.typeName}'\\n`);\n    \n    // Overview\n    lines.push('üìä Overview:');\n    lines.push(`  Total Properties: ${analysis.totalProperties}`);\n    lines.push(`  Clusters Found: ${analysis.clusters.length}`);\n    lines.push(`  Isolated Properties: ${analysis.isolatedProperties.length}`);\n    lines.push(`  Clusterability Score: ${Math.round(analysis.clusterabilityScore * 100)}%`);\n    lines.push('');\n\n    // Clusters\n    if (analysis.clusters.length > 0) {\n      lines.push('üé™ Property Clusters:');\n      for (const cluster of analysis.clusters) {\n        lines.push(`  ${cluster.suggestedName}: {${cluster.properties.join(', ')}} (${Math.round(cluster.similarity * 100)}% similarity)`);\n        lines.push(`    Used together in ${cluster.totalFunctions} functions`);\n      }\n      lines.push('');\n    }\n\n    // Isolated properties\n    if (analysis.isolatedProperties.length > 0) {\n      lines.push('üèùÔ∏è  Isolated Properties:');\n      lines.push(`  ${analysis.isolatedProperties.join(', ')}`);\n      lines.push('');\n    }\n\n    // Recommendations\n    if (analysis.recommendations.length > 0) {\n      lines.push('üí° Refactoring Recommendations:');\n      analysis.recommendations.forEach((rec, index) => {\n        lines.push(`  ${index + 1}. ${rec}`);\n      });\n      lines.push('');\n    }\n\n    return lines.join('\\n');\n  }",
        "sourceFileRefId": "54e91b79-8e45-4877-b3f8-956036f629df",
        "parameters": [
          {
            "name": "analysis",
            "type": "ClusteringAnalysis",
            "typeSimple": "ClusteringAnalysis",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 31,
          "totalLines": 46,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 3,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 7,
          "codeToCommentRatio": 4.43,
          "halsteadVolume": 1086.43,
          "halsteadDifficulty": 8.14,
          "maintainabilityIndex": 37.15
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e06e2933-d107-5da1-a6ee-5f219bfb4a7f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "187d3d7eabc1a536b224ec55eb0cf8fa019910a9d3104b57a49bd7b6ffb75d3f",
        "contentId": "ec74e5b0c99f96d74216b7ef1df6b4bf1c5eb80a7b20f1854882fd18172bfefe",
        "name": "clear",
        "displayName": "RuntimeTraceIntegrator.clear",
        "signature": "public RuntimeTraceIntegrator.clear(): void",
        "signatureHash": "38af92d0025c28ddc8f633e8cf753f409a4b79633c75491eabdca4b2dc6033c5",
        "filePath": "/src/analyzers/runtime-trace-integrator.ts",
        "fileHash": "c394dab5dbdc120b943182efb7ab5c0e",
        "startLine": 450,
        "endLine": 456,
        "startColumn": 2,
        "endColumn": 195,
        "astHash": "bfcbf69ed9013c12",
        "contextPath": [
          "RuntimeTraceIntegrator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear loaded data\n   */\n  clear(): void {\n    this.coverageData.clear();\n    this.executionTraces = [];\n    this.executionTraceIndex.clear();\n    this.functionMetadata.clear();\n    this.fileLineOffsetsCache.clear();\n  }",
        "sourceFileRefId": "9ac702b1-4937-421b-83d1-9c50652a401a",
        "parameters": [],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 103.61,
          "halsteadDifficulty": 2.1,
          "maintainabilityIndex": 90.48
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "49d21a1f-12c7-5328-8131-47f81401609b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d9a9e45e7eaa1bba053d2f8b2d41d81ca7652e698ae18bbc61af21a6b236a9c7",
        "contentId": "7b1f881f5ec51412faa86953325c3748544cc3067e9e0a606592ed73cdb548e6",
        "name": "getStatistics",
        "displayName": "StagedAnalysisEngine.getStatistics",
        "signature": "public StagedAnalysisEngine.getStatistics(): AnalysisStatistics",
        "signatureHash": "8a7ab8d555b2dee561308191ce2ed85ee83b699552431f91e0193c10ed900354",
        "filePath": "/src/analyzers/staged-analysis/staged-analysis-engine-refactored.ts",
        "fileHash": "58848bdf58ff2999e32b4f49309f338b",
        "startLine": 455,
        "endLine": 457,
        "startColumn": 2,
        "endColumn": 80,
        "astHash": "ac909446140e606d",
        "contextPath": [
          "StagedAnalysisEngine"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get analysis statistics\r\n   */\r\n  getStatistics(): AnalysisStatistics {\r\n    return { ...this.statistics };\r\n  }",
        "sourceFileRefId": "5cbfe05d-b327-4932-95f8-9cf2b23e0a82",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "554de7ae-c767-54b8-a5b4-6358ef4780e0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2b4d53fd5041e77434119c255dfda99df420551932b8d91f06de42d0e3d55dc5",
        "contentId": "f32bb1235984f2ddeb2ee58d985672ffd58377f0ab6c68ecc97e8e9b3503eba4",
        "name": "getEdges",
        "displayName": "StagedAnalysisEngine.getEdges",
        "signature": "public StagedAnalysisEngine.getEdges(): IdealCallEdge[]",
        "signatureHash": "ebf1daf15cd7fb16136a37fb02d17be43ab37d52b5e47ffa66a077153f9008d9",
        "filePath": "/src/analyzers/staged-analysis/staged-analysis-engine-refactored.ts",
        "fileHash": "58848bdf58ff2999e32b4f49309f338b",
        "startLine": 462,
        "endLine": 464,
        "startColumn": 2,
        "endColumn": 71,
        "astHash": "2865087a182e3084",
        "contextPath": [
          "StagedAnalysisEngine"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get all resolved edges\r\n   */\r\n  getEdges(): IdealCallEdge[] {\r\n    return [...this.state.edges];\r\n  }",
        "sourceFileRefId": "5cbfe05d-b327-4932-95f8-9cf2b23e0a82",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 13.93,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f5ddb1cf-267c-5245-a627-b616b93a5312",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "22377ace72fac4a9e34238ef5734a9d1fb4833747e5f1818bb0651674aafa85e",
        "contentId": "09a985c2da17b64f2131a90d8ba16e1bf4cc6eafa55489018f291ae620efbf56",
        "name": "calculateCondensationGraph",
        "displayName": "TypeDependencyAnalyzer.calculateCondensationGraph",
        "signature": "public TypeDependencyAnalyzer.calculateCondensationGraph(dependencies: TypeDependency[]): {\n    nodes: any[]; // eslint-disable-line @typescript-eslint/no-explicit-any\n    edges: Array<{ from: string; to: string; count: number }>;\n  }",
        "signatureHash": "0b542818bffeaa2a3973dade315b908d134d2c130ec3f4cf73684165ea20776a",
        "filePath": "/src/analyzers/type-dependency-analyzer.ts",
        "fileHash": "e9557ede2981b324a2c27dec6ed36039",
        "startLine": 463,
        "endLine": 482,
        "startColumn": 2,
        "endColumn": 708,
        "astHash": "7334e460c732a438",
        "contextPath": [
          "TypeDependencyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Calculate condensation graph (DAG of type SCCs)\n   */\n  calculateCondensationGraph(dependencies: TypeDependency[]): {\n    nodes: any[]; // eslint-disable-line @typescript-eslint/no-explicit-any\n    edges: Array<{ from: string; to: string; count: number }>;\n  } {\n    // Filter and enhance dependencies with targetTypeId\n    const enhancedDependencies: TypeDependency[] = [];\n    \n    for (const dep of dependencies) {\n      const targetTypeId = dep.targetTypeId || this.getTypeIdFromName(dep.targetTypeName);\n      if (targetTypeId) {\n        enhancedDependencies.push({\n          ...dep,\n          targetTypeId\n        });\n      }\n    }\n\n    const sccAnalyzer = new TypeSCCAnalyzer();\n    return sccAnalyzer.calculateCondensationGraph(enhancedDependencies);\n  }",
        "sourceFileRefId": "4c50873c-9d83-4ace-a247-7f10f41fe5c4",
        "parameters": [
          {
            "name": "dependencies",
            "type": "TypeDependency[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 25,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 4.25,
          "halsteadVolume": 185.47,
          "halsteadDifficulty": 2.4,
          "maintainabilityIndex": 64.68
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c9ee5626-1051-52c0-8433-c60a1a4c411d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c7e93c0ccc7793c66514803803a92d46624e261b67299e6c2c57df31989f4b08",
        "contentId": "b51345609a7350003d81c71cf4d2cba87e6eea3120e5ba6e39911c546f8e0f8c",
        "name": "clearCache",
        "displayName": "IDResolver.clearCache",
        "signature": "public IDResolver.clearCache(): void",
        "signatureHash": "ff8fac5a4e878f7fc9aad357e2c3e56ede3e47b0ddfad57b03c4f0508625964e",
        "filePath": "/src/utils/id-resolver.ts",
        "fileHash": "93afb1cb352f561c13b12ad9c65842c3",
        "startLine": 464,
        "endLine": 467,
        "startColumn": 2,
        "endColumn": 87,
        "astHash": "78122f463e8bdfe8",
        "contextPath": [
          "IDResolver"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear internal caches\n   */\n  clearCache(): void {\n    this.functionCache = null;\n    this.shortIdCache = null;\n  }",
        "sourceFileRefId": "086f378a-34a4-47d8-9cc6-3c7ae625cbd4",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 16.25,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "17ae6c26-41bd-54ef-b40e-1faac7cbb5ee",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a43146eb7b1baa02c8e2ae8af0ad58af143c256e0de087ad76191031e123585e",
        "contentId": "de2e80221bfb0a3d3464433021be0db7614e2da2d58519175fbba0cb9cacc286",
        "name": "getCurrentScanConfigHash",
        "displayName": "ConfigManager.getCurrentScanConfigHash",
        "signature": "public async ConfigManager.getCurrentScanConfigHash(): Promise<string>",
        "signatureHash": "267ec6d3e4881bc7f861b1f969c9741f845f92525dd3d4bccf32df1163a471cc",
        "filePath": "/src/core/config.ts",
        "fileHash": "942f323d64c15d1c6bc340dffc374a35",
        "startLine": 472,
        "endLine": 475,
        "startColumn": 2,
        "endColumn": 143,
        "astHash": "2476aa3089d718fa",
        "contextPath": [
          "ConfigManager"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get current scan configuration hash\n   */\n  async getCurrentScanConfigHash(): Promise<string> {\n    const config = await this.load();\n    return this.generateScanConfigHash(config);\n  }",
        "sourceFileRefId": "e3e128ba-1612-4092-a5cd-36433d65fdb3",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 38.04,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f9cb73d4-8d04-509a-971c-f176c39b4ee7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4e092a7b80626926a85e86242046cde7968f30bf13e4a148abeb7eda4a624865",
        "contentId": "1ff2b90fbe5d36d0281a5ccf54ccfa77e278da9e27dcc0ae3f00af1aedcb9a37",
        "name": "resolveID",
        "displayName": "resolveID",
        "signature": "async resolveID(env: CommandEnvironment, input: string, options?: IDResolutionOptions): Promise<IDResolutionResult | null>",
        "signatureHash": "2b63efa5ece69e9a0bb475bc9e2114a1ab9602e3784f78a0ffdd4732ded65858",
        "filePath": "/src/utils/id-resolver.ts",
        "fileHash": "93afb1cb352f561c13b12ad9c65842c3",
        "startLine": 473,
        "endLine": 480,
        "startColumn": 0,
        "endColumn": 237,
        "astHash": "37b38b73be8f5e83",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Helper function to create and use ID resolver\n */\nexport async function resolveID(\n  env: CommandEnvironment, \n  input: string, \n  options?: IDResolutionOptions\n): Promise<IDResolutionResult | null> {\n  const resolver = new IDResolver(env);\n  return resolver.resolveID(input, options);\n}",
        "sourceFileRefId": "086f378a-34a4-47d8-9cc6-3c7ae625cbd4",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "input",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "IDResolutionOptions",
            "typeSimple": "IDResolutionOptions",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 66.61,
          "halsteadDifficulty": 1.45,
          "maintainabilityIndex": 90.67
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8202c312-289c-5a1e-b112-d09d41981e6a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bbb547e237c40ed03158529a38142c06d169f2daad814ecb2df45bfaad3e81a0",
        "contentId": "638f1a1a1784bdb48fafa8a785b5ab3c49984660290952f2db9e787aaa7849dc",
        "name": "getWeights",
        "displayName": "QualityScorerV16.getWeights",
        "signature": "public QualityScorerV16.getWeights(): QualityScoreWeights",
        "signatureHash": "f61788320c1d0b4781e1cf2050dd7d62c3458f9d2e286d3c8d72463db45e0099",
        "filePath": "/src/utils/quality-scorer-v16.ts",
        "fileHash": "a45030f317877d30ba7f5245e723951d",
        "startLine": 481,
        "endLine": 483,
        "startColumn": 2,
        "endColumn": 73,
        "astHash": "dceff88990d11e49",
        "contextPath": [
          "QualityScorerV16"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get current weight configuration\n   */\n  getWeights(): QualityScoreWeights {\n    return { ...this.weights };\n  }",
        "sourceFileRefId": "d6f5752b-8b86-48f6-88b3-2bfbc1ee6eff",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "702b663a-c2d6-52b3-a774-69960d6488de",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3bb80f591c4727e8ac7c1f243b6663445e454b8888eaa0b82fc74cb1ee82677c",
        "contentId": "675d21cc3df0b3ae00d5e554d52980721176ff92a8c1f18b9a469aafa0df7cae",
        "name": "resolveMultipleIDs",
        "displayName": "resolveMultipleIDs",
        "signature": "async resolveMultipleIDs(env: CommandEnvironment, inputs: string[], options?: IDResolutionOptions): Promise<Array<{ input: string; result: IDResolutionResult | null }>>",
        "signatureHash": "17b7784441844f792490d150123b2b3088d41fdbaf1b572899bea27e4fac2ac5",
        "filePath": "/src/utils/id-resolver.ts",
        "fileHash": "93afb1cb352f561c13b12ad9c65842c3",
        "startLine": 485,
        "endLine": 492,
        "startColumn": 0,
        "endColumn": 291,
        "astHash": "9b78f791d1d98103",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "async",
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Helper function to resolve multiple IDs\n */\nexport async function resolveMultipleIDs(\n  env: CommandEnvironment,\n  inputs: string[],\n  options?: IDResolutionOptions\n): Promise<Array<{ input: string; result: IDResolutionResult | null }>> {\n  const resolver = new IDResolver(env);\n  return resolver.resolveMultipleIDs(inputs, options);\n}",
        "sourceFileRefId": "086f378a-34a4-47d8-9cc6-3c7ae625cbd4",
        "parameters": [
          {
            "name": "env",
            "type": "CommandEnvironment",
            "typeSimple": "CommandEnvironment",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "inputs",
            "type": "string[]",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "IDResolutionOptions",
            "typeSimple": "IDResolutionOptions",
            "position": 2,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 3,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 84,
          "halsteadDifficulty": 1.36,
          "maintainabilityIndex": 88.93
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "f30038de-bce9-59bd-b013-9a8d2954c10b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "cd3c9c7cf2be863c773e4b34c33e2c0b06c13a906a3ab2d3761ca40a3e1b60fc",
        "contentId": "7ce747325d092a98321f8e37f435e18afcb88dc23a741763fa8351986af8368e",
        "name": "getAvailableDetectors",
        "displayName": "SimilarityManager.getAvailableDetectors",
        "signature": "public SimilarityManager.getAvailableDetectors(): string[]",
        "signatureHash": "2903a0addb61b88cc10d23cad25f21c6dae59f1d1843d2d59020ad3dafe0a6e7",
        "filePath": "/src/similarity/similarity-manager.ts",
        "fileHash": "95ee94bcc7c6eefc3d6def9dadb3b140",
        "startLine": 486,
        "endLine": 488,
        "startColumn": 2,
        "endColumn": 87,
        "astHash": "ad5ba63b05f5d8c7",
        "contextPath": [
          "SimilarityManager"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "getAvailableDetectors(): string[] {\n    return Array.from(this.detectors.keys());\n  }",
        "sourceFileRefId": "a87a9fdc-7984-49a3-9ab8-cac12b70cdfc",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 38.04,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4fcbbb5e-ef34-5a8d-aa92-1f5ab6349bca",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0a68d64d7d5889ec29344ea28ec860b1c5bca8b54da32e835e9ffac1fb202014",
        "contentId": "0db4afe815e0afd6e3b2b314500b3c3c26914c1da6f9e20b6b5d04762e9985e4",
        "name": "updateWeights",
        "displayName": "QualityScorerV16.updateWeights",
        "signature": "public QualityScorerV16.updateWeights(newWeights: Partial<QualityScoreWeights>): void",
        "signatureHash": "bf219bf3cf3e734c217fc27a98ea7d71c3d6a539970f572544a95902ae718f6b",
        "filePath": "/src/utils/quality-scorer-v16.ts",
        "fileHash": "a45030f317877d30ba7f5245e723951d",
        "startLine": 488,
        "endLine": 496,
        "startColumn": 2,
        "endColumn": 377,
        "astHash": "aa3812187c3eb679",
        "contextPath": [
          "QualityScorerV16"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Update weight configuration\n   */\n  updateWeights(newWeights: Partial<QualityScoreWeights>): void {\n    this.weights = { ...this.weights, ...newWeights };\n\n    // Ensure weights sum to 1.0\n    const total = Object.values(this.weights).reduce((sum, weight) => sum + weight, 0);\n    if (Math.abs(total - 1.0) > 0.01) {\n      throw new Error(`Quality score weights must sum to 1.0, but sum to ${total}`);\n    }\n  }",
        "sourceFileRefId": "d6f5752b-8b86-48f6-88b3-2bfbc1ee6eff",
        "parameters": [
          {
            "name": "newWeights",
            "type": "Partial<QualityScoreWeights>",
            "typeSimple": "Partial<QualityScoreWeights>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 14,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 4,
          "codeToCommentRatio": 1.75,
          "halsteadVolume": 188.02,
          "halsteadDifficulty": 4.05,
          "maintainabilityIndex": 85.78
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "76983712-239b-54ec-acdf-a4df25c188e7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b9604436893ee37ef4fb33a9b72b534f1954af46857a3203eb0ca3b2b744226b",
        "contentId": "6d8d3bda8966d03575b808105c464ee36c32758a2ffaeb0d434c22ec96f50782",
        "name": "getThresholds",
        "displayName": "QualityScorerV16.getThresholds",
        "signature": "public QualityScorerV16.getThresholds(): QualityScorerThresholds",
        "signatureHash": "899f7a45950b010ee991f1ea0eedc0b20df90fc6b043377039bb37da44e721a7",
        "filePath": "/src/utils/quality-scorer-v16.ts",
        "fileHash": "a45030f317877d30ba7f5245e723951d",
        "startLine": 501,
        "endLine": 503,
        "startColumn": 2,
        "endColumn": 83,
        "astHash": "4cdeb94e6c7a5140",
        "contextPath": [
          "QualityScorerV16"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get current threshold configuration\n   */\n  getThresholds(): QualityScorerThresholds {\n    return { ...this.thresholds };\n  }",
        "sourceFileRefId": "d6f5752b-8b86-48f6-88b3-2bfbc1ee6eff",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1ba471bd-af07-5c69-854f-eee05044db35",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0dc69243ae415ff340010626b2b07d3885c1c6e75e728b10dd11cebecffb014b",
        "contentId": "698311dcc405d0eb9c9087bda2113ad7e946b7ca4784775155cba01992f22342",
        "name": "getPreset",
        "displayName": "getPreset",
        "signature": "getPreset(id: string): ProjectPreset | undefined",
        "signatureHash": "09d80ee9b0df64f2ca9c0f241678a3c8c51adc9360bcc96282bea60c679f6ad1",
        "filePath": "/src/config/presets.ts",
        "fileHash": "8a46f7ee286af5e390851e37d9f471b0",
        "startLine": 502,
        "endLine": 504,
        "startColumn": 0,
        "endColumn": 127,
        "astHash": "8ac5eefb7fd42acf",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Get preset by ID\n */\nexport function getPreset(id: string): ProjectPreset | undefined {\n  return BUILTIN_PRESETS.find(preset => preset.id === id);\n}",
        "sourceFileRefId": "b86ce7b9-173a-4862-8e8d-e6f07fccff67",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 46.51,
          "halsteadDifficulty": 2.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "db5db47c-1d61-5526-a17b-27b4b6f4eeac",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bec8604b422eba171c3f17dec64b5523e95dcb11709482c6171965aca7dce830",
        "contentId": "b346fe0ec601befd098fa0af78aaf8e36067f86ab14b792c14ea08613063a523",
        "name": "getCacheStats",
        "displayName": "UnifiedASTAnalyzer.getCacheStats",
        "signature": "public UnifiedASTAnalyzer.getCacheStats(): void",
        "signatureHash": "67fd7498e71164425bae77158825ca96935ff74e6b93954d579d785c107bb811",
        "filePath": "/src/analyzers/unified-ast-analyzer.ts",
        "fileHash": "f53dbd922da88e49915af9d241fd3bb0",
        "startLine": 506,
        "endLine": 508,
        "startColumn": 2,
        "endColumn": 57,
        "astHash": "2c76bc78ab301406",
        "contextPath": [
          "UnifiedASTAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cache statistics for monitoring\n   */\n  getCacheStats() {\n    return this.cache.getStats();\n  }",
        "sourceFileRefId": "4d3f094f-b84e-4c8e-a7c4-f7d839d587dd",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "8c057063-038b-50af-9882-5cd2de9b367d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bf3b67e3d2c610ed9f3de48b4938a4e9d22987a5997f4209fba13fde799ed417",
        "contentId": "450e069fb27b769991a219e993e3635f0e5ef4962b89fd635c83aca586ad32da",
        "name": "updateThresholds",
        "displayName": "QualityScorerV16.updateThresholds",
        "signature": "public QualityScorerV16.updateThresholds(newThresholds: Partial<QualityScorerThresholds>): void",
        "signatureHash": "686eb0c47c7a848b8331aa0dfc6850653197f30264999a741cafeddb1aa6314a",
        "filePath": "/src/utils/quality-scorer-v16.ts",
        "fileHash": "a45030f317877d30ba7f5245e723951d",
        "startLine": 508,
        "endLine": 513,
        "startColumn": 2,
        "endColumn": 213,
        "astHash": "90121b62223027fe",
        "contextPath": [
          "QualityScorerV16"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Update threshold configuration\n   */\n  updateThresholds(newThresholds: Partial<QualityScorerThresholds>): void {\n    this.thresholds = { ...this.thresholds, ...newThresholds };\n\n    // Validate threshold consistency\n    this.validateThresholds();\n  }",
        "sourceFileRefId": "d6f5752b-8b86-48f6-88b3-2bfbc1ee6eff",
        "parameters": [
          {
            "name": "newThresholds",
            "type": "Partial<QualityScorerThresholds>",
            "typeSimple": "Partial<QualityScorerThresholds>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 1,
          "halsteadVolume": 46.51,
          "halsteadDifficulty": 1.93,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7766c815-f7fb-5bb2-9b60-bfed9da580f9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "fde64f766ea4056dedf0d28eeb38ce6a3976a146bf91a773735f33e4f0ffa513",
        "contentId": "5d969b26b0e227c47abf0448fcb25f4d2f08bb86aef3c881e746370a8df0858b",
        "name": "getPresetsByCategory",
        "displayName": "getPresetsByCategory",
        "signature": "getPresetsByCategory(category: string): ProjectPreset[]",
        "signatureHash": "1e43da999088927c6e1124f43be0c0d2ebc530ad31c145c4e729f5812477eff6",
        "filePath": "/src/config/presets.ts",
        "fileHash": "8a46f7ee286af5e390851e37d9f471b0",
        "startLine": 509,
        "endLine": 511,
        "startColumn": 0,
        "endColumn": 148,
        "astHash": "a74dbe2eaaf595ef",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Get presets by category\n */\nexport function getPresetsByCategory(category: string): ProjectPreset[] {\n  return BUILTIN_PRESETS.filter(preset => preset.category === category);\n}",
        "sourceFileRefId": "b86ce7b9-173a-4862-8e8d-e6f07fccff67",
        "parameters": [
          {
            "name": "category",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 46.51,
          "halsteadDifficulty": 2.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "af5c5379-9a5a-567e-83ff-5034eff8e4ff",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "31d104492085d0599f0030bdcbac07a6bb67ddce34b8fc7afef43906366e671a",
        "contentId": "f09e44611fd632a5c4a872d6bcc2eba4b8c09b85db97d94f3469a85059779768",
        "name": "cleanup",
        "displayName": "UnifiedASTAnalyzer.cleanup",
        "signature": "public UnifiedASTAnalyzer.cleanup(): number",
        "signatureHash": "79ab535bea2941a93133cc87515873847124e083544ad5356a02453416a186da",
        "filePath": "/src/analyzers/unified-ast-analyzer.ts",
        "fileHash": "f53dbd922da88e49915af9d241fd3bb0",
        "startLine": 513,
        "endLine": 515,
        "startColumn": 2,
        "endColumn": 58,
        "astHash": "739600797db2635a",
        "contextPath": [
          "UnifiedASTAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Cleanup expired entries and get cleanup count\n   */\n  cleanup(): number {\n    return this.cache.cleanup();\n  }",
        "sourceFileRefId": "4d3f094f-b84e-4c8e-a7c4-f7d839d587dd",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 16.25,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9f68be6b-8e42-5451-8713-389d0f439d76",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "56df05ab58085b188355988f9467603d34df17433dccab2f25e3d3c998d9361e",
        "contentId": "378a37f711062e84e23c36a19beb28939123782fbcae55da11d553fe33ee7c9d",
        "name": "analyzeBatch",
        "displayName": "TypeSafetyAnalyzer.analyzeBatch",
        "signature": "public TypeSafetyAnalyzer.analyzeBatch(functions: FunctionInfo[]): {\n    results: Array<{ functionInfo: FunctionInfo; score: TypeSafetyScore }>;\n    statistics: {\n      averageScore: number;\n      totalAnyTypes: number;\n      untypedFunctions: number;\n      functionsWithExplicitTypes: number;\n      commonIssues: Array<{ type: string; count: number }>;\n    };\n  }",
        "signatureHash": "c84d018dd6188488afa83361bf00083d1e8307122b9d0fa5dbceed897b30cb7b",
        "filePath": "/src/analyzers/type-safety-analyzer.ts",
        "fileHash": "bc3c1527b95853d186809a4e58d03180",
        "startLine": 513,
        "endLine": 564,
        "startColumn": 2,
        "endColumn": 1580,
        "astHash": "2d51ed2dfb51f3bb",
        "contextPath": [
          "TypeSafetyAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyzes a batch of functions for type safety patterns\n   */\n  analyzeBatch(functions: FunctionInfo[]): {\n    results: Array<{ functionInfo: FunctionInfo; score: TypeSafetyScore }>;\n    statistics: {\n      averageScore: number;\n      totalAnyTypes: number;\n      untypedFunctions: number;\n      functionsWithExplicitTypes: number;\n      commonIssues: Array<{ type: string; count: number }>;\n    };\n  } {\n    const results = functions.map(func => ({\n      functionInfo: func,\n      score: this.analyze(func),\n    }));\n\n    // Calculate statistics\n    const scores = results.map(r => r.score.score);\n    const averageScore = scores.reduce((a, b) => a + b, 0) / scores.length;\n\n    const totalAnyTypes = results.reduce((sum, r) => sum + r.score.metrics.anyTypeCount, 0);\n\n    const untypedFunctions = results.filter(r => r.score.metrics.untypedParamCount > 0).length;\n\n    const functionsWithExplicitTypes = results.filter(\n      r => r.score.metrics.hasExplicitReturnType\n    ).length;\n\n    // Count common issues\n    const issueCountMap = new Map<string, number>();\n    results.forEach(r => {\n      r.score.issues.forEach(issue => {\n        const key = `${issue.type}-${issue.severity}`;\n        issueCountMap.set(key, (issueCountMap.get(key) || 0) + 1);\n      });\n    });\n\n    const commonIssues = Array.from(issueCountMap.entries())\n      .map(([type, count]) => ({ type, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      results,\n      statistics: {\n        averageScore,\n        totalAnyTypes,\n        untypedFunctions,\n        functionsWithExplicitTypes,\n        commonIssues,\n      },\n    };\n  }",
        "sourceFileRefId": "20b9642e-b578-46f7-99af-70edb81f5293",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 43,
          "totalLines": 57,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 10,
          "commentLines": 5,
          "codeToCommentRatio": 8.6,
          "halsteadVolume": 1215.6,
          "halsteadDifficulty": 7.9,
          "maintainabilityIndex": 29.35
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "65b9e167-c8db-5242-a8bf-83fbbc7f5562",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e3326f041c54da932017d4c238b1298e6df0615c6b3eba4022e01c128131d46b",
        "contentId": "8201e77ef03edc12415ab9f81e662337aaadda7aa16b83d1975af13bb6c256a1",
        "name": "getPresetsByContext",
        "displayName": "getPresetsByContext",
        "signature": "getPresetsByContext(context: Partial<ProjectPreset['context']>): ProjectPreset[]",
        "signatureHash": "a73ffdabab08fb695d146a87d5fc4320965936bcecca0b5e40337b2ee1e721b1",
        "filePath": "/src/config/presets.ts",
        "fileHash": "8a46f7ee286af5e390851e37d9f471b0",
        "startLine": 516,
        "endLine": 523,
        "startColumn": 0,
        "endColumn": 334,
        "astHash": "c66413e50d15a55d",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * Get presets by context\n */\nexport function getPresetsByContext(context: Partial<ProjectPreset['context']>): ProjectPreset[] {\n  return BUILTIN_PRESETS.filter(preset => {\n    const presetContext = preset.context;\n    return Object.entries(context).every(\n      ([key, value]) => !value || presetContext[key as keyof typeof presetContext] === value\n    );\n  });\n}",
        "sourceFileRefId": "b86ce7b9-173a-4862-8e8d-e6f07fccff67",
        "parameters": [
          {
            "name": "context",
            "type": "Partial<ProjectPreset['context']>",
            "typeSimple": "Partial<ProjectPreset['context']>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 2,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 167.37,
          "halsteadDifficulty": 4.59,
          "maintainabilityIndex": 83.53
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a38424a8-5f6b-5ae1-8f1c-cb08026132c3",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c7ed94c88e72d0ad66161011944e990b9194354f72597353178da8e3c3917570",
        "contentId": "06240aa4aef9950d86a901f3dc859deb33870b31ea70048111274d1806525dc9",
        "name": "getDetailedResults",
        "displayName": "BehavioralFingerprintAnalyzer.getDetailedResults",
        "signature": "public async BehavioralFingerprintAnalyzer.getDetailedResults(snapshotId?: string): Promise<BehavioralCluster[]>",
        "signatureHash": "af3821d6cad2fc1d73081c123d9220bb8a76095c02fdccd9385e76ac4fbb9c4d",
        "filePath": "/src/analyzers/type-insights/behavioral-fingerprint-analyzer.ts",
        "fileHash": "64d1c9d1eb0d55962c02c32b0b5b0987",
        "startLine": 520,
        "endLine": 527,
        "startColumn": 2,
        "endColumn": 396,
        "astHash": "90fd57fa57f43e28",
        "contextPath": [
          "BehavioralFingerprintAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get detailed behavioral clustering results (used by CLI)\n   */\n  async getDetailedResults(snapshotId?: string): Promise<BehavioralCluster[]> {\n    try {\n      const behavioralInfo = await this.loadBehavioralInformation(snapshotId);\n      return await this.performBehavioralClustering(behavioralInfo);\n    } catch (error) {\n      throw new Error(`Failed to get detailed behavioral results: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }",
        "sourceFileRefId": "011c9f5e-0031-4575-a3f0-a8af740aab0e",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 3,
          "cognitiveComplexity": 3,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 108,
          "halsteadDifficulty": 2.31,
          "maintainabilityIndex": 86.58
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d134430b-69ce-5dee-8c3a-fd7bc9041bcd",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e4d0639154e7fc2d57ed8922a16b6452487e528ef4243e0a12221e3d5b433fa0",
        "contentId": "b94e59dc216002d6036b2ebb227f516c12e80ce5bdf7b066cc160ace7081388f",
        "name": "dispose",
        "displayName": "UnifiedASTAnalyzer.dispose",
        "signature": "public UnifiedASTAnalyzer.dispose(): void",
        "signatureHash": "67fd7498e71164425bae77158825ca96935ff74e6b93954d579d785c107bb811",
        "filePath": "/src/analyzers/unified-ast-analyzer.ts",
        "fileHash": "f53dbd922da88e49915af9d241fd3bb0",
        "startLine": 520,
        "endLine": 522,
        "startColumn": 2,
        "endColumn": 47,
        "astHash": "2c76bc78ab301406",
        "contextPath": [
          "UnifiedASTAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear all cached source files and free memory\n   */\n  dispose(): void {\n    this.cache.clear();\n  }",
        "sourceFileRefId": "4d3f094f-b84e-4c8e-a7c4-f7d839d587dd",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5fb27fa6-3504-5676-8bb4-a0692291f424",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0c03c106dfc58426356d249686306b3e304608dbe83b9534c01e599c016db292",
        "contentId": "099a481512a04171c880d05d172aff0ebc39794abd4816417dea2c98b970e35f",
        "name": "dispose",
        "displayName": "InternalCallAnalyzer.dispose",
        "signature": "public InternalCallAnalyzer.dispose(): void",
        "signatureHash": "e6560e1bacee0c57e11d10e555b8169abb2c56df21d73702a963f24c97cb1a64",
        "filePath": "/src/analyzers/internal-call-analyzer.ts",
        "fileHash": "1561872e102999bc5e7148c017640fff",
        "startLine": 524,
        "endLine": 526,
        "startColumn": 2,
        "endColumn": 91,
        "astHash": "64d0c1c7d0dfc871",
        "contextPath": [
          "InternalCallAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clean up resources\n   */\n  dispose(): void {\n    // No cleanup needed - project is shared and managed externally\n  }",
        "sourceFileRefId": "67b71908-fcaf-4b71-bb03-7828aa0e69d0",
        "parameters": [],
        "metrics": {
          "linesOfCode": 2,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 0.5,
          "halsteadVolume": 0,
          "halsteadDifficulty": 0,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "550f66c3-36e2-579f-9d02-743e56ce361b",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "aac95443bc6b9f950bd9c2dbc899968a173981e72b3498e9ddffd90baaac34ff",
        "contentId": "a1f1d20f10c6121c5109ebe90c077efafb76a66d43fc00c63e63441eb7cc0d31",
        "name": "getHashCacheStats",
        "displayName": "UnifiedASTAnalyzer.getHashCacheStats",
        "signature": "public UnifiedASTAnalyzer.getHashCacheStats(): void",
        "signatureHash": "6571464ff9e7d67cd9def3498d15f2b3bf79f84db029cca81cd8cd864f52855f",
        "filePath": "/src/analyzers/unified-ast-analyzer.ts",
        "fileHash": "f53dbd922da88e49915af9d241fd3bb0",
        "startLine": 527,
        "endLine": 529,
        "startColumn": 2,
        "endColumn": 66,
        "astHash": "5a345fc44181ccbd",
        "contextPath": [
          "UnifiedASTAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get hash cache statistics\n   */\n  getHashCacheStats() {\n    return globalHashCache.getStats();\n  }",
        "sourceFileRefId": "4d3f094f-b84e-4c8e-a7c4-f7d839d587dd",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 15.51,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cd4fceaa-73c8-5bf7-9c46-cdcbb949b869",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0e06fffaf0775f4eeca1205a0dc92dcdacb161525036e7310a83545b450b8ea5",
        "contentId": "3b80e34534f3aa2ac720596a6d68722e1f2d30a5230dd8c6dd9fda45f39bd049",
        "name": "listPresets",
        "displayName": "listPresets",
        "signature": "listPresets(): Array<{\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n}>",
        "signatureHash": "822cdd1ac9f2862125ebf8b4e7ea6a22bf4be93dca1aa752038a671d6d824bac",
        "filePath": "/src/config/presets.ts",
        "fileHash": "8a46f7ee286af5e390851e37d9f471b0",
        "startLine": 528,
        "endLine": 540,
        "startColumn": 0,
        "endColumn": 277,
        "astHash": "f58f87f8d7dd0b36",
        "contextPath": [],
        "functionType": "function",
        "modifiers": [
          "exported"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": false,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n * List all available preset IDs and names\n */\nexport function listPresets(): Array<{\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n}> {\n  return BUILTIN_PRESETS.map(preset => ({\n    id: preset.id,\n    name: preset.name,\n    description: preset.description,\n    category: preset.category,\n  }));\n}",
        "sourceFileRefId": "b86ce7b9-173a-4862-8e8d-e6f07fccff67",
        "parameters": [],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 18,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 4.33,
          "halsteadVolume": 100.38,
          "halsteadDifficulty": 2.2,
          "maintainabilityIndex": 76.25
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "eaa7b026-dcd8-5e57-b4a2-71468e8c1b3c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "91e4683841570a9adb72808c082e4273f1aa50d5f744e80b0f0d0ef6678e0389",
        "contentId": "c54c93f97a895bae656d19d37f1f38a35fd63996574ac16084893df1f749cb14",
        "name": "getBehavioralConfiguration",
        "displayName": "BehavioralFingerprintAnalyzer.getBehavioralConfiguration",
        "signature": "public BehavioralFingerprintAnalyzer.getBehavioralConfiguration(): BehavioralFingerprintOptions",
        "signatureHash": "f2957ecf3e85a207c11a72a9be71410a25f3ecbc3157b8eed19b472015491f0b",
        "filePath": "/src/analyzers/type-insights/behavioral-fingerprint-analyzer.ts",
        "fileHash": "64d1c9d1eb0d55962c02c32b0b5b0987",
        "startLine": 532,
        "endLine": 534,
        "startColumn": 2,
        "endColumn": 108,
        "astHash": "4749ce1a30613d9b",
        "contextPath": [
          "BehavioralFingerprintAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get configuration specific to behavioral analysis\n   */\n  getBehavioralConfiguration(): BehavioralFingerprintOptions {\n    return { ...this.behavioralOptions };\n  }",
        "sourceFileRefId": "011c9f5e-0031-4575-a3f0-a8af740aab0e",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7e431e75-16b1-5f38-bb67-76fb08349bfe",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d426cb164b13fab1f647ae1f96587d9a59ca181f5223eec0908dd0e1c9ac1947",
        "contentId": "6f002769ecc520da61f234d64245e767b62f8cefdfee46bbc5ce14d5aeb7f0e0",
        "name": "clearHashCache",
        "displayName": "UnifiedASTAnalyzer.clearHashCache",
        "signature": "public UnifiedASTAnalyzer.clearHashCache(): void",
        "signatureHash": "d999944cac7a58f88592d7521e068741a4242bafbbca9f9087dbbd6359f5b780",
        "filePath": "/src/analyzers/unified-ast-analyzer.ts",
        "fileHash": "f53dbd922da88e49915af9d241fd3bb0",
        "startLine": 534,
        "endLine": 536,
        "startColumn": 2,
        "endColumn": 59,
        "astHash": "24905ba3723bb382",
        "contextPath": [
          "UnifiedASTAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear hash cache\n   */\n  clearHashCache(): void {\n    globalHashCache.clear();\n  }",
        "sourceFileRefId": "4d3f094f-b84e-4c8e-a7c4-f7d839d587dd",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 15.51,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3a888753-4209-5055-ad6a-3269f39cca26",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "30ed94ecaf8c002b62030347a7ddab768a7604423d96c14cf8d89af42a2eb868",
        "contentId": "91cf6db16f9520341add1ac086ae35299b559343e8d06f1c9b8bdd690f3bda53",
        "name": "updateBehavioralConfiguration",
        "displayName": "BehavioralFingerprintAnalyzer.updateBehavioralConfiguration",
        "signature": "public BehavioralFingerprintAnalyzer.updateBehavioralConfiguration(newOptions: Partial<BehavioralFingerprintOptions>): void",
        "signatureHash": "55252987d9ef28322637bf9b85e0f9476fb2c71a404a25186cc8cfd60d631899",
        "filePath": "/src/analyzers/type-insights/behavioral-fingerprint-analyzer.ts",
        "fileHash": "64d1c9d1eb0d55962c02c32b0b5b0987",
        "startLine": 539,
        "endLine": 542,
        "startColumn": 2,
        "endColumn": 211,
        "astHash": "471f71438815c7cd",
        "contextPath": [
          "BehavioralFingerprintAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Update behavioral-specific configuration\n   */\n  updateBehavioralConfiguration(newOptions: Partial<BehavioralFingerprintOptions>): void {\n    this.behavioralOptions = { ...this.behavioralOptions, ...newOptions };\n    this.updateConfiguration(newOptions);\n  }",
        "sourceFileRefId": "011c9f5e-0031-4575-a3f0-a8af740aab0e",
        "parameters": [
          {
            "name": "newOptions",
            "type": "Partial<BehavioralFingerprintOptions>",
            "typeSimple": "Partial<BehavioralFingerprintOptions>",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1.33,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 2.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6a236ab8-829b-5edd-9850-c7a50a5ac71f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2edeaf8a8fcf74aafede4d99008246cbba5d606c578fc8bf83e45acff42a25b6",
        "contentId": "813671e451431d461407ad3f64a73fb0bf0343f847e3373cf76f4065399d232b",
        "name": "analyzeEnhancedSCCRisk",
        "displayName": "SCCAnalyzer.analyzeEnhancedSCCRisk",
        "signature": "public SCCAnalyzer.analyzeEnhancedSCCRisk(component: StronglyConnectedComponent, functionMetrics: Map<string, { cyclomaticComplexity: number; linesOfCode: number }>): {\n    basicAnalysis: {\n      totalComplexity: number;\n      totalLines: number;\n      averageComplexity: number;\n      riskLevel: 'high' | 'medium' | 'low';\n    };\n    centralityAnalysis: {\n      centralityScores: Map<string, number>;\n      riskAdjustment: number;\n      centralityDistribution: {\n        functionId: string;\n        centrality: number;\n        adjustedRisk: number;\n      }[];\n    };\n    enhancedRiskLevel: 'critical' | 'high' | 'medium' | 'low';\n    recommendations: string[];\n  }",
        "signatureHash": "211aa350d01a881dd932bb11acf93b9ea5095b84634230af9aa615d8962848f4",
        "filePath": "/src/analyzers/scc-analyzer.ts",
        "fileHash": "11535fa1fa92f6cea52bd9a8c4a9600b",
        "startLine": 542,
        "endLine": 616,
        "startColumn": 2,
        "endColumn": 2681,
        "astHash": "3265feb7ace516ef",
        "contextPath": [
          "SCCAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Enhanced SCC risk analysis with centrality consideration\n   */\n  analyzeEnhancedSCCRisk(\n    component: StronglyConnectedComponent,\n    functionMetrics: Map<string, { cyclomaticComplexity: number; linesOfCode: number }>\n  ): {\n    basicAnalysis: {\n      totalComplexity: number;\n      totalLines: number;\n      averageComplexity: number;\n      riskLevel: 'high' | 'medium' | 'low';\n    };\n    centralityAnalysis: {\n      centralityScores: Map<string, number>;\n      riskAdjustment: number;\n      centralityDistribution: {\n        functionId: string;\n        centrality: number;\n        adjustedRisk: number;\n      }[];\n    };\n    enhancedRiskLevel: 'critical' | 'high' | 'medium' | 'low';\n    recommendations: string[];\n  } {\n    const basicAnalysis = this.analyzeSCCComplexity(component, functionMetrics);\n    const centralityAnalysis = this.analyzeSCCCentrality(component, functionMetrics);\n    \n    // Determine enhanced risk level incorporating centrality\n    const baseRiskScore = basicAnalysis.riskLevel === 'high' ? 3 : \n                         basicAnalysis.riskLevel === 'medium' ? 2 : 1;\n    const adjustedRiskScore = baseRiskScore * centralityAnalysis.riskAdjustment;\n    \n    let enhancedRiskLevel: 'critical' | 'high' | 'medium' | 'low';\n    if (adjustedRiskScore > 4) {\n      enhancedRiskLevel = 'critical';\n    } else if (adjustedRiskScore > 3) {\n      enhancedRiskLevel = 'high';\n    } else if (adjustedRiskScore > 2) {\n      enhancedRiskLevel = 'medium';\n    } else {\n      enhancedRiskLevel = 'low';\n    }\n    \n    // Generate recommendations based on centrality analysis\n    const recommendations: string[] = [];\n    const highCentralityFunctions = centralityAnalysis.centralityDistribution\n      .filter(f => f.centrality > 0.7)\n      .slice(0, 3);\n    \n    if (highCentralityFunctions.length > 0) {\n      recommendations.push(\n        `Focus refactoring on high-centrality functions: ${highCentralityFunctions.map(f => f.functionId).join(', ')}`\n      );\n    }\n    \n    if (centralityAnalysis.riskAdjustment > 1.5) {\n      recommendations.push('Consider breaking this SCC into smaller components to reduce coupling');\n    }\n    \n    if (component.size > 10) {\n      recommendations.push('This large SCC may benefit from architectural redesign');\n    }\n    \n    const centralityVariance = centralityAnalysis.centralityDistribution.reduce((sum, f) => \n      sum + Math.pow(f.centrality - 0.5, 2), 0) / centralityAnalysis.centralityDistribution.length;\n    \n    if (centralityVariance > 0.1) {\n      recommendations.push('Uneven centrality distribution suggests potential architectural issues');\n    }\n    \n    return {\n      basicAnalysis,\n      centralityAnalysis,\n      enhancedRiskLevel,\n      recommendations,\n    };\n  }",
        "sourceFileRefId": "311c8637-01f3-40c7-adba-837d533de127",
        "parameters": [
          {
            "name": "component",
            "type": "StronglyConnectedComponent",
            "typeSimple": "StronglyConnectedComponent",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functionMetrics",
            "type": "Map<string, { cyclomaticComplexity: number; linesOfCode: number }>",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 64,
          "totalLines": 80,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 10,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 9,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 3,
          "commentLines": 5,
          "codeToCommentRatio": 12.8,
          "halsteadVolume": 1239.53,
          "halsteadDifficulty": 9.82,
          "maintainabilityIndex": 18.07
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bde34893-2bef-5288-bff1-aa8efdbdf785",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "16eb6f12497710bd008d71f86b0d05484b913b1eccf975593d016438c1c88d11",
        "contentId": "530e8d00193d77de439c5dd5d849b746e2d5134955b6f957cffbd41d03c7ca45",
        "name": "mergeWithDefaults",
        "displayName": "ThresholdEvaluator.mergeWithDefaults",
        "signature": "public ThresholdEvaluator.mergeWithDefaults(userThresholds?: QualityThresholds): QualityThresholds",
        "signatureHash": "cb193ea3f2ccad4faa998352e9a6bc75e5ad972d036c7d625a41fceff2240d6c",
        "filePath": "/src/utils/threshold-evaluator.ts",
        "fileHash": "6d7018b3b2a13b67bcc1a023d0912607",
        "startLine": 556,
        "endLine": 595,
        "startColumn": 2,
        "endColumn": 914,
        "astHash": "4ad0284efae3425d",
        "contextPath": [
          "ThresholdEvaluator"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Merge user configuration with defaults\n   */\n  mergeWithDefaults(userThresholds?: QualityThresholds): QualityThresholds {\n    const defaults = this.getDefaultQualityThresholds();\n\n    if (!userThresholds) {\n      return defaults;\n    }\n\n    const merged: QualityThresholds = { ...defaults };\n\n    // Merge each threshold configuration\n    const thresholdKeys: (keyof QualityThresholds)[] = [\n      'complexity',\n      'cognitiveComplexity',\n      'lines',\n      'totalLines',\n      'parameters',\n      'nestingLevel',\n      'returnStatements',\n      'branches',\n      'loops',\n      'tryCatch',\n      'asyncAwait',\n      'callbacks',\n      'maintainability',\n      'halsteadVolume',\n      'halsteadDifficulty',\n      'codeToCommentRatio',\n    ];\n\n    thresholdKeys.forEach(key => {\n      if (userThresholds[key]) {\n        merged[key] = {\n          ...(defaults[key] || {}),\n          ...userThresholds[key],\n        };\n      }\n    });\n\n    return merged;\n  }",
        "sourceFileRefId": "0b4dfca5-28d2-40b1-90d2-3058fabc8ca5",
        "parameters": [
          {
            "name": "userThresholds",
            "type": "QualityThresholds",
            "typeSimple": "QualityThresholds",
            "position": 0,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 34,
          "totalLines": 45,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 1,
          "commentLines": 4,
          "codeToCommentRatio": 8.5,
          "halsteadVolume": 272.4,
          "halsteadDifficulty": 4.78,
          "maintainabilityIndex": 45.6
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6c38f61c-85d2-556f-a275-d3b693f9a328",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bea8569b6a341754622c905040fac81cab936d65a6bc684626f9f9f4566eca55",
        "contentId": "537c4a74a46a3411a94bec73447539ec7bcf2c8c2cba104c53d740cb2fb36756",
        "name": "getConverterConfiguration",
        "displayName": "ConverterNetworkAnalyzer.getConverterConfiguration",
        "signature": "public ConverterNetworkAnalyzer.getConverterConfiguration(): ConverterNetworkOptions",
        "signatureHash": "40b8280c381a8c00efd3a978f429c430fb01d8088c9b8d9fb039ecee7a17988c",
        "filePath": "/src/analyzers/type-insights/converter-network-analyzer.ts",
        "fileHash": "4761757e107aa737efc3f6823f6e6702",
        "startLine": 559,
        "endLine": 561,
        "startColumn": 2,
        "endColumn": 101,
        "astHash": "6fcb8d9dc2f97443",
        "contextPath": [
          "ConverterNetworkAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get configuration specific to converter analysis\n   */\n  getConverterConfiguration(): ConverterNetworkOptions {\n    return { ...this.converterOptions };\n  }",
        "sourceFileRefId": "81ec9eaf-c2a0-45e4-a577-3397ba697070",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "64346af4-83ac-5b16-b9d1-b000c20c8f43",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7afada57f6d76d40f2a34f7f73c45b02253df6e4b33293c1cd6190c1dc4ee19f",
        "contentId": "ad898d9dd827b90fc1ad866b8805a591b9954f4e04d904123df2f6359eb54ef0",
        "name": "findMatchingFunctionId",
        "displayName": "RTAAnalyzer.findMatchingFunctionId",
        "signature": "private RTAAnalyzer.findMatchingFunctionId(functions: Map<string, FunctionMetadata>, candidate: MethodInfo): string | undefined",
        "signatureHash": "bc5f5d9c64a27bacdfddbacf044c6965ebc19cd4d7b3dcdd1af2faeb9f16a1bb",
        "filePath": "/src/analyzers/rta-analyzer.ts",
        "fileHash": "b93feff0fcb7d962f09e8c8d9e0874b6",
        "startLine": 593,
        "endLine": 650,
        "startColumn": 2,
        "endColumn": 2690,
        "astHash": "7ef89a18bd63bea4",
        "contextPath": [
          "RTAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Find matching function ID in the function registry for a method candidate\r\n   * @deprecated Use FunctionIndex.resolve() instead for O(1) performance\r\n   */\r\n  // @ts-expect-error - Method kept for future use\r\n  private findMatchingFunctionId(functions: Map<string, FunctionMetadata>, candidate: MethodInfo): string | undefined {\r\n    try {\r\n      // Strategy 1: Exact match with position and metadata (most accurate)\r\n      for (const [functionId, functionMetadata] of functions) {\r\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\r\n            functionMetadata.startLine === candidate.startLine &&\r\n            functionMetadata.name === candidate.name &&\r\n            functionMetadata.className === candidate.className) {\r\n          return functionId;\r\n        }\r\n      }\r\n      \r\n      // Strategy 2: Match by lexical path construction (fallback compatibility)\r\n      // Build the expected lexical path as FunctionRegistry would\r\n      const relativePath = getRelativePath(candidate.filePath);\r\n      const expectedLexicalPath = `${relativePath}#${candidate.className}.${candidate.name}`;\r\n      \r\n      for (const [functionId, functionMetadata] of functions) {\r\n        if (functionMetadata.lexicalPath === expectedLexicalPath &&\r\n            Math.abs(functionMetadata.startLine - candidate.startLine) <= 2) { // Allow small line differences\r\n          return functionId;\r\n        }\r\n      }\r\n      \r\n      // Strategy 3: Search by file path and line number with tolerance\r\n      for (const [functionId, functionMetadata] of functions) {\r\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\r\n            Math.abs(functionMetadata.startLine - candidate.startLine) <= 2 && // Allow small line differences\r\n            functionMetadata.name === candidate.name &&\r\n            functionMetadata.className === candidate.className) {\r\n          return functionId;\r\n        }\r\n      }\r\n      \r\n      // Strategy 4: Search by class and method name in same file\r\n      for (const [functionId, functionMetadata] of functions) {\r\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\r\n            functionMetadata.name === candidate.name &&\r\n            functionMetadata.className === candidate.className) {\r\n          return functionId;\r\n        }\r\n      }\r\n      \r\n      // Strategy 5: Search by method name only in same file (most lenient)\r\n      for (const [functionId, functionMetadata] of functions) {\r\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\r\n            functionMetadata.name === candidate.name &&\r\n            functionMetadata.isMethod) {\r\n          return functionId;\r\n        }\r\n      }\r\n      \r\n      return undefined;\r\n    } catch (error) {\r\n      console.warn(`RTA: Error in findMatchingFunctionId:`, error);\r\n      return undefined;\r\n    }\r\n  }",
        "sourceFileRefId": "b09a456a-9552-45d6-bdb7-19213c929997",
        "parameters": [
          {
            "name": "functions",
            "type": "Map<string, FunctionMetadata>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "candidate",
            "type": "MethodInfo",
            "typeSimple": "MethodInfo",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 46,
          "totalLines": 65,
          "cyclomaticComplexity": 23,
          "cognitiveComplexity": 23,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 7,
          "branchCount": 5,
          "loopCount": 5,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 11,
          "codeToCommentRatio": 4.18,
          "halsteadVolume": 1023.65,
          "halsteadDifficulty": 12.6,
          "maintainabilityIndex": 24.23
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "19a969a0-f54b-5c2e-9814-e055c3dcab84",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8bbfb95a248d18043f62144a228bf02413118af619dbb9f805d11eb050112791",
        "contentId": "a5613b1de81f35d380a279dc759baa4af1ef37765fe0b48a66fd5734008514ee",
        "name": "_findMatchingFunctionId",
        "displayName": "CHAAnalyzer._findMatchingFunctionId",
        "signature": "private CHAAnalyzer._findMatchingFunctionId(functions: Map<string, FunctionMetadata>, candidate: MethodInfo): string | undefined",
        "signatureHash": "64cff979d06b4d2acbcd574090a475cffc69d2bcd19224d56d30c1fabf2ae29a",
        "filePath": "/src/analyzers/cha-analyzer.ts",
        "fileHash": "838a0a0dcffa980754abda21d7ae65b1",
        "startLine": 608,
        "endLine": 664,
        "startColumn": 2,
        "endColumn": 2558,
        "astHash": "631bb3406e758802",
        "contextPath": [
          "CHAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "private"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Find matching function ID in the function registry for a method candidate\n   * @deprecated Use resolveCandidateId() with FunctionIndex for O(1) performance\n   */\n  // @ts-expect-error - Kept for reference, replaced by FunctionIndex\n  private _findMatchingFunctionId(functions: Map<string, FunctionMetadata>, candidate: MethodInfo): string | undefined {\n    try {\n      // Strategy 1: Exact match with position and metadata (most accurate)\n      for (const [functionId, functionMetadata] of functions) {\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\n            functionMetadata.startLine === candidate.startLine &&\n            functionMetadata.name === candidate.name &&\n            functionMetadata.className === candidate.className) {\n          return functionId;\n        }\n      }\n      \n      // Strategy 2: Match by lexical path construction (fallback compatibility)\n      // Build the expected lexical path as FunctionRegistry would\n      const relativePath = getRelativePath(candidate.filePath);\n      const expectedLexicalPath = `${relativePath}#${candidate.className}.${candidate.name}`;\n      \n      for (const [functionId, functionMetadata] of functions) {\n        if (functionMetadata.lexicalPath === expectedLexicalPath &&\n            Math.abs(functionMetadata.startLine - candidate.startLine) <= 2) { // Allow small line differences\n          return functionId;\n        }\n      }\n      \n      // Strategy 3: Search by file path and line number with tolerance\n      for (const [functionId, functionMetadata] of functions) {\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\n            Math.abs(functionMetadata.startLine - candidate.startLine) <= 2 && // Allow small line differences\n            functionMetadata.name === candidate.name &&\n            functionMetadata.className === candidate.className) {\n          return functionId;\n        }\n      }\n      \n      // Strategy 4: Search by class and method name in same file\n      for (const [functionId, functionMetadata] of functions) {\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\n            functionMetadata.name === candidate.name &&\n            functionMetadata.className === candidate.className) {\n          return functionId;\n        }\n      }\n      \n      // Strategy 5: Search by method name only in same file (most lenient)\n      for (const [functionId, functionMetadata] of functions) {\n        if (PathNormalizer.areEqual(functionMetadata.filePath, candidate.filePath) &&\n            functionMetadata.name === candidate.name &&\n            functionMetadata.isMethod) {\n          return functionId;\n        }\n      }\n      \n      return undefined;\n    } catch {\n      return undefined;\n    }\n  }",
        "sourceFileRefId": "de6f5cb2-9915-4114-86a2-1fb93d736f9e",
        "parameters": [
          {
            "name": "functions",
            "type": "Map<string, FunctionMetadata>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "candidate",
            "type": "MethodInfo",
            "typeSimple": "MethodInfo",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 45,
          "totalLines": 65,
          "cyclomaticComplexity": 23,
          "cognitiveComplexity": 23,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 7,
          "branchCount": 5,
          "loopCount": 5,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 11,
          "codeToCommentRatio": 4.09,
          "halsteadVolume": 941.3,
          "halsteadDifficulty": 14.4,
          "maintainabilityIndex": 25.37
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "606f9352-3878-590c-9452-9408c26ccaa2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "45d047db464efff9f8c1545afb15c8f8abd457e8df8f7a390c3318b51b813643",
        "contentId": "55d6ab1e9fd896d31277ac346f05c40a46ed3d88b96898c69d0a0a0e2a41d234",
        "name": "updateSourceFileFunctionCounts",
        "displayName": "UtilityOperations.updateSourceFileFunctionCounts",
        "signature": "public async UtilityOperations.updateSourceFileFunctionCounts(functionCountByFile: Map<string, number>, snapshotId: string): Promise<void>",
        "signatureHash": "34b99feeba0a1a209b86f4ac7c54e4a71c61b481f19d8e1efcc920804642ae56",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 622,
        "endLine": 637,
        "startColumn": 2,
        "endColumn": 702,
        "astHash": "110ca9dc0cb19bb7",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async updateSourceFileFunctionCounts(functionCountByFile: Map<string, number>, snapshotId: string): Promise<void> {\r\n    for (const [filePath, count] of functionCountByFile.entries()) {\r\n      // Update the source file reference that functions actually reference\r\n      // Find the source_file_ref_id that functions in this snapshot are using for this file path\r\n      await this.db.query(`\r\n        UPDATE source_file_refs \r\n        SET function_count = $1 \r\n        WHERE id = (\r\n          SELECT DISTINCT f.source_file_ref_id \r\n          FROM functions f \r\n          WHERE f.file_path = $2 AND f.snapshot_id = $3 \r\n          LIMIT 1\r\n        )\r\n      `, [count, filePath, snapshotId]);\r\n    }\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "functionCountByFile",
            "type": "Map<string, number>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 18,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 1,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 2,
          "codeToCommentRatio": 7,
          "halsteadVolume": 85.95,
          "halsteadDifficulty": 1.31,
          "maintainabilityIndex": 75.45
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "306d3695-4a18-5292-b563-80aef19d1fb4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "9eee11f14a66d862027a2b5ee6ba075bb73f96000d34fec21438d316c435a20f",
        "contentId": "ee2212049aad105242b254d047352f3065581b034b42bc62b98bf4140c8c7815",
        "name": "getCallEdgesByCaller",
        "displayName": "CallEdgeOperations.getCallEdgesByCaller",
        "signature": "public async CallEdgeOperations.getCallEdgesByCaller(callerFunctionId: string): Promise<CallEdge[]>",
        "signatureHash": "5e179a78675efb2e2fa5cf84977d87b7c6cff036026d0009fe8cb55d093bd6c6",
        "filePath": "/src/storage/modules/call-edge-operations.ts",
        "fileHash": "13632b7faae880349e36d95d5aaf27d8",
        "startLine": 624,
        "endLine": 643,
        "startColumn": 2,
        "endColumn": 664,
        "astHash": "b87fa7e881f656d9",
        "contextPath": [
          "CallEdgeOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get call edges by caller function\r\n   */\r\n  async getCallEdgesByCaller(callerFunctionId: string): Promise<CallEdge[]> {\r\n    try {\r\n      const result = await this.db.query(\r\n        `\r\n        SELECT * FROM call_edges \r\n        WHERE caller_function_id = $1 \r\n        ORDER BY line_number, column_number\r\n        `,\r\n        [callerFunctionId]\r\n      );\r\n\r\n      return result.rows.map(row => this.mapRowToCallEdge(row as CallEdgeRow));\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get call edges by caller: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "4900d8d2-4d2e-4e4f-90a3-04e90eb95067",
        "parameters": [
          {
            "name": "callerFunctionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 19,
          "totalLines": 25,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 6.33,
          "halsteadVolume": 223.48,
          "halsteadDifficulty": 2.13,
          "maintainabilityIndex": 60.68
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "b1cf5b6b-3d0c-5dad-9398-965291b727ff",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "a9730cd7de02d78c0b8f2451a33204d907026c70b701bba046f3084a2f98345a",
        "contentId": "a1915eca17703c804f488b8a608684d8b480fe87b766e7461154f3b142eee6ca",
        "name": "getCochangeConfiguration",
        "displayName": "CochangeAnalyzer.getCochangeConfiguration",
        "signature": "public CochangeAnalyzer.getCochangeConfiguration(): CochangeAnalysisOptions",
        "signatureHash": "51fb493197107e092356a93fd4651e0a3748b470be8e933f565d1ab29e03d4cb",
        "filePath": "/src/analyzers/type-insights/cochange-analyzer.ts",
        "fileHash": "5e70f116270d9767dafc586947f4fb97",
        "startLine": 627,
        "endLine": 629,
        "startColumn": 2,
        "endColumn": 99,
        "astHash": "b49a11b82aca33b6",
        "contextPath": [
          "CochangeAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get configuration specific to co-change analysis\n   */\n  getCochangeConfiguration(): CochangeAnalysisOptions {\n    return { ...this.cochangeOptions };\n  }",
        "sourceFileRefId": "c5a41cdc-8e3c-4c88-a677-6f2dd99587bb",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "7304c11a-126f-54c4-a00e-0c87cdc718c5",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "77ba5974397d3a5e69e987153be7b1dc25bb720eeb8d4784c6a4cbad58228e5c",
        "contentId": "afa6b4a9e94f81d932d3bc5671ca5de5558554f9584e393b6c165899101df1a9",
        "name": "getCallEdgesByCallee",
        "displayName": "CallEdgeOperations.getCallEdgesByCallee",
        "signature": "public async CallEdgeOperations.getCallEdgesByCallee(calleeFunctionId: string): Promise<CallEdge[]>",
        "signatureHash": "5e179a78675efb2e2fa5cf84977d87b7c6cff036026d0009fe8cb55d093bd6c6",
        "filePath": "/src/storage/modules/call-edge-operations.ts",
        "fileHash": "13632b7faae880349e36d95d5aaf27d8",
        "startLine": 648,
        "endLine": 667,
        "startColumn": 2,
        "endColumn": 664,
        "astHash": "b87fa7e881f656d9",
        "contextPath": [
          "CallEdgeOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get call edges by callee function\r\n   */\r\n  async getCallEdgesByCallee(calleeFunctionId: string): Promise<CallEdge[]> {\r\n    try {\r\n      const result = await this.db.query(\r\n        `\r\n        SELECT * FROM call_edges \r\n        WHERE callee_function_id = $1 \r\n        ORDER BY line_number, column_number\r\n        `,\r\n        [calleeFunctionId]\r\n      );\r\n\r\n      return result.rows.map(row => this.mapRowToCallEdge(row as CallEdgeRow));\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get call edges by callee: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "4900d8d2-4d2e-4e4f-90a3-04e90eb95067",
        "parameters": [
          {
            "name": "calleeFunctionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 19,
          "totalLines": 25,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 6.33,
          "halsteadVolume": 223.48,
          "halsteadDifficulty": 2.13,
          "maintainabilityIndex": 60.68
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "90756615-25e1-5780-9853-8c92ace34043",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "03785af02ef4a4a3f0950f32bc93eaee254e87bf4b631f230b103961076ddf38",
        "contentId": "563d54364b6a975f26045805976960d50b7026d59082b3968d1039cc000f0327",
        "name": "getFunctionCountsByFile",
        "displayName": "PGLiteStorageAdapter.getFunctionCountsByFile",
        "signature": "public async PGLiteStorageAdapter.getFunctionCountsByFile(snapshotId: string): Promise<Map<string, number>>",
        "signatureHash": "edd21352f83a10c421f3baebd1cc3b32271410f97672d8718de85bf876778753",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 655,
        "endLine": 658,
        "startColumn": 2,
        "endColumn": 196,
        "astHash": "6e67de395b662b6c",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async getFunctionCountsByFile(snapshotId: string): Promise<Map<string, number>> {\r\n    await this.ensureInitialized();\r\n    return this.sourceContentOps.getFunctionCountsByFile(snapshotId);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "e13fba8b-4d93-5411-8c83-0324036543e8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ea9f3c9fd174f36991515415a125250616de43f2b7baa46712bfbceb093fa9ea",
        "contentId": "91e0912a733413e42f5a4e7b4f1c30b09f23ffad1681c9240b530c5af73e0e84",
        "name": "getInstantiatedTypes",
        "displayName": "RTAAnalyzer.getInstantiatedTypes",
        "signature": "public RTAAnalyzer.getInstantiatedTypes(): Set<string>",
        "signatureHash": "c45b576d7809bc2795ce4e23725344a7c398669462ea88d6e40f1341c139b5c6",
        "filePath": "/src/analyzers/rta-analyzer.ts",
        "fileHash": "b93feff0fcb7d962f09e8c8d9e0874b6",
        "startLine": 656,
        "endLine": 658,
        "startColumn": 2,
        "endColumn": 89,
        "astHash": "4e71921c923bcd6a",
        "contextPath": [
          "RTAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get instantiated types for debugging\r\n   */\r\n  getInstantiatedTypes(): Set<string> {\r\n    return new Set(this.instantiatedTypes);\r\n  }",
        "sourceFileRefId": "b09a456a-9552-45d6-bdb7-19213c929997",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 10,
          "halsteadDifficulty": 0.67,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "af4dc9dc-a9fd-56dd-a0f3-451d1fadcbaf",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "18d98b2b577b4553062a50711109298a64e265d36c02e080af5e2da0787613e8",
        "contentId": "5a74f1ac7b47bf9c8acb863600a8bdfe1c06688ef95000b41d6045a0c4aedb4f",
        "name": "getTypeInstantiationInfo",
        "displayName": "RTAAnalyzer.getTypeInstantiationInfo",
        "signature": "public RTAAnalyzer.getTypeInstantiationInfo(): Map<string, InstantiationInfo[]>",
        "signatureHash": "544367888828d12de85fc69d5942515736db43b45b69f2b9c0a8fab505594119",
        "filePath": "/src/analyzers/rta-analyzer.ts",
        "fileHash": "b93feff0fcb7d962f09e8c8d9e0874b6",
        "startLine": 663,
        "endLine": 665,
        "startColumn": 2,
        "endColumn": 117,
        "astHash": "b3cbdc5b6b2ca897",
        "contextPath": [
          "RTAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get type instantiation information\r\n   */\r\n  getTypeInstantiationInfo(): Map<string, InstantiationInfo[]> {\r\n    return new Map(this.typeInstantiationMap);\r\n  }",
        "sourceFileRefId": "b09a456a-9552-45d6-bdb7-19213c929997",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 13.93,
          "halsteadDifficulty": 0.63,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "cc2258e2-d779-57bc-a629-eb5cc5d390e4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "4661c864d6c267b9803d7b03dab2181bf5202c270a8e2a219b3e5f20e6a3a903",
        "contentId": "0b66a78483f165498d11788f05b44a829e6e1200d9704812d0e4a796afa412c9",
        "name": "extractFunctionSourceCode",
        "displayName": "UtilityOperations.extractFunctionSourceCode",
        "signature": "public async UtilityOperations.extractFunctionSourceCode(functionId: string): Promise<string | null>",
        "signatureHash": "347ed99354c051f955c4589cdfcd82a33af0d1b21e58af6ea19f0bd564642a23",
        "filePath": "/src/storage/modules/utility-operations.ts",
        "fileHash": "82a3e7ba63be6290a04cf4ae0d910bc2",
        "startLine": 667,
        "endLine": 707,
        "startColumn": 2,
        "endColumn": 1234,
        "astHash": "954056cca2bd5313",
        "contextPath": [
          "UtilityOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Extract function source code from source files\r\n   */\r\n  async extractFunctionSourceCode(functionId: string): Promise<string | null> {\r\n    try {\r\n      // Get function info with source file\r\n      const result = await this.db.query(`\r\n        SELECT \r\n          f.start_line,\r\n          f.end_line,\r\n          f.start_column,\r\n          f.end_column,\r\n          sc.content as file_content\r\n        FROM functions f\r\n        JOIN source_file_refs sfr ON f.source_file_ref_id = sfr.id\r\n        JOIN source_contents sc ON sfr.content_id = sc.id\r\n        WHERE f.id = $1\r\n      `, [functionId]);\r\n      \r\n      if (result.rows.length === 0) {\r\n        return null;\r\n      }\r\n      \r\n      const row = result.rows[0] as {\r\n        start_line: number;\r\n        end_line: number;\r\n        start_column: number;\r\n        end_column: number;\r\n        file_content: string;\r\n      };\r\n      \r\n      // Extract source code from content\r\n      return this.extractSourceFromContent(\r\n        row.file_content,\r\n        row.start_line,\r\n        row.end_line,\r\n        row.start_column,\r\n        row.end_column\r\n      );\r\n    } catch (error) {\r\n      this.logger?.error(`Failed to extract function source code: ${error instanceof Error ? error.message : String(error)}`);\r\n      return null;\r\n    }\r\n  }",
        "sourceFileRefId": "35d383d7-b1f4-4764-990b-f289d2b1862f",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 36,
          "totalLines": 46,
          "cyclomaticComplexity": 4,
          "cognitiveComplexity": 4,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 3,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 7.2,
          "halsteadVolume": 323.85,
          "halsteadDifficulty": 4.5,
          "maintainabilityIndex": 42.96
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "34fd2dd6-69b4-5c36-8ef1-2c2dfb166394",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "79a5647341e3915c5e371f70d42a01957e1a3c901f13780ccdee3cc9db4c0cc8",
        "contentId": "3118b0a849b9f958c7a9686946650cc0a382d79b7b7919ccd054caec95efa560",
        "name": "isTypeInstantiated",
        "displayName": "RTAAnalyzer.isTypeInstantiated",
        "signature": "public RTAAnalyzer.isTypeInstantiated(typeName: string): boolean",
        "signatureHash": "4249a274e28ede02de288e47dca06ce0a472cc1541f12f6e56ba21b63841ae41",
        "filePath": "/src/analyzers/rta-analyzer.ts",
        "fileHash": "b93feff0fcb7d962f09e8c8d9e0874b6",
        "startLine": 670,
        "endLine": 672,
        "startColumn": 2,
        "endColumn": 104,
        "astHash": "c69c394fdb85380a",
        "contextPath": [
          "RTAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Check if a type is instantiated\r\n   */\r\n  isTypeInstantiated(typeName: string): boolean {\r\n    return this.instantiatedTypes.has(typeName);\r\n  }",
        "sourceFileRefId": "b09a456a-9552-45d6-bdb7-19213c929997",
        "parameters": [
          {
            "name": "typeName",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 25.27,
          "halsteadDifficulty": 1.2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "40ee21f2-de19-5b2a-ac44-beff7e447bf4",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2181c065b8336b9d3113a2a61eee3046325ef0c125248d3b10616264d5ff41ba",
        "contentId": "455ccd4fa521b4d4ec70153d02c6b2f604aa6f85d80ee6419bc0ec54f1edd78d",
        "name": "clear",
        "displayName": "RTAAnalyzer.clear",
        "signature": "public RTAAnalyzer.clear(): void",
        "signatureHash": "a84b38083463259204ece7c3fa3b1085b3d4a15beb0615076568d1b9846f7794",
        "filePath": "/src/analyzers/rta-analyzer.ts",
        "fileHash": "b93feff0fcb7d962f09e8c8d9e0874b6",
        "startLine": 731,
        "endLine": 738,
        "startColumn": 2,
        "endColumn": 244,
        "astHash": "4aaf4ab95370dc57",
        "contextPath": [
          "RTAAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Clear internal state\r\n   */\r\n  clear(): void {\r\n    this.instantiatedTypes.clear();\r\n    this.typeInstantiationMap.clear();\r\n    this.classInterfacesMap.clear();\r\n    this.functionIndex?.clear();\r\n    this.functionIndex = undefined;\r\n    this.candidateIdCache.clear();\r\n  }",
        "sourceFileRefId": "b09a456a-9552-45d6-bdb7-19213c929997",
        "parameters": [],
        "metrics": {
          "linesOfCode": 8,
          "totalLines": 13,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.67,
          "halsteadVolume": 136.74,
          "halsteadDifficulty": 2.25,
          "maintainabilityIndex": 85.27
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "1e8f58c4-6746-57e8-96c8-0244a91b6d24",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "df7d459b4eb4c7e98511fd6b434e1cef0feead447dadf5ae5361926e3395278e",
        "contentId": "d6a7af493de6ac44114c6fa5088e0f69a97304349d89378130bac4d519858cc9",
        "name": "getCallEdgeStats",
        "displayName": "CallEdgeOperations.getCallEdgeStats",
        "signature": "public async CallEdgeOperations.getCallEdgeStats(snapshotId: string): Promise<CallEdgeStats>",
        "signatureHash": "d195df56a8f4314fcf6d6a2f9b87036a7a8de9498d64f40bf3fdc54351b427a8",
        "filePath": "/src/storage/modules/call-edge-operations.ts",
        "fileHash": "13632b7faae880349e36d95d5aaf27d8",
        "startLine": 746,
        "endLine": 809,
        "startColumn": 2,
        "endColumn": 2428,
        "astHash": "a83068c672c5310e",
        "contextPath": [
          "CallEdgeOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get call graph statistics for a snapshot\r\n   */\r\n  async getCallEdgeStats(snapshotId: string): Promise<CallEdgeStats> {\r\n    try {\r\n      const [edgeStats, topCallers] = await Promise.all([\r\n        this.db.query(`\r\n          SELECT \r\n            COUNT(*) as total_call_edges,\r\n            COUNT(CASE WHEN call_type != 'external' THEN 1 END) as internal_call_edges,\r\n            COUNT(CASE WHEN call_type = 'external' THEN 1 END) as external_call_edges,\r\n            COUNT(DISTINCT caller_function_id) as distinct_callers\r\n          FROM call_edges\r\n          WHERE snapshot_id = $1\r\n        `, [snapshotId]),\r\n        \r\n        this.db.query(`\r\n          SELECT \r\n            ce.caller_function_id,\r\n            f.name as function_name,\r\n            COUNT(*) as call_count\r\n          FROM call_edges ce\r\n          JOIN functions f ON ce.caller_function_id = f.id\r\n          WHERE ce.snapshot_id = $1\r\n          GROUP BY ce.caller_function_id, f.name\r\n          ORDER BY call_count DESC\r\n          LIMIT 5\r\n        `, [snapshotId])\r\n      ]);\r\n\r\n      const stats = edgeStats.rows[0] as {\r\n        total_call_edges: string;\r\n        internal_call_edges: string;\r\n        external_call_edges: string;\r\n        distinct_callers: string;\r\n      };\r\n      const totalFunctions = await this.getTotalFunctionsCount(snapshotId);\r\n\r\n      return {\r\n        totalCallEdges: parseInt(stats.total_call_edges) || 0,\r\n        internalCallEdges: parseInt(stats.internal_call_edges) || 0,\r\n        externalCallEdges: parseInt(stats.external_call_edges) || 0,\r\n        averageCallsPerFunction: totalFunctions > 0 \r\n          ? (parseInt(stats.total_call_edges) || 0) / totalFunctions \r\n          : 0,\r\n        functionsWithNoCalls: totalFunctions - (parseInt(stats.distinct_callers) || 0),\r\n        functionsWithMostCalls: topCallers.rows.map(row => {\r\n          const typedRow = row as {\r\n            caller_function_id: string;\r\n            function_name: string;\r\n            call_count: string;\r\n          };\r\n          return {\r\n            functionId: typedRow.caller_function_id,\r\n            functionName: typedRow.function_name,\r\n            callCount: parseInt(typedRow.call_count),\r\n          };\r\n        }),\r\n      };\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get call edge stats: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "4900d8d2-4d2e-4e4f-90a3-04e90eb95067",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 61,
          "totalLines": 69,
          "cyclomaticComplexity": 10,
          "cognitiveComplexity": 10,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 3,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 2,
          "callbackCount": 1,
          "commentLines": 3,
          "codeToCommentRatio": 20.33,
          "halsteadVolume": 842.07,
          "halsteadDifficulty": 8.58,
          "maintainabilityIndex": 22.09
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "45735a39-2de1-51b4-bdeb-e8f58de585ae",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ec56992738063fa88139e4145844d99dbbbba6909828128928f6721763b19109",
        "contentId": "3501625e33d2d12460f9b8548c23a65eba52101b9dc65175a26c55a4f5292ca7",
        "name": "analyzeTypeUsagePatterns",
        "displayName": "TypeFunctionLinker.analyzeTypeUsagePatterns",
        "signature": "public TypeFunctionLinker.analyzeTypeUsagePatterns(type: TypeDefinition, functions: FunctionMetadata[]): TypeUsageAnalysis",
        "signatureHash": "2966524a9b611d086cd1ea668ee548c020cb1f7e304466c57f652a1f9881a971",
        "filePath": "/src/analyzers/type-function-linker.ts",
        "fileHash": "a7102bbbac7a916310c7908bcf7170c8",
        "startLine": 794,
        "endLine": 811,
        "startColumn": 2,
        "endColumn": 887,
        "astHash": "27aca1f821dc2791",
        "contextPath": [
          "TypeFunctionLinker"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze type usage patterns to provide insights for refactoring\n   * Enhanced with optimized 1-pass AST traversal for better performance\n   */\n  analyzeTypeUsagePatterns(type: TypeDefinition, functions: FunctionMetadata[]): TypeUsageAnalysis {\n    // For interface/type alias analysis, check ALL functions that might use this type\n    // For class analysis, focus on methods within the class\n    const relevantFunctions = type.kind === 'class' \n      ? this.findMethodsForType(type, functions)\n      : functions; // Check all functions for interface/type alias usage\n    \n    // Use optimized 1-pass AST traversal instead of individual analysis\n    const allUsages = this.collectPropertyUsagesOptimized(type, relevantFunctions);\n    \n    return {\n      typeName: type.name,\n      totalMembers: this.getTypeMembers(type).length,\n      propertyAccessPatterns: this.analyzePropertyPatterns(allUsages),\n      functionGroups: this.groupFunctionsByUsage(allUsages),\n      accessContexts: this.analyzeAccessContexts(allUsages)\n    };\n  }",
        "sourceFileRefId": "d8feac5f-6614-4757-9623-b078f52b6d70",
        "parameters": [
          {
            "name": "type",
            "type": "TypeDefinition",
            "typeSimple": "TypeDefinition",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "functions",
            "type": "FunctionMetadata[]",
            "typeSimple": "array",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 13,
          "totalLines": 24,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 7,
          "codeToCommentRatio": 1.86,
          "halsteadVolume": 280,
          "halsteadDifficulty": 2.07,
          "maintainabilityIndex": 68.32
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "26b1ef01-d0cd-511a-a1c5-65d8745322d0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d87f697f64a51177adcd90563abb3d660e777b69a69666f77ea937a336d82328",
        "contentId": "2895ea9ea757d079bee99a185a68f316f8734658d2b16cbeb35628560b4749ee",
        "name": "getCallGraph",
        "displayName": "CallEdgeOperations.getCallGraph",
        "signature": "public async CallEdgeOperations.getCallGraph(snapshotId: string, options?: {\r\n    includeExternal?: boolean;\r\n    maxDepth?: number;\r\n    rootFunctionId?: string;\r\n  }): Promise<{\r\n    nodes: Array<{ id: string; name: string; type: 'internal' | 'external' }>;\r\n    edges: Array<{ source: string; target: string; type: string }>;\r\n  }>",
        "signatureHash": "73e66c2661f39593d3d596d6cec5912aebf1658aa0fb3c6b6dd0b7e0398c6319",
        "filePath": "/src/storage/modules/call-edge-operations.ts",
        "fileHash": "13632b7faae880349e36d95d5aaf27d8",
        "startLine": 833,
        "endLine": 920,
        "startColumn": 2,
        "endColumn": 2958,
        "astHash": "45ce52e5a3f40dd3",
        "contextPath": [
          "CallEdgeOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\r\n   * Get call graph for visualization\r\n   */\r\n  async getCallGraph(snapshotId: string, options?: {\r\n    includeExternal?: boolean;\r\n    maxDepth?: number;\r\n    rootFunctionId?: string;\r\n  }): Promise<{\r\n    nodes: Array<{ id: string; name: string; type: 'internal' | 'external' }>;\r\n    edges: Array<{ source: string; target: string; type: string }>;\r\n  }> {\r\n    try {\r\n      const nodes = new Map<string, { id: string; name: string; type: 'internal' | 'external' }>();\r\n      const edges: Array<{ source: string; target: string; type: string }> = [];\r\n\r\n      let query = `\r\n        SELECT \r\n          ce.caller_function_id,\r\n          ce.callee_function_id,\r\n          ce.callee_name,\r\n          ce.call_type,\r\n          f1.name as caller_name,\r\n          f2.name as callee_name_internal\r\n        FROM call_edges ce\r\n        LEFT JOIN functions f1 ON ce.caller_function_id = f1.id\r\n        LEFT JOIN functions f2 ON ce.callee_function_id = f2.id\r\n        WHERE ce.snapshot_id = $1\r\n      `;\r\n\r\n      const params: unknown[] = [snapshotId];\r\n\r\n      if (!options?.includeExternal) {\r\n        query += ' AND ce.call_type != \\'external\\'';\r\n      }\r\n\r\n      if (options?.rootFunctionId) {\r\n        query += ` AND ce.caller_function_id = $${params.length + 1}`;\r\n        params.push(options.rootFunctionId);\r\n      }\r\n\r\n      const result = await this.db.query(query, params);\r\n\r\n      for (const row of result.rows) {\r\n        const rowData = row as {\r\n          caller_function_id: string;\r\n          callee_function_id?: string;\r\n          callee_name: string;\r\n          call_type: string;\r\n          caller_name?: string;\r\n          callee_name_internal?: string;\r\n        };\r\n        \r\n        // Add caller node\r\n        if (!nodes.has(rowData.caller_function_id)) {\r\n          nodes.set(rowData.caller_function_id, {\r\n            id: rowData.caller_function_id,\r\n            name: rowData.caller_name || 'Unknown',\r\n            type: 'internal'\r\n          });\r\n        }\r\n\r\n        // Add callee node\r\n        if (rowData.callee_function_id && !nodes.has(rowData.callee_function_id)) {\r\n          nodes.set(rowData.callee_function_id, {\r\n            id: rowData.callee_function_id,\r\n            name: rowData.callee_name_internal || rowData.callee_name || 'Unknown',\r\n            type: rowData.call_type === 'external' ? 'external' : 'internal'\r\n          });\r\n        }\r\n\r\n        // Add edge\r\n        const targetId = rowData.callee_function_id || `external_${rowData.callee_name}`;\r\n        edges.push({\r\n          source: rowData.caller_function_id,\r\n          target: targetId,\r\n          type: rowData.call_type || 'direct'\r\n        });\r\n      }\r\n\r\n      return {\r\n        nodes: Array.from(nodes.values()),\r\n        edges\r\n      };\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get call graph: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "4900d8d2-4d2e-4e4f-90a3-04e90eb95067",
        "parameters": [
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "{\r\n    includeExternal?: boolean;\r\n    maxDepth?: number;\r\n    rootFunctionId?: string;\r\n  }",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 75,
          "totalLines": 93,
          "cyclomaticComplexity": 16,
          "cognitiveComplexity": 16,
          "maxNestingLevel": 3,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 7,
          "loopCount": 1,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 6,
          "codeToCommentRatio": 12.5,
          "halsteadVolume": 1273.88,
          "halsteadDifficulty": 11.87,
          "maintainabilityIndex": 12.78
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5b269bfe-1c96-5f07-9672-4365b5c469b0",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "373419da792d97d2f06ca52c2f2ab198ef42c030bdad502a39bfb79543ce63cd",
        "contentId": "66bb9c8e101ee0f498b055904f7f35456f9901b23692e6441645dff771aa5e84",
        "name": "shouldProtectFromDeletion",
        "displayName": "TypeAwareDeletionSafety.shouldProtectFromDeletion",
        "signature": "public async TypeAwareDeletionSafety.shouldProtectFromDeletion(func: FunctionInfo, snapshotId: string, minConfidenceThreshold: number = 0.7): Promise<boolean>",
        "signatureHash": "d85560df5e050cba599e1a199f1149f5d91cc430e4389c6fc61e532a129d82bd",
        "filePath": "/src/analyzers/type-aware-deletion-safety.ts",
        "fileHash": "4f85c127039816a99d7860ca34bf427c",
        "startLine": 835,
        "endLine": 852,
        "startColumn": 2,
        "endColumn": 571,
        "astHash": "212e91b6f969746a",
        "contextPath": [
          "TypeAwareDeletionSafety"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Check if a function should be protected from deletion based on type information\n   */\n  async shouldProtectFromDeletion(\n    func: FunctionInfo,\n    snapshotId: string,\n    minConfidenceThreshold: number = 0.7\n  ): Promise<boolean> {\n    const safetyInfo = await this.analyzeDeletionSafety(func, snapshotId);\n    \n    // Protect if confidence score exceeds threshold\n    if (safetyInfo.confidenceScore >= minConfidenceThreshold) {\n      this.logger.debug(\n        `Function ${func.name} protected from deletion: ${safetyInfo.protectionReason} ` +\n        `(confidence: ${safetyInfo.confidenceScore})`\n      );\n      return true;\n    }\n\n    return false;\n  }",
        "sourceFileRefId": "26fea89d-1f1b-4d12-9666-3f697fb72d71",
        "parameters": [
          {
            "name": "func",
            "type": "FunctionInfo",
            "typeSimple": "FunctionInfo",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "minConfidenceThreshold",
            "type": "number",
            "typeSimple": "number",
            "position": 2,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "0.7"
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 23,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 3,
          "returnStatementCount": 2,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 3.75,
          "halsteadVolume": 151.27,
          "halsteadDifficulty": 3,
          "maintainabilityIndex": 69.6
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c62a2980-80d4-56e7-9797-d8a54fe0e2c8",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "072cded32f0da8c06b8fc0f1bc047fedaa6192b401d8a349b02e698fa971b660",
        "contentId": "fcdc37fe3ce492755bbe48b58c3d783a6a5c88adba81bdbe668bf9c746f41362",
        "name": "getProtectionReason",
        "displayName": "TypeAwareDeletionSafety.getProtectionReason",
        "signature": "public async TypeAwareDeletionSafety.getProtectionReason(func: FunctionInfo, snapshotId: string): Promise<string | null>",
        "signatureHash": "7aef25bc1789f85c93229122a58d780d9d41692c4b530f67409d4fecbd293ce1",
        "filePath": "/src/analyzers/type-aware-deletion-safety.ts",
        "fileHash": "4f85c127039816a99d7860ca34bf427c",
        "startLine": 857,
        "endLine": 863,
        "startColumn": 2,
        "endColumn": 224,
        "astHash": "8d560d46bebb5e60",
        "contextPath": [
          "TypeAwareDeletionSafety"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get detailed protection reason for a function\n   */\n  async getProtectionReason(\n    func: FunctionInfo,\n    snapshotId: string\n  ): Promise<string | null> {\n    const safetyInfo = await this.analyzeDeletionSafety(func, snapshotId);\n    return safetyInfo.protectionReason;\n  }",
        "sourceFileRefId": "26fea89d-1f1b-4d12-9666-3f697fb72d71",
        "parameters": [
          {
            "name": "func",
            "type": "FunctionInfo",
            "typeSimple": "FunctionInfo",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 7,
          "totalLines": 12,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2.33,
          "halsteadVolume": 51.89,
          "halsteadDifficulty": 1.33,
          "maintainabilityIndex": 95.66
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "75844dde-fa99-5381-b9a7-9dd599ff1342",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "8e27ac900032fd4e5a3f749c3e003aafc6eb78cbb6850eb9659258ecc362fb7a",
        "contentId": "8b83548228675812ba884f25767a55c0f82e77435488d6c704dea44bc94e1810",
        "name": "executeScanWorkflowInTransaction",
        "displayName": "PGLiteStorageAdapter.executeScanWorkflowInTransaction",
        "signature": "public async PGLiteStorageAdapter.executeScanWorkflowInTransaction(workflow: {\r\n    sourceFiles?: SourceFile[];\r\n    functions?: FunctionInfo[];\r\n    callEdges?: CallEdge[];\r\n    internalCallEdges?: InternalCallEdge[];\r\n    analysisLevel?: 'NONE' | 'BASIC' | 'CALL_GRAPH';\r\n    snapshotOptions: {\r\n      label?: string;\r\n      comment?: string;\r\n      configHash?: string;\r\n      scope?: string;\r\n    };\r\n  }): Promise<{\r\n    snapshotId: string;\r\n    sourceFileIdMap?: Map<string, string>;\r\n  }>",
        "signatureHash": "07202ff2307353d8821cee4b55476e04d49777667288d7c54e41608871b015f6",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 860,
        "endLine": 923,
        "startColumn": 2,
        "endColumn": 2637,
        "astHash": "4169cfd8acc33155",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// ========================================\r\n  // TRANSACTION OPERATIONS\r\n  // ========================================\r\n\r\n  /**\r\n   * Execute a complete scan workflow within a single transaction\r\n   * This ensures atomicity: either all operations succeed or all fail\r\n   */\r\n  async executeScanWorkflowInTransaction(workflow: {\r\n    sourceFiles?: SourceFile[];\r\n    functions?: FunctionInfo[];\r\n    callEdges?: CallEdge[];\r\n    internalCallEdges?: InternalCallEdge[];\r\n    analysisLevel?: 'NONE' | 'BASIC' | 'CALL_GRAPH';\r\n    snapshotOptions: {\r\n      label?: string;\r\n      comment?: string;\r\n      configHash?: string;\r\n      scope?: string;\r\n    };\r\n  }): Promise<{\r\n    snapshotId: string;\r\n    sourceFileIdMap?: Map<string, string>;\r\n  }> {\r\n    await this.ensureInitialized();\r\n    \r\n    // Generate transaction ID for tracking\r\n    const transactionId = randomUUID();\r\n    const operation = `scanWorkflow(${workflow.functions?.length || 0} functions, ${workflow.sourceFiles?.length || 0} files)`;\r\n    \r\n    // Check if shutdown is in progress\r\n    if (this.gracefulShutdown.isShutdownInProgress()) {\r\n      throw new Error('Cannot start new transaction: shutdown in progress');\r\n    }\r\n    \r\n    const transactionPromise = this.db.transaction(async (trx: PGTransaction) => {\r\n      // 1. Create snapshot\r\n      const snapshotId = await this.snapshotOps.createSnapshotInTransaction(trx, workflow.snapshotOptions);\r\n      \r\n      let sourceFileIdMap: Map<string, string> | undefined;\r\n      \r\n      // 2. Save source files if provided\r\n      if (workflow.sourceFiles && workflow.sourceFiles.length > 0) {\r\n        sourceFileIdMap = await this.saveSourceFilesInTransaction(trx, workflow.sourceFiles, snapshotId);\r\n      }\r\n      \r\n      // 3. Save functions if provided\r\n      if (workflow.functions && workflow.functions.length > 0) {\r\n        await this.functionOps.saveFunctionsInTransaction(trx, snapshotId, workflow.functions);\r\n      }\r\n      \r\n      // 4. Save call edges if provided\r\n      if (workflow.callEdges && workflow.callEdges.length > 0) {\r\n        await this.insertCallEdgesInTransaction(trx, workflow.callEdges, snapshotId);\r\n      }\r\n      \r\n      // 5. Save internal call edges if provided\r\n      if (workflow.internalCallEdges && workflow.internalCallEdges.length > 0) {\r\n        await this.insertInternalCallEdgesInTransaction(trx, workflow.internalCallEdges, snapshotId);\r\n      }\r\n      \r\n      // 6. Update analysis level if provided\r\n      if (workflow.analysisLevel) {\r\n        await this.updateAnalysisLevelInTransaction(trx, snapshotId, workflow.analysisLevel);\r\n      }\r\n      \r\n      return { snapshotId, sourceFileIdMap };\r\n    }) as Promise<{ snapshotId: string; sourceFileIdMap?: Map<string, string> }>;\r\n    \r\n    // Track transaction for graceful shutdown protection\r\n    return this.gracefulShutdown.trackTransaction(transactionId, operation, transactionPromise);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "workflow",
            "type": "{\r\n    sourceFiles?: SourceFile[];\r\n    functions?: FunctionInfo[];\r\n    callEdges?: CallEdge[];\r\n    internalCallEdges?: InternalCallEdge[];\r\n    analysisLevel?: 'NONE' | 'BASIC' | 'CALL_GRAPH';\r\n    snapshotOptions: {\r\n      label?: string;\r\n      comment?: string;\r\n      configHash?: string;\r\n      scope?: string;\r\n    };\r\n  }",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 44,
          "totalLines": 74,
          "cyclomaticComplexity": 13,
          "cognitiveComplexity": 13,
          "maxNestingLevel": 1,
          "parameterCount": 1,
          "returnStatementCount": 2,
          "branchCount": 6,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 7,
          "callbackCount": 1,
          "commentLines": 16,
          "codeToCommentRatio": 2.75,
          "halsteadVolume": 1117.75,
          "halsteadDifficulty": 6.68,
          "maintainabilityIndex": 26.91
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d0efb847-0a28-5a96-8b27-222854af089a",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d9950ee0def3ba6cb5e0876888098ea6258b111d4c309d86a634885c47a16a9c",
        "contentId": "27d2ae5b568609608b10937da456e0be300c01250153ac4631e8fba9d1db10f8",
        "name": "storeFunctions",
        "displayName": "FunctionOperations.storeFunctions",
        "signature": "public async FunctionOperations.storeFunctions(functions: FunctionInfo[], snapshotId: string): Promise<void>",
        "signatureHash": "fa44c3e576ec6b1866cf3e223771b60bc32785c4a47dd08c5d2ebf937e9007c4",
        "filePath": "/src/storage/modules/function-operations.ts",
        "fileHash": "a27173ff6b6ea269237f7c12ba244ddb",
        "startLine": 961,
        "endLine": 963,
        "startColumn": 2,
        "endColumn": 146,
        "astHash": "fae8ce036ab0d805",
        "contextPath": [
          "FunctionOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async storeFunctions(functions: FunctionInfo[], snapshotId: string): Promise<void> {\r\n    return this.saveFunctions(snapshotId, functions);\r\n  }",
        "sourceFileRefId": "ba5c9581-cdc6-4205-906a-fbcc43801f38",
        "parameters": [
          {
            "name": "functions",
            "type": "FunctionInfo[]",
            "typeSimple": "array",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 5,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 34.87,
          "halsteadDifficulty": 1.29,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "bf0924b0-3e07-5169-aa19-f1b3f0af585c",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "7ae607474bebe11c000bfd9bce79c1f3bdde819c0cc365132b4398c4bf0a8ee8",
        "contentId": "b923a0af30bfcc635a9177e43ba6beabb00f22588c6dd4d2d9c44d83659f71bb",
        "name": "analyzeCouplingIssues",
        "displayName": "TypeFunctionLinker.analyzeCouplingIssues",
        "signature": "public TypeFunctionLinker.analyzeCouplingIssues(func: FunctionMetadata): CouplingAnalysis",
        "signatureHash": "1e46d4a2d36f4a8aa469078ddbc2930c48281a9e22ddb5473ff335bda461b7e8",
        "filePath": "/src/analyzers/type-function-linker.ts",
        "fileHash": "a7102bbbac7a916310c7908bcf7170c8",
        "startLine": 983,
        "endLine": 992,
        "startColumn": 2,
        "endColumn": 348,
        "astHash": "3453db0c814a5181",
        "contextPath": [
          "TypeFunctionLinker"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze coupling issues in function parameters\n   */\n  analyzeCouplingIssues(func: FunctionMetadata): CouplingAnalysis {\n    const overCoupledParams = this.detectOverCoupledParameters(func);\n    const bucketBrigade = this.detectBucketBrigade(func);\n    \n    return {\n      functionName: func.name,\n      overCoupledParameters: overCoupledParams,\n      bucketBrigadeIndicators: bucketBrigade\n    };\n  }",
        "sourceFileRefId": "d8feac5f-6614-4757-9623-b078f52b6d70",
        "parameters": [
          {
            "name": "func",
            "type": "FunctionMetadata",
            "typeSimple": "FunctionMetadata",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 9,
          "totalLines": 15,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 3,
          "halsteadVolume": 96,
          "halsteadDifficulty": 1.36,
          "maintainabilityIndex": 85.18
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "3a996755-1865-59b9-b8ac-a7f1451690c6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "2abab274543cce195b020fb886a9a73a4909cee916c7925512ce62532d4f2e1e",
        "contentId": "74a8cf6f78dc4ff650e5eb2ac6cb0da27284ce4539085e90f3555dd02f375b2d",
        "name": "extractFunctionSourceCode",
        "displayName": "FunctionOperations.extractFunctionSourceCode",
        "signature": "public async FunctionOperations.extractFunctionSourceCode(functionId: string): Promise<string | null>",
        "signatureHash": "b599c1e7978a7d474f5c81409a4cb56003f5246bde7c2946184364592c4f41f1",
        "filePath": "/src/storage/modules/function-operations.ts",
        "fileHash": "a27173ff6b6ea269237f7c12ba244ddb",
        "startLine": 1016,
        "endLine": 1033,
        "startColumn": 2,
        "endColumn": 604,
        "astHash": "6706df0989c220be",
        "contextPath": [
          "FunctionOperations"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async extractFunctionSourceCode(functionId: string): Promise<string | null> {\r\n    try {\r\n      const result = await this.db.query(\r\n        'SELECT source_code FROM functions WHERE id = $1 LIMIT 1',\r\n        [functionId]\r\n      );\r\n      \r\n      if (result.rows.length === 0) {\r\n        return null;\r\n      }\r\n      \r\n      const row = result.rows[0] as { source_code?: string };\r\n      return row.source_code || null;\r\n    } catch (error) {\r\n      this.logger?.error(`Failed to extract function source code: ${error instanceof Error ? error.message : String(error)}`);\r\n      return null;\r\n    }\r\n  }",
        "sourceFileRefId": "ba5c9581-cdc6-4205-906a-fbcc43801f38",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 16,
          "totalLines": 20,
          "cyclomaticComplexity": 5,
          "cognitiveComplexity": 5,
          "maxNestingLevel": 2,
          "parameterCount": 1,
          "returnStatementCount": 3,
          "branchCount": 2,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 218.26,
          "halsteadDifficulty": 4.89,
          "maintainabilityIndex": 64.65
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "af2922d4-6429-51d2-a20a-707bb63962b6",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "53b60133dfc14363c5594ebe2e6233afa3e0e3caff504911fe5ab808285c679b",
        "contentId": "c7eaa49c196de1f431f35ce005ff9dc17a617bd8b150e888a4e63641b5cdd651",
        "name": "printPerformanceSummary",
        "displayName": "CallGraphAnalyzer.printPerformanceSummary",
        "signature": "public CallGraphAnalyzer.printPerformanceSummary(): void",
        "signatureHash": "985804a771497d112aeb48282d9dcc4e9ba12258d5fd3307648382d1d3af6def",
        "filePath": "/src/analyzers/call-graph-analyzer.ts",
        "fileHash": "425b4f65c7ee6eb33c8ff53b7bd12548",
        "startLine": 1031,
        "endLine": 1033,
        "startColumn": 2,
        "endColumn": 73,
        "astHash": "f76ef01ee8d092cd",
        "contextPath": [
          "CallGraphAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Print performance summary\n   */\n  printPerformanceSummary(): void {\n    this.profiler.printSummary();\n  }",
        "sourceFileRefId": "780ad702-d34e-42a7-ba49-155fe3627ccd",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "0a64983f-8426-56f2-855c-7cc3473bc19f",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "5bb9b786d79429e0d7709021fd4eb0e936f35caa902edf0025cb6b17d881a546",
        "contentId": "773c94537aec1f7e177e8ae93eb5f3528eef382f50fa1ad4ae3f4a2bd2729dec",
        "name": "getDb",
        "displayName": "PGLiteStorageAdapter.getDb",
        "signature": "public PGLiteStorageAdapter.getDb(): PGlite",
        "signatureHash": "ef1a4ade23a7c56705251e2fb247bd3530bf6ac74033baa748a492a6989bae12",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1076,
        "endLine": 1078,
        "startColumn": 2,
        "endColumn": 45,
        "astHash": "c6d7b7b788fae826",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// ========================================\r\n  // LEGACY COMPATIBILITY METHODS\r\n  // ========================================\r\n\r\n  getDb(): PGlite {\r\n    return this.db;\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 9,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 8,
          "halsteadDifficulty": 0.5,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "24b84daa-3709-562d-9084-c9f84db28047",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "da4c21039ca20f32899d855da05986d6abb37995892f8ebbd794b9da7e54bc32",
        "contentId": "0574720d1a8822c73bd5ac6bf400ce2f51be037f9cb15de72d3fc65ed1faac65",
        "name": "getFunctionHistory",
        "displayName": "PGLiteStorageAdapter.getFunctionHistory",
        "signature": "public async PGLiteStorageAdapter.getFunctionHistory(functionId: string, options?: {\r\n      limit?: number;\r\n      includeAbsent?: boolean;\r\n    }): Promise<Array<{\r\n    snapshot: SnapshotInfo;\r\n    function: FunctionInfo | null;\r\n    isPresent: boolean;\r\n  }>>",
        "signatureHash": "f31c3f5734df352f360ca81a96a3ba6782161fb5a610750d6674625e57638ed4",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1087,
        "endLine": 1124,
        "startColumn": 2,
        "endColumn": 1211,
        "astHash": "b76d68a7262e3462",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async getFunctionHistory(\r\n    functionId: string,\r\n    options?: {\r\n      limit?: number;\r\n      includeAbsent?: boolean;\r\n    }\r\n  ): Promise<Array<{\r\n    snapshot: SnapshotInfo;\r\n    function: FunctionInfo | null;\r\n    isPresent: boolean;\r\n  }>> {\r\n    await this.ensureInitialized();\r\n    const limit = options?.limit || 100;\r\n    const includeAbsent = options?.includeAbsent ?? false;\r\n\r\n    try {\r\n      const snapshots = await this.getSnapshots({ limit });\r\n      \r\n      if (this.logger) {\r\n        this.logger.log(`getFunctionHistory: Found ${snapshots.length} snapshots for functionId: ${functionId}`);\r\n      }\r\n\r\n      if (snapshots.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      const functionPresenceMap = await this.buildFunctionPresenceMap(snapshots, functionId);\r\n      const history = this.buildFunctionHistory(snapshots, functionPresenceMap);\r\n\r\n      return includeAbsent ? history : history.filter(h => h.isPresent);\r\n    } catch (error) {\r\n      throw new DatabaseError(\r\n        ErrorCode.STORAGE_ERROR,\r\n        `Failed to get function history: ${error instanceof Error ? error.message : String(error)}`,\r\n        error instanceof Error ? error : undefined\r\n      );\r\n    }\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "functionId",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "options",
            "type": "{\r\n      limit?: number;\r\n      includeAbsent?: boolean;\r\n    }",
            "typeSimple": "number",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 33,
          "totalLines": 40,
          "cyclomaticComplexity": 9,
          "cognitiveComplexity": 9,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 5,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 3,
          "callbackCount": 1,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 524.74,
          "halsteadDifficulty": 5.1,
          "maintainabilityIndex": 40.23
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "d98e83a2-dcbd-55b1-9956-8d5cad7e0974",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "0a1e6e5d1b71c145c693a097f96c198d598081b7e3b55da77ee214b0681358d5",
        "contentId": "68d2882cc43b45f4520b728b073cedc4da1c4596d23033306000bc13ce29d29a",
        "name": "getMemoryStats",
        "displayName": "TypeScriptAnalyzer.getMemoryStats",
        "signature": "public TypeScriptAnalyzer.getMemoryStats(): { sourceFilesInMemory: number; maxSourceFiles: number }",
        "signatureHash": "aca4aa871f791c9b826f45c717c2c2673f7bad77dd9da1584bf5f8df4db8786b",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1374,
        "endLine": 1379,
        "startColumn": 2,
        "endColumn": 217,
        "astHash": "ae81c91875d07815",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get memory usage statistics\n   */\n  getMemoryStats(): { sourceFilesInMemory: number; maxSourceFiles: number } {\n    return {\n      sourceFilesInMemory: this.project.getSourceFiles().length,\n      maxSourceFiles: this.maxSourceFilesInMemory,\n    };\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 6,
          "totalLines": 11,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 2,
          "halsteadVolume": 49.83,
          "halsteadDifficulty": 1.25,
          "maintainabilityIndex": 99.57
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9eae906a-74da-50fc-a3d0-d16dc177d31e",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bdeabe9fda0e8ec417bb15d64261cedb55b2c8a379257083be72a5b86c2117b0",
        "contentId": "771f83d77120c06d88da4e76e0da69bb8abf75fdc83c2f17913f0814828ec61f",
        "name": "getCacheStats",
        "displayName": "TypeScriptAnalyzer.getCacheStats",
        "signature": "public TypeScriptAnalyzer.getCacheStats(): CacheStats",
        "signatureHash": "d0101de1c8c5c3c84cb045b00d572eeede995786e3b82e7238fa58d2ff06b982",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1384,
        "endLine": 1394,
        "startColumn": 2,
        "endColumn": 400,
        "astHash": "53479ff26536efa9",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get cache statistics\n   */\n  getCacheStats(): CacheStats {\n    // Return stats from the injected cache provider if available\n    const injectedStats = this.functionCacheProvider.getStats();\n    return {\n      totalEntries: injectedStats.totalEntries,\n      totalSize: 0, // Not available in simplified interface\n      hitRate: injectedStats.hitRate,\n      hits: injectedStats.hits,\n      misses: injectedStats.misses\n    };\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 10,
          "totalLines": 16,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 4,
          "codeToCommentRatio": 2.5,
          "halsteadVolume": 102.8,
          "halsteadDifficulty": 1.67,
          "maintainabilityIndex": 82.2
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a42f7689-6789-563f-b61b-73e2d15f44d2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "c75b74e71efe3ad817e3b3b567f5b3ac9bcd90b451c5dbec7f41dd11c6dcc96c",
        "contentId": "a1f1d20f10c6121c5109ebe90c077efafb76a66d43fc00c63e63441eb7cc0d31",
        "name": "getHashCacheStats",
        "displayName": "TypeScriptAnalyzer.getHashCacheStats",
        "signature": "public TypeScriptAnalyzer.getHashCacheStats(): void",
        "signatureHash": "d4139d30aa1f77be149186438d681c831f908ebbf27e13f1c2e34fcfd94ce1ac",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1399,
        "endLine": 1401,
        "startColumn": 2,
        "endColumn": 66,
        "astHash": "5a345fc44181ccbd",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get hash cache statistics\n   */\n  getHashCacheStats() {\n    return globalHashCache.getStats();\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 15.51,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "a36d0ed6-7ffb-549a-a051-7b78621945bc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "902018701753cac4deba126ca08c4bd7057cb6c422ac068eb23d00d6a15475cc",
        "contentId": "dd3c7cb2c7c745d09eee7836fa81cfaf6107bbfea4b9255734721def4c0c95a6",
        "name": "getTableStats",
        "displayName": "PGLiteStorageAdapter.getTableStats",
        "signature": "public async PGLiteStorageAdapter.getTableStats(): void",
        "signatureHash": "e869ad390061d38407957efcd2f9ca93b0beeda3fe9ea8a1dd0bc9781dd2bac9",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1400,
        "endLine": 1403,
        "startColumn": 2,
        "endColumn": 116,
        "astHash": "b2b8bd773118bd20",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "// Maintenance operations\r\n  async getTableStats() {\r\n    await this.ensureInitialized();\r\n    return this.maintenanceOps.getTableStats();\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 7,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 1,
          "codeToCommentRatio": 4,
          "halsteadVolume": 30.88,
          "halsteadDifficulty": 1.2,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "4b911aa6-d8d3-50db-a22a-0b5f9cbba96d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "3b061698dd5011fde196a922efe46a2f586b6ac5cdcd603959af4e72d337ce48",
        "contentId": "d16730e1da87769d128795ad5684475d60b1b652545e6ce491dacde27a902332",
        "name": "vacuumDatabase",
        "displayName": "PGLiteStorageAdapter.vacuumDatabase",
        "signature": "public async PGLiteStorageAdapter.vacuumDatabase(options = {}): void",
        "signatureHash": "18cfa1e6caeed9bb54a006e3643e28cce176cf0d23276e4246be965b894958a4",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1405,
        "endLine": 1408,
        "startColumn": 2,
        "endColumn": 129,
        "astHash": "3f716efdee98ce5b",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async vacuumDatabase(options = {}) {\r\n    await this.ensureInitialized();\r\n    return this.maintenanceOps.vacuum(options);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "options",
            "type": "any",
            "typeSimple": "any",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 41.21,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "881b78a8-df0f-521a-b749-870fc7af7c7d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "6b13a6bf5648495faddef88855539de5d92b3608f28298365eac4071cf427eb6",
        "contentId": "6f002769ecc520da61f234d64245e767b62f8cefdfee46bbc5ce14d5aeb7f0e0",
        "name": "clearHashCache",
        "displayName": "TypeScriptAnalyzer.clearHashCache",
        "signature": "public TypeScriptAnalyzer.clearHashCache(): void",
        "signatureHash": "c48e29024b66c4a90364bcacf3d3d8a91e9963c8a49a326642f8d9bea9951fae",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1406,
        "endLine": 1408,
        "startColumn": 2,
        "endColumn": 59,
        "astHash": "24905ba3723bb382",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear hash cache\n   */\n  clearHashCache(): void {\n    globalHashCache.clear();\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 15.51,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "53717869-b9ae-5f19-8eeb-300d6087990d",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "d2dec833d5674ff1723a83d79d5ba81f022fd61e890c98d6d1da70bff7873adf",
        "contentId": "a69c48993d7883ea22e622c5f01ff8ec8252062c22dfa2fb68779affb779f75c",
        "name": "analyzeDatabase",
        "displayName": "PGLiteStorageAdapter.analyzeDatabase",
        "signature": "public async PGLiteStorageAdapter.analyzeDatabase(options = {}): void",
        "signatureHash": "03295ebcb740524f0a858bcc548a89d209b6c1eb494c12e48ae7999e831318fd",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1410,
        "endLine": 1413,
        "startColumn": 2,
        "endColumn": 131,
        "astHash": "b0f400c237302b9a",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async analyzeDatabase(options = {}) {\r\n    await this.ensureInitialized();\r\n    return this.maintenanceOps.analyze(options);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "options",
            "type": "any",
            "typeSimple": "any",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 41.21,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "55564a7b-d5e6-5992-8bbd-6bb45256f1c3",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "e084eeb817536bc08a899abec91eba3031248596f6646c3390a34885e98ae3df",
        "contentId": "d1337d88c443c02e8b62fdd530a14268c67dce0d27dd5025dc50479440769b65",
        "name": "analyzeFileWithCallGraph",
        "displayName": "TypeScriptAnalyzer.analyzeFileWithCallGraph",
        "signature": "public async TypeScriptAnalyzer.analyzeFileWithCallGraph(filePath: string, snapshotId?: string): Promise<{ functions: FunctionInfo[]; callEdges: CallEdge[] }>",
        "signatureHash": "c4d83bec3ffda23723fa375d04178161b2338adf9cd9a5ef64c69967f2ac39c0",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1414,
        "endLine": 1430,
        "startColumn": 2,
        "endColumn": 585,
        "astHash": "a16fcb56ae7681b5",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze file and extract both functions and call edges\n   * Returns comprehensive analysis including call graph relationships\n   */\n  async analyzeFileWithCallGraph(\n    filePath: string,\n    snapshotId?: string\n  ): Promise<{ functions: FunctionInfo[]; callEdges: CallEdge[] }> {\n    // Read file content asynchronously\n    let fileContent: string;\n    try {\n      fileContent = await fs.readFile(filePath, 'utf-8');\n    } catch (error) {\n      if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {\n        throw new Error(`File does not exist: ${filePath}`);\n      }\n      throw error;\n    }\n\n    return this.analyzeFileContentWithCallGraph(filePath, fileContent, snapshotId || 'unknown');\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": true,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 15,
          "totalLines": 23,
          "cyclomaticComplexity": 6,
          "cognitiveComplexity": 6,
          "maxNestingLevel": 2,
          "parameterCount": 2,
          "returnStatementCount": 1,
          "branchCount": 1,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 3,
          "halsteadVolume": 213.75,
          "halsteadDifficulty": 6.1,
          "maintainabilityIndex": 66.08
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "5877714a-cbc7-5c47-b257-da01e11b89dc",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ee319a7fcab7c0112224b7012d01ae8c17f29b5d8dc3f70d10b020262faddeff",
        "contentId": "1dc12fc87fc1797815806b52af28bc7df8f27c5d54c7495d54c3e43ccb95aae3",
        "name": "reindexDatabase",
        "displayName": "PGLiteStorageAdapter.reindexDatabase",
        "signature": "public async PGLiteStorageAdapter.reindexDatabase(options = {}): void",
        "signatureHash": "03295ebcb740524f0a858bcc548a89d209b6c1eb494c12e48ae7999e831318fd",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1415,
        "endLine": 1418,
        "startColumn": 2,
        "endColumn": 131,
        "astHash": "b0f400c237302b9a",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async reindexDatabase(options = {}) {\r\n    await this.ensureInitialized();\r\n    return this.maintenanceOps.reindex(options);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "options",
            "type": "any",
            "typeSimple": "any",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 41.21,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "db0ce19a-ccb5-5774-b8d1-edd96ad71fe2",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ddd3a36ac33a2ef3e1b1371e998365d58b12fcbd871c438aac3a292598da9839",
        "contentId": "351f9705026354b1080f60f00006e53250c5e6dcfb526470968dfb80153ff812",
        "name": "maintainDatabase",
        "displayName": "PGLiteStorageAdapter.maintainDatabase",
        "signature": "public async PGLiteStorageAdapter.maintainDatabase(options = {}): void",
        "signatureHash": "4a117eb8547b91ab2c794a8b01537b320caf91828a85e716a41e1c1f1c3ceb4c",
        "filePath": "/src/storage/pglite-adapter.ts",
        "fileHash": "e3c96b9346f598bb0d689062e0af342c",
        "startLine": 1420,
        "endLine": 1423,
        "startColumn": 2,
        "endColumn": 133,
        "astHash": "fa2ea83452748c88",
        "contextPath": [
          "PGLiteStorageAdapter"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "async maintainDatabase(options = {}) {\r\n    await this.ensureInitialized();\r\n    return this.maintenanceOps.maintain(options);\r\n  }",
        "sourceFileRefId": "784a9360-3ffe-438d-a3fc-8e1e261cc154",
        "parameters": [
          {
            "name": "options",
            "type": "any",
            "typeSimple": "any",
            "position": 0,
            "isOptional": false,
            "isRest": false,
            "defaultValue": "{}"
          }
        ],
        "metrics": {
          "linesOfCode": 4,
          "totalLines": 6,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 1,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 0,
          "codeToCommentRatio": null,
          "halsteadVolume": 41.21,
          "halsteadDifficulty": 1.14,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "98029757-76c4-5aa3-b380-d85e3c597415",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "20e324f343ea65da761d4979f74661dca240fbd8eca9ecb4f3df3a1a08ad7ffe",
        "contentId": "02f2d23d4e5506f0b8db8b1abf40adef6502f94e18eda3026309ce872370694b",
        "name": "getCallGraphStats",
        "displayName": "TypeScriptAnalyzer.getCallGraphStats",
        "signature": "public TypeScriptAnalyzer.getCallGraphStats(): CacheStats",
        "signatureHash": "1ca9c6f3c952e480b939ed386fb8ad0a370f48f2ce896bf5bce07b92b65e755c",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1552,
        "endLine": 1554,
        "startColumn": 2,
        "endColumn": 90,
        "astHash": "032d68bf11bfd579",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Get call graph analyzer statistics\n   */\n  getCallGraphStats(): CacheStats {\n    return this.callGraphAnalyzer.getCacheStats();\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 1,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 22.46,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "9d945bf6-3f06-5f75-a00d-5b7049dd24a7",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "ec3d23ce87ed330136c459fc86927c9f28c805d1dd896fac6ad12c5013baee93",
        "contentId": "8725c5a1b0a5e00f3a264a83faa175ac47cdd79d4754dca05cd6e80069cf8c87",
        "name": "clearCallGraphCache",
        "displayName": "TypeScriptAnalyzer.clearCallGraphCache",
        "signature": "public TypeScriptAnalyzer.clearCallGraphCache(): void",
        "signatureHash": "3c23e63eab94d0c8c21868c6f5518374325774343d864ec4f46cccffb43cc05d",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1559,
        "endLine": 1561,
        "startColumn": 2,
        "endColumn": 76,
        "astHash": "0c1dffaddbe6154a",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": false,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Clear call graph analyzer cache\n   */\n  clearCallGraphCache(): void {\n    this.callGraphAnalyzer.clearCache();\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [],
        "metrics": {
          "linesOfCode": 3,
          "totalLines": 8,
          "cyclomaticComplexity": 1,
          "cognitiveComplexity": 1,
          "maxNestingLevel": 0,
          "parameterCount": 0,
          "returnStatementCount": 0,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 0,
          "asyncAwaitCount": 0,
          "callbackCount": 0,
          "commentLines": 3,
          "codeToCommentRatio": 1,
          "halsteadVolume": 18.09,
          "halsteadDifficulty": 1,
          "maintainabilityIndex": 100
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "c909bd4b-b562-56f3-b752-c2227a6c0941",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "bf44156f0948d89bc3b6451df7d3c0affbfb74b1025112c7b2c247ecb8be6f48",
        "contentId": "020ec2c06efdfe8ab96de1381ee787b6e11d1136d8ef421ed1666bb7e78ff256",
        "name": "extractTypeInformation",
        "displayName": "TypeScriptAnalyzer.extractTypeInformation",
        "signature": "public async TypeScriptAnalyzer.extractTypeInformation(filePaths: string[], snapshotId: string): Promise<TypeExtractionResult>",
        "signatureHash": "ad7c1f3e21da855eee364d18aa2703b11163d7fbc47d9375621ddd570692c341",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1566,
        "endLine": 1577,
        "startColumn": 2,
        "endColumn": 510,
        "astHash": "b1cee31e7c24192a",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Extract type information from TypeScript files\n   */\n  async extractTypeInformation(filePaths: string[], snapshotId: string): Promise<TypeExtractionResult> {\n    const sourceFiles = filePaths.map(filePath => {\n      try {\n        return this.project.addSourceFileAtPath(filePath);\n      } catch (error) {\n        this.logger.warn(`Failed to add source file: ${filePath}`, error);\n        return null;\n      }\n    }).filter((sf): sf is NonNullable<typeof sf> => sf !== null);\n\n    return this.typeSystemAnalyzer.extractTypeInformation(snapshotId, sourceFiles);\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [
          {
            "name": "filePaths",
            "type": "string[]",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 11,
          "totalLines": 17,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 3,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 2,
          "commentLines": 3,
          "codeToCommentRatio": 3.67,
          "halsteadVolume": 213.62,
          "halsteadDifficulty": 2.18,
          "maintainabilityIndex": 74.25
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "ad27e1d5-b0e1-545c-8013-e09c314d80f9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "57ee0519568bbcfa5c568483dfb005110b693a10a520c50600fa58eb0597e5e9",
        "contentId": "c0c8d70dbe7cb19ac94e3b510e0737df79513c929b707e681c40cd28799482c9",
        "name": "extractTypeInformationFromContents",
        "displayName": "TypeScriptAnalyzer.extractTypeInformationFromContents",
        "signature": "public async TypeScriptAnalyzer.extractTypeInformationFromContents(fileContents: Map<string, string>, snapshotId: string): Promise<TypeExtractionResult>",
        "signatureHash": "59e8703e5235e1ccabfba6aca526229d58b589aefbac6b4ad279e8fcb8566930",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1582,
        "endLine": 1596,
        "startColumn": 2,
        "endColumn": 624,
        "astHash": "14e4eca95d2f3a11",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Extract type information from file contents (for virtual files)\n   */\n  async extractTypeInformationFromContents(\n    fileContents: Map<string, string>,\n    snapshotId: string\n  ): Promise<TypeExtractionResult> {\n    const sourceFiles = Array.from(fileContents.entries()).map(([filePath, content]) => {\n      try {\n        return this.project.createSourceFile(filePath, content, { overwrite: true });\n      } catch (error) {\n        this.logger.warn(`Failed to create virtual source file: ${filePath}`, error);\n        return null;\n      }\n    }).filter((sf): sf is NonNullable<typeof sf> => sf !== null);\n\n    return this.typeSystemAnalyzer.extractTypeInformation(snapshotId, sourceFiles);\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [
          {
            "name": "fileContents",
            "type": "Map<string, string>",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "snapshotId",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 14,
          "totalLines": 20,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 3,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 0,
          "callbackCount": 2,
          "commentLines": 3,
          "codeToCommentRatio": 4.67,
          "halsteadVolume": 300.16,
          "halsteadDifficulty": 1.98,
          "maintainabilityIndex": 66.07
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    },
    {
      "functionInfo": {
        "id": "6cec14f4-511b-51ec-9d36-28b807d40bd9",
        "snapshotId": "9d805392-5845-440e-aa23-a1dbd397a2bc",
        "semanticId": "b8b8e82ae1801ef32fb611a7dcc000e498eb3477ccef8cea445f2ad44cacfe71",
        "contentId": "2da6eeb7a1fbc32747a809e63ad7c3d4d226507cd3f379b425e7542cc9ac8834",
        "name": "analyzeTypesFromContent",
        "displayName": "TypeScriptAnalyzer.analyzeTypesFromContent",
        "signature": "public async TypeScriptAnalyzer.analyzeTypesFromContent(filePath: string, fileContent: string): Promise<{ types: TypeDefinition[]; relationships: TypeRelationship[] }>",
        "signatureHash": "d1bebf61c3c984c84f02da320ed5683a20efaae926ba8e7ae61c82fa53f71f69",
        "filePath": "/src/analyzers/typescript-analyzer.ts",
        "fileHash": "d486c66b73da6b3eec7bc1891eac09d7",
        "startLine": 1602,
        "endLine": 1621,
        "startColumn": 2,
        "endColumn": 758,
        "astHash": "195691a13643fbb1",
        "contextPath": [
          "TypeScriptAnalyzer"
        ],
        "functionType": "method",
        "modifiers": [
          "async",
          "public"
        ],
        "nestingLevel": 0,
        "isExported": true,
        "isAsync": true,
        "isGenerator": false,
        "isArrowFunction": false,
        "isMethod": true,
        "isConstructor": false,
        "isStatic": false,
        "sourceCode": "/**\n   * Analyze types from a single file content\n   * Used for lazy type system analysis\n   */\n  async analyzeTypesFromContent(\n    filePath: string,\n    fileContent: string\n  ): Promise<{ types: TypeDefinition[]; relationships: TypeRelationship[] }> {\n    try {\n      const sourceFile = this.project.createSourceFile(filePath, fileContent, { overwrite: true });\n      \n      // Use a temporary snapshot ID for type extraction\n      const tempSnapshotId = 'temp-type-analysis';\n      const result = await this.typeSystemAnalyzer.extractTypeInformation(tempSnapshotId, [sourceFile]);\n      \n      return {\n        types: result.typeDefinitions,\n        relationships: result.typeRelationships\n      };\n    } catch (error) {\n      this.logger.warn(`Failed to analyze types for ${filePath}`, error);\n      return { types: [], relationships: [] };\n    }\n  }",
        "sourceFileRefId": "c3160c51-dea4-4246-bac8-412832ca2b50",
        "parameters": [
          {
            "name": "filePath",
            "type": "string",
            "typeSimple": "string",
            "position": 0,
            "isOptional": false,
            "isRest": false
          },
          {
            "name": "fileContent",
            "type": "string",
            "typeSimple": "string",
            "position": 1,
            "isOptional": false,
            "isRest": false
          }
        ],
        "metrics": {
          "linesOfCode": 17,
          "totalLines": 26,
          "cyclomaticComplexity": 2,
          "cognitiveComplexity": 2,
          "maxNestingLevel": 1,
          "parameterCount": 2,
          "returnStatementCount": 2,
          "branchCount": 0,
          "loopCount": 0,
          "tryCatchCount": 1,
          "asyncAwaitCount": 1,
          "callbackCount": 0,
          "commentLines": 5,
          "codeToCommentRatio": 3.4,
          "halsteadVolume": 228.23,
          "halsteadDifficulty": 1.48,
          "maintainabilityIndex": 63.58
        }
      },
      "reason": "unreachable",
      "confidenceScore": 1,
      "callersCount": 0,
      "sourceLines": [],
      "analysisReason": "Function is unreachable",
      "metadata": {
        "reason": "unreachable",
        "callersCount": 0,
        "highConfidenceCallers": 0,
        "typeProtection": "none",
        "typeEvidence": {
          "interfaceCount": 0,
          "classCount": 0,
          "overrideCount": 0,
          "compatibilityScore": 0,
          "protectionScore": 0
        }
      },
      "estimatedImpact": "high",
      "typeInfo": {
        "isInterfaceImplementation": false,
        "isMethodOverride": false,
        "implementedInterfaces": [],
        "overriddenMethods": [],
        "implementingClasses": [],
        "confidenceScore": 0,
        "protectionReason": null,
        "evidenceStrength": {
          "interfaceCount": 0,
          "classCount": 0,
          "inheritanceDepth": 0,
          "overrideCount": 0,
          "abstractImplementationCount": 0
        }
      }
    }
  ],
  "deleted": [],
  "skipped": [],
  "errors": [],
  "warnings": []
}

üí° This was a preview. Use --execute flag to perform actual deletion.
