# Enhanced architecture configuration for funcqc
# Based on feedback for allow-based rules with comprehensive layer coverage

layers:
  # Entry points and user interfaces
  cli:
    patterns:
      - "src/cli.ts"
      - "src/cli/**"
    role: "Command-line interface and user interaction"
    consolidationStrategy: "conservative"
    consolidationTarget: false
    internalUtils:
      - "src/cli/shared/"
    maxDependencies: ["orchestration", "infrastructure", "utils", "types"]
  
  # Application orchestration and use case coordination
  orchestration:
    patterns:
      - "src/use-cases/**"
    role: "High-level use case coordination and workflow orchestration"
    consolidationStrategy: "conservative"
    consolidationTarget: false
    maxDependencies: ["analysis", "domain", "services", "infrastructure", "utils", "types"]
  
  # Specialized analysis engines and algorithms
  analysis:
    patterns:
      - "src/analyzers/**"
      - "src/similarity/**"
    role: "Analysis algorithms with domain-specific knowledge"
    consolidationStrategy: "conservative"
    consolidationTarget: false
    internalUtils:
      - "src/analyzers/shared/"
    avoidCrossLayerSharing: ["storage", "services"]
    maxDependencies: ["domain", "services", "storage", "infrastructure", "utils", "types"]
  
  # Core domain logic and business rules
  domain:
    patterns:
      - "src/core/**"
      - "src/metrics/**"
      - "src/refactoring/**"
    role: "Core business logic and domain rules"
    consolidationStrategy: "aggressive"
    consolidationTarget: true
    internalUtils:
      - "src/core/shared/"
    maxDependencies: ["storage", "infrastructure", "utils", "types"]
  
  # External service integrations and background processing
  services:
    patterns:
      - "src/services/**"
      - "src/workers/**"
    role: "External service integrations and background processing"
    consolidationStrategy: "conservative"
    consolidationTarget: false
    internalUtils:
      - "src/services/shared/"
    maxDependencies: ["storage", "infrastructure", "utils", "types"]
  
  # Data persistence and database operations
  storage:
    patterns:
      - "src/storage/**"
      - "src/migrations/**"
    role: "Data persistence and database operations"
    consolidationStrategy: "aggressive"
    consolidationTarget: true
    internalUtils:
      - "src/storage/shared/"
    maxDependencies: ["infrastructure", "utils", "types"]
  
  # Infrastructure, configuration and static data
  infrastructure:
    patterns:
      - "src/config/**"
      - "src/schemas/**"
      - "src/data/**"
    role: "Configuration, schemas, and static data management"
    consolidationStrategy: "aggressive"
    consolidationTarget: true
    maxDependencies: ["utils", "types"]
  
  # Pure utility functions and tools
  utils:
    patterns:
      - "src/utils/**"
      - "src/tools/**"
      - "src/visualization/**"
    role: "Pure utility functions with no domain dependencies"
    consolidationStrategy: "aggressive"
    consolidationTarget: true
    maxDependencies: ["types"]
  
  # Type definitions (completely independent)
  types:
    patterns:
      - "src/types/**"
    role: "Type definitions - completely independent"
    consolidationStrategy: "none"
    consolidationTarget: false
    maxDependencies: []

rules:
  # CLI layer: Entry point, can depend on orchestration and infrastructure
  - type: allow
    from: "cli"
    to: ["orchestration", "infrastructure", "utils", "types"]
    description: "CLI can orchestrate use cases and access configuration"

  # Orchestration layer: Coordinates domain operations
  - type: allow
    from: "orchestration"
    to: ["analysis", "domain", "services", "infrastructure", "utils", "types"]
    description: "Use cases orchestrate analysis, domain logic, and services"

  # Analysis layer: Specialized engines, can use domain logic and services
  - type: allow
    from: "analysis"
    to: ["domain", "services", "storage", "infrastructure", "utils", "types"]
    description: "Analysis engines can use domain logic and external services"

  # Domain layer: Core business logic, can use storage and utilities
  - type: allow
    from: "domain"
    to: ["storage", "infrastructure", "utils", "types"]
    description: "Domain logic can persist data and use utilities"

  # Services layer: External integrations, can use storage and utilities
  - type: allow
    from: "services"
    to: ["storage", "infrastructure", "utils", "types"]
    description: "Services can persist data and use configuration"

  # Storage layer: Data persistence, can use infrastructure and utilities
  - type: allow
    from: "storage"
    to: ["infrastructure", "utils", "types"]
    description: "Storage can use configuration and utilities"

  # Infrastructure layer: Configuration and schemas, can use utilities
  - type: allow
    from: "infrastructure"
    to: ["utils", "types"]
    description: "Infrastructure can use utilities for configuration processing"

  # Utils layer: Can only depend on types
  - type: allow
    from: "utils"
    to: ["types"]
    description: "Utilities are pure functions that only use types"

  # Types layer: Completely independent
  - type: forbid
    from: "types"
    to: "*"
    description: "Types must be completely independent and self-contained"
    severity: error

  # Prevent upward dependencies (architectural violations)
  - type: forbid
    from: ["orchestration", "analysis", "domain", "services", "storage", "infrastructure", "utils"]
    to: "cli"
    description: "Lower layers cannot depend on CLI entry points"
    severity: error

  - type: forbid
    from: ["analysis", "domain", "services", "storage", "infrastructure", "utils"]
    to: "orchestration"
    description: "Lower layers cannot depend on orchestration layer"
    severity: error

consolidationStrategies:
  # Global utilities consolidation
  globalUtils:
    target: "utils"
    criteria:
      - "No domain knowledge required"
      - "Usable across all layers"
      - "Pure functions only"
      - "No external dependencies"
    examples: ["path operations", "string formatting", "basic validation", "date utilities"]
    confidence: "high"
  
  # Layer-specific utilities consolidation
  layerUtils:
    target: "layer/shared/"
    criteria:
      - "Domain-specific knowledge required"
      - "Used by multiple files within layer"
      - "Not applicable to other layers"
      - "Maintains layer boundaries"
    examples: ["AST parsing helpers", "SQL query builders", "CLI formatters", "analysis algorithms"]
    confidence: "medium"
  
  # Functions that should not be consolidated
  keepInPlace:
    target: "keep_in_place"
    criteria:
      - "Single-use context"
      - "Tightly coupled to specific algorithm"
      - "Different implementations needed per context"
      - "Layer-specific optimizations"
    examples: ["specialized analyzers", "context-specific handlers", "algorithm variants"]
    confidence: "high"

settings:
  allowSameLayer: true
  strictMode: true
  defaultSeverity: error
  ignoreExternal: true